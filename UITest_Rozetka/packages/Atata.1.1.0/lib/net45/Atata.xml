<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atata</name>
    </assembly>
    <members>
        <member name="T:Atata.ActivatorEx">
            <summary>
            Contains methods to create types of objects.
            To create an instance uses type's parameterless constructor or constructor containing only optional arguments.
            </summary>
        </member>
        <member name="T:Atata.AttributeSettingsAttribute">
            <summary>
            Represents the base attribute settings class for other attributes.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.TargetAttributeTypes">
            <summary>
            Gets or sets the target attribute types.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.TargetAttributeType">
            <summary>
            Gets or sets the target attribute type.
            </summary>
        </member>
        <member name="T:Atata.ContentGetBehaviorAttribute">
            <summary>
            Represents the base behavior class for getting the component's content.
            </summary>
        </member>
        <member name="M:Atata.ContentGetBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Gets the component content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The component.</param>
            <returns>The content.</returns>
        </member>
        <member name="T:Atata.ContentSourceAttribute">
            <summary>
            Specifies the content source of a component.
            Source can be specified either using a value of <see cref="T:Atata.ContentSource"/> or HTML attribute name.
            </summary>
        </member>
        <member name="M:Atata.ContentSourceAttribute.#ctor(Atata.ContentSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ContentSourceAttribute"/> class using <see cref="T:Atata.ContentSource"/> value.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Atata.ContentSourceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ContentSourceAttribute"/> class using the name of HTML attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="P:Atata.ContentSourceAttribute.Source">
            <summary>
            Gets the kind of source.
            </summary>
        </member>
        <member name="P:Atata.ContentSourceAttribute.AttributeName">
            <summary>
            Gets the name of HTML attribute.
            </summary>
        </member>
        <member name="T:Atata.DragAndDropBehaviorAttribute">
            <summary>
            Represents the base behavior class for drag and drop.
            </summary>
        </member>
        <member name="T:Atata.DragAndDropUsingActionsAttribute">
            <summary>
            Represents the behavior for drag and drop using WebDriver's <see cref="T:OpenQA.Selenium.Interactions.Actions"/>.
            Performs <see cref="M:OpenQA.Selenium.Interactions.Actions.ClickAndHold(OpenQA.Selenium.IWebElement)"/>, <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)"/> and <see cref="M:OpenQA.Selenium.Interactions.Actions.Release(OpenQA.Selenium.IWebElement)"/> actions.
            </summary>
        </member>
        <member name="T:Atata.DragAndDropUsingDomEventsAttribute">
            <summary>
            Represents the behavior for drag and drop using JavaScript.
            The script simulates drag and drop by dispatching DOM events: 'dragstart', 'dragenter', 'dragover', 'drop' and 'dragend'.
            </summary>
        </member>
        <member name="T:Atata.ScrollBehaviorAttribute">
            <summary>
            Represents the base behavior class for scrolling to control.
            </summary>
        </member>
        <member name="T:Atata.ScrollUsingMoveToElementAttribute">
            <summary>
            Represents the behavior for scrolling to control using WebDriver's <see cref="T:OpenQA.Selenium.Interactions.Actions"/>.
            Performs <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)"/> action.
            </summary>
        </member>
        <member name="T:Atata.ScrollUsingScrollIntoViewAttribute">
            <summary>
            Represents the behavior for scrolling to control using JavaScript.
            Performs <c>element.scrollIntoView(true)</c> function.
            </summary>
        </member>
        <member name="T:Atata.SelectByAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2"/> control using specified option attribute.
            </summary>
        </member>
        <member name="P:Atata.SelectByAttribute.AttributeName">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="T:Atata.SelectByLabelAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2"/> control using option <c>label</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.SelectByTextAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2"/> control using option text.
            </summary>
        </member>
        <member name="T:Atata.SelectByValueAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2"/> control using option <c>value</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.SelectOptionBehaviorAttribute">
            <summary>
            Represents the base behavior class for option selection of <see cref="T:Atata.Select`2"/> control.
            </summary>
        </member>
        <member name="T:Atata.ControlDefinitionAttribute">
            <summary>
            Specifies the definition of the control, like scope XPath, visibility, component type name, etc.
            </summary>
        </member>
        <member name="P:Atata.ControlDefinitionAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Visible"/>.
            </summary>
        </member>
        <member name="T:Atata.ControlFindingAttribute">
            <summary>
            Specifies the default finding strategy of a control.
            Can be applied to the control class and assembly.
            </summary>
        </member>
        <member name="P:Atata.ControlFindingAttribute.FindAttributeType">
            <summary>
            Gets the type of the attribute to use for the control finding.
            Type should be inherited from <see cref="T:Atata.FindAttribute"/>.
            </summary>
        </member>
        <member name="P:Atata.ControlFindingAttribute.ControlType">
            <summary>
            Gets or sets the type of the control (e.g.: <c>typeof(Link&lt;&gt;)</c>, <c>typeof(EditableField&lt;,&gt;)</c>).
            </summary>
        </member>
        <member name="P:Atata.ControlFindingAttribute.ParentComponentType">
            <summary>
            Gets or sets the type of the parent component.
            </summary>
        </member>
        <member name="T:Atata.FindAttribute">
            <summary>
            Represents the base attribute class for the finding attributes.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Index">
            <summary>
            Gets or sets the index of the control.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Visible"/>.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent"/>.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.OuterXPath">
            <summary>
            Gets or sets the outer XPath.
            The default value is <see langword="null"/>, meaning that the control is searchable as descendant (using <c>".//"</c> XPath) in scope source.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Strategy">
            <summary>
            Gets or sets the strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeLocateStrategy"/>.
            The default value is <see langword="null"/>, meaning that the default strategy of the specific <see cref="T:Atata.FindAttribute"/> should be used.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.DefaultStrategy">
            <summary>
            Gets the default strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeLocateStrategy"/>.
            </summary>
        </member>
        <member name="T:Atata.FindByAttributeAttribute">
            <summary>
            Specifies that a control should be found by the specified attribute.
            Finds the control that has the specified attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByChildContentAttribute">
            <summary>
            Specifies that a control should be found by the child content text.
            Finds the control having the child with the specified content.
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="P:Atata.FindByChildContentAttribute.ChildIndex">
            <summary>
            Gets or sets the index of the child element.
            The default value is <c>0</c>.
            </summary>
        </member>
        <member name="T:Atata.FindByClassAttribute">
            <summary>
            Specifies that a control should be found by class attribute.
            Finds the descendant or self control in the scope of the element having the specified class.
            Uses <see cref="F:Atata.TermCase.Kebab"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnHeaderAttribute">
            <summary>
            Specifies that a control should be found within the table column (<c>&lt;td&gt;</c>) that has the header (<c>&lt;th&gt;</c>) matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnIndexAttribute">
            <summary>
            Specifies that a control should be found within the table column (<c>&lt;td&gt;</c>) that has the nth index.
            </summary>
        </member>
        <member name="T:Atata.FindByContentAttribute">
            <summary>
            Specifies that a control should be found by the content text.
            Finds the control having the specified content.
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByContentOrValueAttribute">
            <summary>
            Specifies that a control should be found by the content text or value attribute.
            Finds the control that has the content or value attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByCssAttribute">
            <summary>
            Specifies that a control should be found by CSS selector.
            Finds the descendant or self control in the scope of the element found by the specified CSS selector.
            </summary>
        </member>
        <member name="P:Atata.FindByCssAttribute.Values">
            <summary>
            Gets the CSS selector values.
            </summary>
        </member>
        <member name="T:Atata.FindByDescriptionTermAttribute">
            <summary>
            Specifies that a control should be found by the description list term element.
            Finds the descendant control of the <c>&lt;dd&gt;</c> element in the scope of the <c>&lt;dl&gt;</c> element that has the <c>&lt;dt&gt;</c> element matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByFieldSetAttribute">
            <summary>
            Specifies that a control should be found by the parent fieldset element.
            Finds the descendant control in the scope of the <c>&lt;fieldset&gt;</c> element that has the <c>&lt;legend&gt;</c> element matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByIdAttribute">
            <summary>
            Specifies that a control should be found by id attribute.
            Finds the descendant or self control in the scope of the element having the specified id.
            Uses <see cref="F:Atata.TermCase.Kebab"/> as the default term case.
            </summary>
        </member>
        <member name="P:Atata.FindByIdAttribute.DefaultCase">
            <summary>
            Gets the default term case.
            The default value is <see cref="F:Atata.TermCase.Kebab"/>.
            </summary>
        </member>
        <member name="T:Atata.FindByIndexAttribute">
            <summary>
            Specifies that a control should use the nth occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindByLabelAttribute">
            <summary>
            Specifies that a control should be found by the label element.
            Finds the <c>&lt;label&gt;</c> element by the specified term(s), then finds the bound control (for example, by label's <c>for</c> attribute referencing the element of the control by id).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByNameAttribute">
            <summary>
            Specifies that a control should be found by name attribute.
            Finds the descendant or self control in the scope of the element having the specified name.
            Uses <see cref="F:Atata.TermCase.Kebab"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByPlaceholderAttribute">
            <summary>
            Specifies that a control should be found by the placeholder attribute.
            Finds the control that has the placeholder attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByTitleAttribute">
            <summary>
            Specifies that a control should be found by the title attribute.
            Finds the control that has the title attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByValueAttribute">
            <summary>
            Specifies that a control should be found by the value attribute.
            Finds the control that has the value attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title"/> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByXPathAttribute">
            <summary>
            Specifies that a control should be found by XPath.
            Finds the descendant or self control in the scope of the element found by the specified XPath.
            </summary>
        </member>
        <member name="P:Atata.FindByXPathAttribute.Values">
            <summary>
            Gets the XPath values.
            </summary>
        </member>
        <member name="T:Atata.FindFirstAttribute">
            <summary>
            Indicates that a control should use the first occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindLastAttribute">
            <summary>
            Indicates that a control should use the last occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindSettingsAttribute">
            <summary>
            Defines the settings to apply for the specified finding strategy of a control.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.FindAttributeType">
            <summary>
            Gets the type of the attribute to use for the control finding.
            Type should be inherited from <see cref="T:Atata.FindAttribute"/>.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Index">
            <summary>
            Gets or sets the index of the control.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Visible"/>.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent"/>.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.OuterXPath">
            <summary>
            Gets or sets the outer XPath.
            The default value is null, meaning that the control is searchable as descendant (using ".//" XPath) in scope source.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Strategy">
            <summary>
            Gets or sets the strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeLocateStrategy"/>.
            The default value is <see langword="null"/>, meaning that the default strategy of the specific <see cref="T:Atata.FindAttribute"/> should be used.
            </summary>
        </member>
        <member name="T:Atata.TermFindAttribute">
            <summary>
            Represents the base attribute class for the finding attributes that use terms.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Values">
            <summary>
            Gets the term values.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut considering the <see cref="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings"/> property value of <see cref="T:Atata.ControlDefinitionAttribute"/> and <see cref="T:Atata.PageObjectDefinitionAttribute"/>.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.DefaultCase">
            <summary>
            Gets the default term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.DefaultMatch">
            <summary>
            Gets the default match.
            The default value is <see cref="F:Atata.TermMatch.Equals"/>.
            </summary>
        </member>
        <member name="T:Atata.TermFindSettingsAttribute">
            <summary>
            Defines the term settings to apply for the specified finding strategy of a control.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Case">
            <summary>
            Gets or sets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Match">
            <summary>
            Gets or sets the match.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut considering the IgnoreNameEndings property value of <see cref="T:Atata.ControlDefinitionAttribute"/> and <see cref="T:Atata.PageObjectDefinitionAttribute"/>.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Atata.CultureAttribute">
            <summary>
            Specifies the culture of the component.
            </summary>
        </member>
        <member name="P:Atata.CultureAttribute.Value">
            <summary>
            Gets the culture value.
            </summary>
        </member>
        <member name="P:Atata.ExtraXPathAttribute.RawXPath">
            <summary>
            Gets the raw XPath.
            </summary>
        </member>
        <member name="P:Atata.ExtraXPathAttribute.XPath">
            <summary>
            Gets the XPath prepended with <c>"/"</c>, if it can be applied.
            </summary>
        </member>
        <member name="T:Atata.FormatAttribute">
            <summary>
            Specifies the data format of the control.
            </summary>
        </member>
        <member name="P:Atata.FormatAttribute.Value">
            <summary>
            Gets the format value.
            </summary>
        </member>
        <member name="T:Atata.FormatSettingsAttribute">
            <summary>
            Defines the data format to apply for the specified control.
            </summary>
        </member>
        <member name="P:Atata.FormatSettingsAttribute.ControlType">
            <summary>
            Gets or sets the type of the control (e.g.: <c>typeof(DateInput&lt;&gt;)</c>, <c>typeof(TimeInput&lt;&gt;)</c>).
            </summary>
        </member>
        <member name="T:Atata.MulticastAttribute">
            <summary>
            Represents the base class for attributes that can be applied to component at any level (declared, parent component, assembly, global and component).
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetNames">
            <summary>
            Gets or sets the target component names.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetName">
            <summary>
            Gets or sets the target component name.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetTypes">
            <summary>
            Gets or sets the target component types.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetType">
            <summary>
            Gets or sets the target component type.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetParentTypes">
            <summary>
            Gets or sets the target component's parent types.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetParentType">
            <summary>
            Gets or sets the target component's parent type.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.IsTargetSpecified">
            <summary>
            Gets a value indicating whether this instance has any target specified.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetAnyType">
            <summary>
            Gets or sets a value indicating whether any type is targeted.
            When is set to <see langword="true"/>, sets <c>typeof(object)</c> to <see cref="P:Atata.MulticastAttribute.TargetType"/> property.
            When is set to <see langword="false"/>, sets <see langword="null"/> to <see cref="P:Atata.MulticastAttribute.TargetType"/> property.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.Properties">
            <summary>
            Gets the properties bag.
            </summary>
        </member>
        <member name="M:Atata.MulticastAttribute.IsNameApplicable(System.String)">
            <summary>
            Determines whether the component name applies the name criteria.
            </summary>
            <param name="name">The component name.</param>
            <returns>
              <c>true</c> if the name applies the criteria; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atata.MulticastAttribute.CalculateTargetRank(Atata.UIComponentMetadata)">
            <summary>
            Calculates the target rank.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>The rank.</returns>
        </member>
        <member name="T:Atata.NameAttribute">
            <summary>
            Specifies the name of the component.
            </summary>
        </member>
        <member name="P:Atata.NameAttribute.Value">
            <summary>
            Gets the name value.
            </summary>
        </member>
        <member name="T:Atata.PageObjectDefinitionAttribute">
            <summary>
            Specifies the definition of the page object, like scope XPath, component type name, etc.
            </summary>
        </member>
        <member name="T:Atata.ScopeDefinitionAttribute">
            <summary>
            Represents the base attribute class for component scope definition.
            The basic definition is represented with XPath.
            </summary>
        </member>
        <member name="F:Atata.ScopeDefinitionAttribute.DefaultScopeXPath">
            <summary>
            The default scope XPath, which is <c>"*"</c>.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ScopeXPath">
            <summary>
            Gets the XPath of the scope element which is a combination of XPath passed through the constructor and <see cref="P:Atata.ScopeDefinitionAttribute.ContainingClasses"/> property values.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ContainingClass">
            <summary>
            Gets or sets the containing CSS class name.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ContainingClasses">
            <summary>
            Gets or sets the containing CSS class names.
            Multiple class names are used in XPath as conditions joined with <c>and</c> operator.
            </summary>
        </member>
        <member name="M:Atata.ScopeDefinitionAttribute.BuildScopeXPath">
            <summary>
            Builds the complete XPath of the scope element which is a combination of XPath passed through the constructor and <see cref="P:Atata.ScopeDefinitionAttribute.ContainingClasses"/> property values.
            </summary>
            <returns>The built XPath.</returns>
        </member>
        <member name="T:Atata.TermAttribute">
            <summary>
            Specifies the term(s) to use for the control search.
            </summary>
        </member>
        <member name="P:Atata.TermAttribute.Values">
            <summary>
            Gets the term values.
            </summary>
        </member>
        <member name="P:Atata.TermAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut considering the IgnoreNameEndings property value of <see cref="T:Atata.ControlDefinitionAttribute"/> and <see cref="T:Atata.PageObjectDefinitionAttribute"/>.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Atata.TermSettingsAttribute">
            <summary>
            Specifies the term settings.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="T:Atata.TraceLogAttribute">
            <summary>
            Indicates that component log messages should be written with <see cref="F:Atata.LogLevel.Trace"/> log level instead of <see cref="F:Atata.LogLevel.Info"/>.
            Attribute is useful for sub-controls of complex controls to keep info log cleaner by skipping sub-control interactional log messages.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Atata.ClickParentAttribute">
            <summary>
            Indicates that the click on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the drop-down button/menu controls.
            </summary>
        </member>
        <member name="T:Atata.CloseAlertBoxAttribute">
            <summary>
            Indicates that the alert box should be closed on the specified event.
            Be default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.CloseConfirmBoxAttribute">
            <summary>
            Indicates that the confirm box should be closed on the specified event.
            Be default occurs after the click.
            By default accepts the confirm box.
            </summary>
        </member>
        <member name="T:Atata.HoverParentAttribute">
            <summary>
            Indicates that the hover on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the drop-down menu item controls.
            </summary>
        </member>
        <member name="T:Atata.InvokeDelegateAttribute">
            <summary>
            Defines the delegate to invoke on the specified event.
            </summary>
        </member>
        <member name="P:Atata.InvokeDelegateAttribute.ActionDelegate">
            <summary>
            Gets the action delegate.
            </summary>
        </member>
        <member name="T:Atata.InvokeMethodAttribute">
            <summary>
            Defines the method to invoke on the specified event.
            </summary>
        </member>
        <member name="P:Atata.InvokeMethodAttribute.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="T:Atata.LogInfoAttribute">
            <summary>
            Defines the information message to be logged on the specified event.
            </summary>
        </member>
        <member name="T:Atata.PressEnterAttribute">
            <summary>
            Indicates that the Enter key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressEscapeAttribute">
            <summary>
            Indicates that the Escape key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressKeysAttribute">
            <summary>
            Defines the keys to press on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressTabAttribute">
            <summary>
            Indicates that the Tab key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.RightClickParentAttribute">
            <summary>
            Indicates that the right click on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the context menu item controls.
            </summary>
        </member>
        <member name="T:Atata.ScreenshotAttribute">
            <summary>
            Indicates that the screenshot should be captured with an optional title.
            By default occurs before the click.
            </summary>
        </member>
        <member name="T:Atata.ScrollDownAttribute">
            <summary>
            Indicates that the scroll down should be performed on the specified event.
            By default occurs before any access to the component.
            </summary>
        </member>
        <member name="T:Atata.ScrollUpAttribute">
            <summary>
            Indicates that the scroll up should be performed on the specified event.
            By default occurs before any access to the component.
            </summary>
        </member>
        <member name="T:Atata.TermVerificationTriggerAttribute">
            <summary>
            The base trigger attribute class that can be used in the verification process when the page object is initialized.
            </summary>
        </member>
        <member name="T:Atata.TriggerAttribute">
            <summary>
            Represents the base attribute class for the triggers.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.On">
            <summary>
            Gets or sets the trigger events.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.Priority">
            <summary>
            Gets or sets the priority.
            The default value is <see cref="F:Atata.TriggerPriority.Medium"/>.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.AppliesTo">
            <summary>
            Gets or sets the scope to apply the trigger to.
            The default value is <see cref="F:Atata.TriggerScope.Self"/>.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.IsDefinedAtComponentLevel">
            <summary>
            Gets a value indicating whether this trigger is defined at the component level.
            </summary>
        </member>
        <member name="M:Atata.TriggerAttribute.Execute``1(Atata.TriggerContext{``0})">
            <summary>
            Executes the specified trigger action.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
        </member>
        <member name="T:Atata.VerifyContentAttribute">
            <summary>
            Specifies the verification of the page content.
            Verifies whether the component contains the specified content values.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyContentMatchesAttribute">
            <summary>
            Specifies the verification of the page content.
            Verifies whether the component content matches any of the specified values.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyExistsAttribute">
            <summary>
            Indicates that the component should be verified whether it exists on the specified event.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyH1Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h1&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH2Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h2&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH3Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h3&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH4Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h4&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH5Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h5&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH6Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h6&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="P:Atata.VerifyHeadingTriggerAttribute.Index">
            <summary>
            Gets or sets the index of header.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="T:Atata.VerifyMissingAttribute">
            <summary>
            Indicates that the component should be verified whether it is missing on the specified event.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyTitleAttribute">
            <summary>
            Specifies the verification of the page title.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title"/> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyTitleSettingsAttribute">
            <summary>
            Defines the settings to apply for the <see cref="T:Atata.VerifyTitleAttribute"/> trigger.
            </summary>
        </member>
        <member name="T:Atata.WaitAttribute">
            <summary>
            Specifies the waiting period in seconds.
            By default occurs after any action.
            </summary>
        </member>
        <member name="T:Atata.WaitForAngularJSAjaxAttribute">
            <summary>
            Indicates that the waiting should be performed until the AngularJS (v1.*) AJAX is completed.
            By default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.WaitForAttribute">
            <summary>
            Specifies the condition of the component to wait for.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="M:Atata.WaitForAttribute.#ctor(Atata.Until,Atata.TriggerEvents,Atata.TriggerPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.WaitForAttribute"/> class.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="on">The trigger events.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Atata.WaitForDocumentReadyStateAttribute">
            <summary>
            Indicates that the waiting should be performed until the document is ready/loaded.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.WaitForElementAttribute">
            <summary>
            Specifies the waiting for the element.
            By default occurs after the click.
            </summary>
        </member>
        <member name="M:Atata.WaitForElementAttribute.#ctor(Atata.WaitBy,System.String,Atata.Until,Atata.TriggerEvents,Atata.TriggerPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.WaitForElementAttribute" /> class.
            </summary>
            <param name="waitBy">The kind of the element selector to wait for.</param>
            <param name="selector">The selector.</param>
            <param name="until">The waiting condition.</param>
            <param name="on">The trigger events.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:Atata.WaitForElementAttribute.WaitBy">
            <summary>
            Gets the kind of the element selector to wait for.
            </summary>
        </member>
        <member name="P:Atata.WaitForElementAttribute.Selector">
            <summary>
            Gets the selector.
            </summary>
        </member>
        <member name="P:Atata.WaitForElementAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent"/>.
            </summary>
        </member>
        <member name="T:Atata.WaitForJQueryAjaxAttribute">
            <summary>
            Indicates that the waiting should be performed until the jQuery AJAX is completed.
            By default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.WaitForScriptAttribute">
            <summary>
            Represents the base trigger attribute for a waiting for script to be executed successfully.
            An inherited class should override <c>BuildScript</c> method and optionally <c>BuildReportMessage</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitForScriptAttribute.Timeout">
            <summary>
            Gets or sets the waiting timeout in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitForScriptAttribute.RetryInterval">
            <summary>
            Gets or sets the retry interval in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingRetryInterval.TotalSeconds</c>.
            </summary>
        </member>
        <member name="M:Atata.WaitForScriptAttribute.BuildReportMessage``1(Atata.TriggerContext{``0})">
            <summary>
            Builds the report message.
            The default message is <c>"Wait for script"</c>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
            <returns>The message or <see langword="null"/>.</returns>
        </member>
        <member name="M:Atata.WaitForScriptAttribute.BuildScript``1(Atata.TriggerContext{``0})">
            <summary>
            Builds the script to wait until it returns <c>true</c>.
            The script should return <see langword="true"/> or <see langword="false"/>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
            <returns>The script.</returns>
        </member>
        <member name="P:Atata.WaitUntilAttribute.Until">
            <summary>
            Gets the waiting approach.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.ThrowOnPresenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the presence (exists or visible) failure.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.ThrowOnAbsenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the absence (missing or hidden) failure.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.PresenceTimeout">
            <summary>
            Gets or sets the presence (exists or visible) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.RetryTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.AbsenceTimeout">
            <summary>
            Gets or sets the absence (missing or hidden) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.RetryTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.RetryInterval">
            <summary>
            Gets or sets the retry interval.
            The default value is taken from <c>AtataContext.Current.RetryInterval.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.WaitOptions">
            <summary>
            Gets the wait options.
            </summary>
        </member>
        <member name="T:Atata.UIComponentDefinitionAttribute">
            <summary>
            Represents the base attribute class for UI component (page object, control) definition.
            </summary>
        </member>
        <member name="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName">
            <summary>
            Gets or sets the name of the component type.
            It is used in report log messages to describe the component type.
            </summary>
        </member>
        <member name="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings">
            <summary>
            Gets or sets the property name endings to ignore/truncate.
            Accepts a string containing a set of values separated by comma, for example <c>"Button,Link"</c>.
            </summary>
        </member>
        <member name="M:Atata.UIComponentDefinitionAttribute.GetIgnoreNameEndingValues">
            <summary>
            Gets the values of property name endings to ignore.
            </summary>
            <returns>An array of name endings to ignore.</returns>
        </member>
        <member name="M:Atata.UIComponentDefinitionAttribute.NormalizeNameIgnoringEnding(System.String)">
            <summary>
            Normalizes the name considering value of <see cref="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>Normalized name.</returns>
        </member>
        <member name="T:Atata.UrlAttribute">
            <summary>
            Specifies the URL to navigate to during initialization of page object.
            Applies to page object types.
            </summary>
        </member>
        <member name="P:Atata.UrlAttribute.Url">
            <summary>
            Gets the URL to navigate to.
            </summary>
        </member>
        <member name="T:Atata.AssociatedControlList`2">
            <summary>
            Represents the list of associated controls of <typeparamref name="TItem"/> type.
            Provides functionality to get associated/dependent <typeparamref name="TItem"/> control to another control.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.AssociatedControlList`2.Item(System.Func{`1,Atata.Control{`1}})">
            <summary>
            Gets the <typeparamref name="TItem"/> control associated with the control specified in <paramref name="controlSelector"/>.
            </summary>
            <param name="controlSelector">The control selector.</param>
            <returns>The <typeparamref name="TItem"/> control associated with the control specified in <paramref name="controlSelector"/>.</returns>
        </member>
        <member name="M:Atata.AssociatedControlList`2.For(System.Func{`1,Atata.Control{`1}})">
            <summary>
            Gets the <typeparamref name="TItem"/> control associated with the control specified in <paramref name="controlSelector"/>.
            </summary>
            <param name="controlSelector">The control selector.</param>
            <returns>The <typeparamref name="TItem"/> control associated with the control specified in <paramref name="controlSelector"/>.</returns>
        </member>
        <member name="M:Atata.AssociatedControlList`2.CreateAssociatedControl(Atata.Control{`1})">
            <summary>
            Creates an instance of <typeparamref name="TItem"/> control that is associated with the <paramref name="control"/> argument.
            </summary>
            <param name="control">The control for which the associated control is to be created.</param>
            <returns>The <typeparamref name="TItem"/> control.</returns>
        </member>
        <member name="T:Atata.Button`1">
            <summary>
            Represents the button control.
            Default search is performed by the content and value (button by content text and input by value attribute).
            Handles any input element with <c>type="button"</c>, <c>type="submit"</c>, <c>type="reset"</c> or <c>button</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Button`2">
            <summary>
            Represents the button control.
            Default search is performed by the content and value (button by content text and input by value attribute).
            Handles any input element with <c>type="button"</c>, <c>type="submit"</c>, <c>type="reset"</c> or <c>button</c> element.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Button`1" />
            <seealso cref="T:Atata.INavigable`2" />
        </member>
        <member name="T:Atata.Clickable`1">
            <summary>
            Represents any HTML element.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Clickable`2">
            <summary>
            Represents any HTML element.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.ClickableDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Clickable`1"/> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Clickable`1" />
        </member>
        <member name="T:Atata.ClickableDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Clickable`2"/> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Clickable`2" />
        </member>
        <member name="T:Atata.LinkDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Link`1"/> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Link`1" />
        </member>
        <member name="T:Atata.LinkDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Link`2"/> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Link`2" />
        </member>
        <member name="T:Atata.ButtonDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Button`1"/> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Button`1" />
        </member>
        <member name="T:Atata.ButtonDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Button`2"/> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the <typeparamref name="TNavigateTo"/> page object.</returns>
            <seealso cref="T:Atata.Button`2" />
        </member>
        <member name="T:Atata.ControlList`2">
            <summary>
            Represents the list of controls of <typeparamref name="TItem"/> type.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.ControlList`2.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Count">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the controls count.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Contents">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the controls contents.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Item(System.Int32)">
            <summary>
            Gets the control at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Atata.ControlList`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the control that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetByXPathCondition(System.String,System.String)">
            <summary>
            Gets the control that matches the specified XPath condition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="xPathCondition">
            The XPath condition.
            For example: <c>"@some-attr='some value'"</c>.</param>
            <returns>The first item that matches the XPath condition.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetCount">
            <summary>
            Gets the controls count.
            </summary>
            <returns>The count of controls.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetContents">
            <summary>
            Gets the controls contents.
            </summary>
            <returns>The contents of controls.</returns>
        </member>
        <member name="M:Atata.ControlList`2.IndexOf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Searches for the item that matches the conditions defined by the specified predicate expression
            and returns the zero-based index of the first occurrence.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The zero-based index of the first occurrence of item, if found; otherwise, <c>–1</c>.</returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectData``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selects the specified data (property) set of each control.
            Data can be a sub-control, an instance of <see cref="T:Atata.DataProvider`2"/>, etc.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="selector">The data selector.</param>
            <returns>An instance of <see cref="T:Atata.DataProvider`2"/>.</returns>
        </member>
        <member name="T:Atata.Control`1">
            <summary>
            Represents the base class for the controls.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Control`1.IsEnabled">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the control is enabled.
            </summary>
        </member>
        <member name="P:Atata.Control`1.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.Control`1.Click">
            <summary>
            Clicks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.ClickAndGo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo"/> type.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="navigateToPageObject">The page object instance to navigate to.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of <typeparamref name="TNavigateTo"/>.</returns>
        </member>
        <member name="M:Atata.Control`1.Hover">
            <summary>
            Hovers the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeHover" /> and <see cref="F:Atata.TriggerEvents.AfterHover" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.Focus">
            <summary>
            Focuses the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeFocus" /> and <see cref="F:Atata.TriggerEvents.AfterFocus" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DoubleClick">
            <summary>
            Double-clicks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DoubleClickAndGo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Double-clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo"/> type.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="navigateToPageObject">The page object instance to navigate to.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of <typeparamref name="TNavigateTo"/>.</returns>
        </member>
        <member name="M:Atata.Control`1.RightClick">
            <summary>
            Right-clicks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DragAndDropTo(System.Func{`0,Atata.Control{`0}})">
            <summary>
            Drags and drops the control to the target control returned by <paramref name="targetSelector"/>.
            By default uses <see cref="T:Atata.DragAndDropUsingActionsAttribute"/>.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="targetSelector">The target control selector.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DragAndDropTo(Atata.Control{`0})">
            <summary>
            Drags and drops the control to the target control.
            By default uses <see cref="T:Atata.DragAndDropUsingActionsAttribute"/>.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="target">The target control.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DragAndDropToOffset(System.Int32,System.Int32)">
            <summary>
            Drags and drops the control to the specified offset.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="offsetX">The horizontal offset to which to move the mouse.</param>
            <param name="offsetY">The vertical offset to which to move the mouse.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.ScrollTo">
            <summary>
            Scrolls to the control.
            By default uses <see cref="T:Atata.ScrollUsingMoveToElementAttribute"/> behavior.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeScroll" /> and <see cref="F:Atata.TriggerEvents.AfterScroll" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.CheckBoxList`2">
            <summary>
            Represents the checkbox list control (a set of <c>&lt;input type="checkbox"&gt;</c>).
            Default search is performed by the name.
            Specific checkbox items can be found by label or value.
            By default items are searched by label using <see cref="T:Atata.FindItemByLabelAttribute"/>.
            Use <see cref="T:Atata.FindItemByValueAttribute"/> to find items by value.
            Currently as a data type supports only enum (with <c>[Flags]</c>) types.
            </summary>
            <typeparam name="T">
            The type of the control's data.
            Supports only enum (with <c>[Flags]</c>) types.
            </typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.CheckBoxList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.CheckBoxList`2"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">generic <typeparamref name="T"/> parameter is not an Enum type.</exception>
        </member>
        <member name="P:Atata.CheckBoxList`2.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.CheckBoxList`2.Check(`0)">
            <summary>
            Checks the checkbox by specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value of the checkbox.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.CheckBoxList`2.Uncheck(`0)">
            <summary>
            Unchecks the checkbox by specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value of the checkbox.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.CheckBox`1">
            <summary>
            Represents the checkbox control (<c>&lt;input type="checkbox"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.CheckBox`1.IsChecked">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2" /> instance of the checked state value.
            </summary>
        </member>
        <member name="P:Atata.CheckBox`1.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.CheckBox`1.Check">
            <summary>
            Checks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.CheckBox`1.Uncheck">
            <summary>
            Unchecks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.Content`2">
            <summary>
            Represents any HTML element containing content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Currency`1">
            <summary>
            Represents any element containing currency content.
            Default search finds the first occurring element.
            The default format is <c>"C2"</c> (e.g. <c>$123.45</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.DateTime`1">
            <summary>
            Represents any element containing date and time content.
            Default search finds the first occurring element.
            The default format is <c>"g"</c> (general date/time pattern (short time), e.g. <c>6/15/2009 1:45 PM</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Date`1">
            <summary>
            Represents any element containing date content.
            Default search finds the first occurring element.
            The default format is <c>"d"</c> (short date pattern, e.g. <c>6/15/2009</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H1`1">
            <summary>
            Represents the <c>&lt;h1&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h1&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H2`1">
            <summary>
            Represents the <c>&lt;h2&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h2&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H3`1">
            <summary>
            Represents the <c>&lt;h3&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h3&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H4`1">
            <summary>
            Represents the <c>&lt;h4&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h4&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H5`1">
            <summary>
            Represents the <c>&lt;h5&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h5&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H6`1">
            <summary>
            Represents the <c>&lt;h6&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h6&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Label`1">
            <summary>
            Represents the label control (<c>&lt;label&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Label`2">
            <summary>
            Represents the label control (<c>&lt;label&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="T">The type of the content.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Number`1">
            <summary>
            Represents any element containing number content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Text`1">
            <summary>
            Represents any element containing text content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Time`1">
            <summary>
            Represents any element containing time content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.DateInput`1">
            <summary>
            Represents the date input control.
            Default search is performed by the label.
            The default format is <c>"d"</c> (short date pattern, e.g. <c>6/15/2009</c>).
            Handles any <c>input</c> element with <c>type="date"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.EditableField`2">
            <summary>
            Represents the base class for editable field controls.
            It can be used for controls like <c>&lt;input&gt;</c>, <c>&lt;select&gt;</c> and other editable controls.
            </summary>
            <typeparam name="T">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.EditableField`2.IsReadOnly">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the control is read-only.
            By default checks <c>readonly</c> attribute of scope element.
            Override <see cref="M:Atata.EditableField`2.GetIsReadOnly"/> method to change the behavior.
            </summary>
        </member>
        <member name="P:Atata.EditableField`2.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.EditableField`2.SetValue(`0)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Atata.EditableField`2.Set(`0)">
            <summary>
            Sets the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom">
            <summary>
            Sets the random value.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute"/>, <see cref="T:Atata.RandomizeNumberSettingsAttribute"/>, <see cref="T:Atata.RandomizeIncludeAttribute"/>, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom(`0@)">
            <summary>
            Sets the random value and records it to <paramref name="value"/> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom(System.Action{`0})">
            <summary>
            Sets the random value and invokes <paramref name="callback"/>.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="callback">The callback to be invoked after the value is set.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.GenerateRandomValue">
            <summary>
            Generates the random value.
            </summary>
            <returns>The generated value.</returns>
        </member>
        <member name="T:Atata.EmailInput`1">
            <summary>
            Represents the email input control (<c>&lt;input type="email"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Field`2">
            <summary>
            Represents the base class for the field controls.
            It can be used for HTML elements containing content (like <c>&lt;h1&gt;</c>, <c>&lt;span&gt;</c>, etc.) representing content as a field value, as well as for <c>&lt;input&gt;</c> and other elements.
            </summary>
            <typeparam name="T">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Field`2.Value">
            <summary>
            Gets the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeGet"/> and <see cref="F:Atata.TriggerEvents.AfterGet"/> triggers.
            </summary>
        </member>
        <member name="P:Atata.Field`2.ValueTermOptions">
            <summary>
            Gets the value term options.
            </summary>
        </member>
        <member name="P:Atata.Field`2.DataProviderName">
            <summary>
            Gets the name of the data provider.
            The default value is <c>"value"</c>.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.Field`2.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Atata.Field`2.Get">
            <summary>
            Gets the value. Also executes <see cref="F:Atata.TriggerEvents.BeforeGet"/> and <see cref="F:Atata.TriggerEvents.AfterGet"/> triggers.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Atata.Field`2.ConvertValueToString(`0)">
            <summary>
            Converts the value to string.
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to string.</returns>
        </member>
        <member name="M:Atata.Field`2.ConvertStringToValue(System.String)">
            <summary>
            Converts the string to value of <typeparamref name="T"/> type.
            </summary>
            <param name="value">The value as string.</param>
            <returns>The value converted to <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Atata.Field`2.InitValueTermOptions(Atata.TermOptions,Atata.UIComponentMetadata)">
            <summary>
            Initializes the value term options (culture, format, etc.).
            </summary>
            <param name="termOptions">The term options.</param>
            <param name="metadata">The component metadata.</param>
        </member>
        <member name="T:Atata.FileInput`1">
            <summary>
            Represents the file input control (<c>&lt;input type="file"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.HiddenInput`1">
            <summary>
            Represents the hidden input control (<c>&lt;input type="hidden"&gt;</c>) with text data.
            Default search finds the first occurring <c>&lt;input type="hidden"&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.HiddenInput`2">
            <summary>
            Represents the hidden input control (<c>&lt;input type="hidden"&gt;</c>).
            Default search finds the first occurring <c>&lt;input type="hidden"&gt;</c> element.
            </summary>
            <typeparam name="T">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Input`2">
            <summary>
            Represents the input control (<c>&lt;input&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="T">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.Input`2.Append(System.String)">
            <summary>
            Appends the specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.Input`2.Clear">
            <summary>
            Clears the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.NumberInput`1">
            <summary>
            Represents the number input control.
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="number"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Option`2">
            <summary>
            Represents the option control (<c>&lt;option&gt;</c>).
            Default search finds the first occurring <c>&lt;option&gt;</c> element.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Option`2.IsSelected">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the component is selected.
            </summary>
        </member>
        <member name="P:Atata.Option`2.SelectOptionBehavior">
            <summary>
            Gets the <see cref="T:Atata.SelectOptionBehaviorAttribute"/> instance.
            By default uses <see cref="T:Atata.SelectByTextAttribute"/>.
            </summary>
        </member>
        <member name="M:Atata.Option`2.Select">
            <summary>
            Selects the option.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.PasswordInput`1">
            <summary>
            Represents the password input control (<c>&lt;input type="password"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.RadioButtonList`2">
            <summary>
            Represents the radio button list control (a set of <c>&lt;input type="radio"&gt;</c>).
            Default search is performed by the name.
            Specific radio button items can be found by label or value.
            By default items are searched by label using <see cref="T:Atata.FindItemByLabelAttribute"/>.
            Use <see cref="T:Atata.FindItemByValueAttribute"/> to find items by value.
            As a data type supports enum, string, numeric and other types.
            </summary>
            <typeparam name="T">
            The type of the control's data.
            Supports enum, string, numeric and other types.
            </typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.RadioButton`1">
            <summary>
            Represents the radio button control (<c>&lt;input type="radio"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.RadioButton`1.IsChecked">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2" /> instance of the checked state value.
            </summary>
        </member>
        <member name="P:Atata.RadioButton`1.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.RadioButton`1.Check">
            <summary>
            Checks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.SearchInput`1">
            <summary>
            Represents the search input control (<c>&lt;input type="search"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Select`1">
            <summary>
            Represents the text select control (<c>&lt;select&gt;</c>).
            Default search is performed by the label.
            Selects an option using text.
            Option selection is configured via <see cref="T:Atata.SelectOptionBehaviorAttribute"/>.
            Possible selection behavior attributes are: <see cref="T:Atata.SelectByTextAttribute"/>, <see cref="T:Atata.SelectByValueAttribute"/>, <see cref="T:Atata.SelectByLabelAttribute"/> and <see cref="T:Atata.SelectByAttribute"/>.
            Default option selection is performed by text using <see cref="T:Atata.SelectByTextAttribute"/>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Select`2">
            <summary>
            Represents the select control (<c>&lt;select&gt;</c>).
            Default search is performed by the label.
            Option selection is configured via <see cref="T:Atata.SelectOptionBehaviorAttribute"/>.
            Possible selection behavior attributes are: <see cref="T:Atata.SelectByTextAttribute"/>, <see cref="T:Atata.SelectByValueAttribute"/>, <see cref="T:Atata.SelectByLabelAttribute"/> and <see cref="T:Atata.SelectByAttribute"/>.
            Default option selection is performed by text using <see cref="T:Atata.SelectByTextAttribute"/>.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Select`2.Options">
            <summary>
            Gets the options' <see cref="T:Atata.ControlList`2"/> instance.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectedOption">
            <summary>
            Gets the selected option.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectedIndex">
            <summary>
            Gets the index of the selected option.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectOptionBehavior">
            <summary>
            Gets the <see cref="T:Atata.SelectOptionBehaviorAttribute"/> instance.
            By default uses <see cref="T:Atata.SelectByTextAttribute"/>.
            </summary>
        </member>
        <member name="T:Atata.TelInput`1">
            <summary>
            Represents the telephone number input control (<c>&lt;input type="tel"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TextArea`1">
            <summary>
            Represents the text area control (<c>&lt;textarea&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.TextArea`1.Append(System.String)">
            <summary>
            Appends the specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.TextArea`1.Clear">
            <summary>
            Clears the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.TextInput`1">
            <summary>
            Represents the text input control (<c>&lt;input type="text"&gt;</c>).
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TimeInput`1">
            <summary>
            Represents the time input control.
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="time"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.UrlInput`1">
            <summary>
            Represents the URL input control (<c>&lt;input type="url"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.FrameSetPage`1">
            <summary>
            Represents the frameset-based HTML page.
            Uses the root <c>&lt;frameset&gt;</c> tag as a scope.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.PageObject`1" />
        </member>
        <member name="T:Atata.Frame`1">
            <summary>
            Represents the frame control (<c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c>).
            Default search finds the first occurring <c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.Frame`1.SwitchTo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object represented by the instance of <typeparamref name="TFramePageObject"/> type.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="framePageObject">The frame page object.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.Frame`1.DoWithin``1(System.Action{``0},System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object, executes action(s) in scope of frame and switches back to the owner page object.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="action">The action to do in scope of frame.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.Frame`2">
            <summary>
            Represents the frame control (<c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c>).
            Default search finds the first occurring <c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c> element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.Frame`2.SwitchTo(`0,System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object represented by the instance of <typeparamref name="TFramePageObject"/> type.
            </summary>
            <param name="framePageObject">The frame page object.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.Frame`2.DoWithin(System.Action{`0},System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object, executes action(s) in scope of frame and switches back to the owner page object.
            </summary>
            <param name="action">The action to do in scope of frame.</param>
            <param name="temporarily">
            If set to <see langword="true"/> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute"/>.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.HierarchicalControl`2">
            <summary>
            Represents the hierarchical control (a control containing structured hierarchy of controls of <typeparamref name="TItem"/> type).
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Children">
            <summary>
            Gets the children <see cref="T:Atata.ControlList`2"/> instance.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Descendants">
            <summary>
            Gets the descendants (all items at any level of hierarchy) <see cref="T:Atata.ControlList`2"/> instance.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Item(System.Int32)">
            <summary>
            Gets the child item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The child item at the specified index.</returns>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the child item that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first child item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="T:Atata.HierarchicalItem`2">
            <summary>
            Represents the hierarchical item control (a control containing structured hierarchy of controls of <typeparamref name="TItem" /> type).
            Can have parent control of <typeparamref name="TItem" /> type.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
        </member>
        <member name="P:Atata.HierarchicalItem`2.Parent">
            <summary>
            Gets the parent control of <typeparamref name="TItem"/> type.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalItem`2.HasParent">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the control has parent.
            </summary>
        </member>
        <member name="T:Atata.HierarchicalListItem`1">
            <summary>
            Represents the hierarchical list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            It is recommended to use with <see cref="T:Atata.HierarchicalUnorderedList`2"/> and <see cref="T:Atata.HierarchicalOrderedList`2"/>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalOrderedList`2" />
            <seealso cref="T:Atata.HierarchicalUnorderedList`2" />
        </member>
        <member name="T:Atata.HierarchicalListItem`2">
            <summary>
            Represents the hierarchical list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            It is recommended to use with <see cref="T:Atata.HierarchicalUnorderedList`2"/> and <see cref="T:Atata.HierarchicalOrderedList`2"/>.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalOrderedList`2" />
            <seealso cref="T:Atata.HierarchicalUnorderedList`2" />
        </member>
        <member name="T:Atata.HierarchicalOrderedList`2">
            <summary>
            Represents the hierarchical ordered list control (<c>&lt;ol&gt;</c>).
            Default search finds the first occurring <c>&lt;ol&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
            <seealso cref="T:Atata.HierarchicalListItem`2" />
        </member>
        <member name="T:Atata.HierarchicalUnorderedList`2">
            <summary>
            Represents the hierarchical unordered list control (<c>&lt;ul&gt;</c>).
            Default search finds the first occurring <c>&lt;ul&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
            <seealso cref="T:Atata.HierarchicalListItem`2" />
        </member>
        <member name="T:Atata.Image`1">
            <summary>
            Represents the image control (<c>&lt;img&gt;</c>).
            Default search finds the first occurring <c>&lt;img&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Image`1.Source">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the <c>src</c> attribute.
            </summary>
        </member>
        <member name="P:Atata.Image`1.IsLoaded">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the image file is loaded.
            </summary>
        </member>
        <member name="T:Atata.ItemsControl`2">
            <summary>
            Represents the items control (a control containing a set of any control of <typeparamref name="TItem"/> type).
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.ItemsControl`2.Items">
            <summary>
            Gets the items' <see cref="T:Atata.ControlList`2"/> instance.
            </summary>
        </member>
        <member name="P:Atata.ItemsControl`2.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The child item at the specified index.</returns>
        </member>
        <member name="P:Atata.ItemsControl`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the item that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first child item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="T:Atata.IUIComponent`1">
            <summary>
            Represents an interface for UI component.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.IUIComponent`1.Owner">
            <summary>
            Gets the owner page object.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.IsVisible">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the control is visible.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Content">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the text content.
            Gets content using <see cref="T:Atata.ContentSourceAttribute"/> or, by default, uses <see cref="P:OpenQA.Selenium.IWebElement.Text"/> property of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ScopeSource">
            <summary>
            Gets the source of the scope.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Scope">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement"/> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ScopeLocator">
            <summary>
            Gets the scope locator.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentName">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentTypeName">
            <summary>
            Gets the name of the component type.
            Returns the value of <see cref="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName"/> property for control from <see cref="T:Atata.ControlDefinitionAttribute"/>
            and for page object from <see cref="T:Atata.PageObjectDefinitionAttribute"/>.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentFullName">
            <summary>
            Gets the full name of the component including parent component full name, own component name and own component type name.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentLocation">
            <summary>
            Gets the <see cref="T:Atata.UIComponentLocationProvider`1"/> instance that provides an access to the scope element's location (X and Y).
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentSize">
            <summary>
            Gets the <see cref="T:Atata.UIComponentSizeProvider`1"/> instance that provides an access to the scope element's size (Width and Height).
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Attributes">
            <summary>
            Gets the <see cref="T:Atata.UIComponentAttributeProvider`1"/> instance that provides an access to the scope element's attributes.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Css">
            <summary>
            Gets the <see cref="T:Atata.UIComponentCssProvider`1"/> instance that provides an access to the scope element's CSS properties.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Controls">
            <summary>
            Gets the list of child controls.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Metadata">
            <summary>
            Gets the metadata of the component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Triggers">
            <summary>
            Gets the set of triggers.
            Provides the functionality to get/add/remove triggers dynamically.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Should">
            <summary>
            Gets the verification provider that provides a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.IUIComponent`1.GetScope(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement"/> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> instance of the scope.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Wait(Atata.Until,Atata.WaitOptions)">
            <summary>
            Waits until the specified component condition is met.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="options">The options.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Exists(Atata.SearchOptions)">
            <summary>
            Determines whether the component exists.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true"/> if the component exists; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">The <paramref name="options"/> has <see cref="P:Atata.SearchOptions.IsSafely"/> property equal to <see langword="false"/> value and the component doesn't exist.</exception>
        </member>
        <member name="M:Atata.IUIComponent`1.Missing(Atata.SearchOptions)">
            <summary>
            Determines whether the component is missing.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true"/> if the component is missing; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:Atata.NotMissingElementException">The <paramref name="options"/> has <see cref="P:Atata.SearchOptions.IsSafely"/> property equal to <see langword="false"/> value and the component exists.</exception>
        </member>
        <member name="M:Atata.IUIComponent`1.GetOrCreateDataProvider``1(System.String,System.Func{``0})">
            <summary>
            Gets the data provider by name or creates and stores a new instance with the specified <paramref name="providerName"/> and using <paramref name="valueGetFunction"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">Name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.DataProvider`2"/> type or already stored one.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.GetAncestor``1">
            <summary>
            Gets the ancestor component of specified type.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.GetAncestorOrSelf``1">
            <summary>
            Gets the ancestor component of specified type or self.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:Atata.LabelList`1">
            <summary>
            Represents the list of <see cref="T:Atata.Label`1"/> controls.
            Gives opportunity to get a <see cref="T:Atata.Label`1"/> for particular control using its element <c>id</c> attribute that equals the <c>for</c> attribute of <c>&lt;label&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Label`1"/>
        </member>
        <member name="M:Atata.LabelList`1.CreateAssociatedControl(Atata.Control{`0})">
            <summary>
            Creates an instance of <see cref="T:Atata.Label`1"/> control that is associated with the <paramref name="control" /> by <c>for</c>/<c>id</c> attributes.
            </summary>
            <param name="control">The control for which the <see cref="T:Atata.Label`1"/> control is to be created.</param>
            <returns>The <see cref="T:Atata.Label`1"/> control.</returns>
        </member>
        <member name="T:Atata.Link`1">
            <summary>
            Represents the link control (<c>&lt;a&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Link`2">
            <summary>
            Represents the link control (<c>&lt;a&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Link`1" />
        </member>
        <member name="T:Atata.ListItem`1">
            <summary>
            Represents the list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.OrderedList`2" />
            <seealso cref="T:Atata.UnorderedList`2" />
        </member>
        <member name="T:Atata.OrderedList`2">
            <summary>
            Represents the ordered list control (<c>&lt;ol&gt;</c>).
            Default search finds the first occurring <c>&lt;ol&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.ListItem`1" />
        </member>
        <member name="T:Atata.OrdinaryPage">
            <summary>
            Represents the ordinary page.
            </summary>
        </member>
        <member name="T:Atata.PageObject`1">
            <summary>
            Represents the base class for the page objects.
            Also executes <see cref="F:Atata.TriggerEvents.Init"/> and <see cref="F:Atata.TriggerEvents.DeInit"/> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.PageObject`1.NavigateOnInit">
            <summary>
            Gets a value indicating whether the navigation should be performed upon initialization.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.IsTemporarilyNavigated">
            <summary>
            Gets a value indicating whether this instance is temporarily navigated using <see cref="T:Atata.GoTemporarilyAttribute"/> or other approach.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PreviousPageObject">
            <summary>
            Gets the previous page object.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.Report">
            <summary>
            Gets the instance that provides reporting functionality.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageTitle">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the title of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageUrl">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the URL of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.ActiveControl">
            <summary>
            Gets the active control.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.CreateScopeBy">
            <summary>
            Creates the <see cref="T:OpenQA.Selenium.By"/> instance for Scope search.
            </summary>
            <returns>The <see cref="T:OpenQA.Selenium.By"/> instance.</returns>
        </member>
        <member name="M:Atata.PageObject`1.OnInit">
            <summary>
            Called upon initialization.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.OnInitCompleted">
            <summary>
            Called when initialization is completed.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.SwitchTo(System.String)">
            <summary>
            Switches to the browser window using the window name.
            </summary>
            <param name="windowName">Name of the window.</param>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame``1(OpenQA.Selenium.By,``0,System.Boolean)">
            <summary>
            Switches to frame page object using <see cref="T:OpenQA.Selenium.By"/> instance that represents the selector for <c>&lt;iframe&gt;</c> tag element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="frameBy">The frame <see cref="T:OpenQA.Selenium.By"/> instance.</param>
            <param name="framePageObject">
            The frame page object.
            If equals <see langword="null"/>, creates an instance of <typeparamref name="TFramePageObject"/> using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame``1(OpenQA.Selenium.IWebElement,``0,System.Boolean)">
            <summary>
            Switches to frame page object using <see cref="T:OpenQA.Selenium.IWebElement"/> instance that represents <c>&lt;iframe&gt;</c> tag element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="frameElement">The frame element.</param>
            <param name="framePageObject">
            The frame page object.
            If equals <see langword="null"/>, creates an instance of <typeparamref name="TFramePageObject"/> using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToRoot``1(``0)">
            <summary>
            Switches to the root page using WebDriver's <c>SwitchTo().DefaultContent()</c> method.
            </summary>
            <typeparam name="TPageObject">The type of the root page object.</typeparam>
            <param name="rootPageObject">
            The root page object.
            If equals <see langword="null"/>, creates an instance of <typeparamref name="TPageObject"/> using the default constructor.</param>
            <returns>The instance of the root page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.RefreshPage">
            <summary>
            Refreshes the current page.
            </summary>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.RefreshPageUntil(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Refreshes the current page until the condition specified by <paramref name="predicateExpression"/> argument is met.
            </summary>
            <param name="predicateExpression">The predicate expression to test the page.</param>
            <param name="timeout">The timeout in seconds.</param>
            <param name="retryInterval">The retry interval in seconds.</param>
            <returns>The instance of this page object.</returns>
            <example>
            <code>
            PageObject.RefreshPageUntil(x => x.SomeControl.IsVisible, timeout: 60, retryInterval: 5);
            </code>
            </example>
        </member>
        <member name="M:Atata.PageObject`1.GoBack``1(``0)">
            <summary>
            Navigates back to the previous page.
            </summary>
            <typeparam name="TOther">The type of the page object that represents the previous page.</typeparam>
            <param name="previousPageObject">
            The instance of the previous page object.
            If equals <see langword="null"/>, creates an instance of <typeparamref name="TOther"/> using the default constructor.</param>
            <returns>The instance of the previous page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.GoForward``1(``0)">
            <summary>
            Navigates forward to the next page.
            </summary>
            <typeparam name="TOther">The type of the page object that represents the next page.</typeparam>
            <param name="nextPageObject">
            The instance of the next page object.
            If equals <see langword="null"/>, creates an instance of <typeparamref name="TOther"/> using the default constructor.</param>
            <returns>The instance of the next page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.CloseWindow">
            <summary>
            Closes the current window.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.Do``1(System.Func{`0,``0},System.Action{``0})">
            <summary>
            Executes the action passing specified owner's component.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="componentSelector">The component selector.</param>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do``2(System.Func{`0,``0},System.Func{``0,``1})">
            <summary>
            Executes the navigation action passing specified owner's component.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="componentSelector">The component selector.</param>
            <param name="navigationAction">The navigation action.</param>
            <returns>The instance of the page object to navigate to.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do(System.Action{`0})">
            <summary>
            Executes the action passing current page object.
            </summary>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do``1(System.Func{`0,``0})">
            <summary>
            Executes the navigation action passing current page object.
            </summary>
            <typeparam name="TNavigateTo">The type of the navigate to.</typeparam>
            <param name="navigationAction">The navigation action.</param>
            <returns>The instance of the page object to navigate to.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do(System.Action)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Press(System.String)">
            <summary>
            Presses the specified keystrokes.
            </summary>
            <param name="keys">The keystrokes to send to the browser.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.PerformActions(System.Func{OpenQA.Selenium.Interactions.Actions,OpenQA.Selenium.Interactions.Actions})">
            <summary>
            Performs the specified set of actions.
            </summary>
            <param name="actionsBuilder">The actions builder.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Wait(System.TimeSpan)">
            <summary>
            Waits the specified time.
            </summary>
            <param name="time">The time to wait.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Wait(System.Double)">
            <summary>
            Waits the specified time in seconds.
            </summary>
            <param name="seconds">The time to wait in seconds.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="T:Atata.Page`1">
            <summary>
            Represents the whole HTML page and is the main base class to inherit for the pages.
            Uses the <c>&lt;body&gt;</c> tag as a scope.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.PageObject`1" />
        </member>
        <member name="T:Atata.PopupWindow`1">
            <summary>
            Represents the base class for the popup window page objects.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.PopupWindow`1.WindowTitleValues">
            <summary>
            Gets or sets the window title values.
            </summary>
        </member>
        <member name="P:Atata.PopupWindow`1.WindowTitleMatch">
            <summary>
            Gets or sets the match that should be used for the window search by the title.
            The default value is <see cref="F:Atata.TermMatch.Equals"/>.
            </summary>
        </member>
        <member name="P:Atata.PopupWindow`1.CanFindByWindowTitle">
            <summary>
            Gets a value indicating whether window can be found by window title.
            </summary>
        </member>
        <member name="T:Atata.TableHeader`1">
            <summary>
            Represents the table header cell control (&lt;th&gt;).
            Default search finds the first occurring &lt;th&gt; element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TableRow`1">
            <summary>
            Represents the table row component (&lt;tr&gt;).
            Default search finds the first occurring &lt;tr&gt; element.
            By default every its control of type (or inherited from) <see cref="T:Atata.Content`2" /> is searched by the column header.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`1">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`2">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="TRow">The type of the table row control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`3">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="THeader">The type of the table header control.</typeparam>
            <typeparam name="TRow">The type of the table row control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Table`3.Rows">
            <summary>
            Gets the rows list.
            </summary>
        </member>
        <member name="P:Atata.Table`3.Headers">
            <summary>
            Gets the headers list.
            </summary>
        </member>
        <member name="T:Atata.UIComponent">
            <summary>
            Represents the base class for UI components.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Owner">
            <summary>
            Gets the owner component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ScopeSource">
            <summary>
            Gets the source of the scope.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentName">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentTypeName">
            <summary>
            Gets the name of the component type.
            Returns the value of <see cref="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName"/> property for control from <see cref="T:Atata.ControlDefinitionAttribute"/>
            and for page object from <see cref="T:Atata.PageObjectDefinitionAttribute"/>.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentFullName">
            <summary>
            Gets the full name of the component including parent component full name, own component name and own component type name.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Metadata">
            <summary>
            Gets the metadata of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Scope">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement"/> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
        </member>
        <member name="M:Atata.UIComponent.GetScope(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement"/> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement"/> instance of the scope.</returns>
        </member>
        <member name="M:Atata.UIComponent.BuildComponentFullName">
            <summary>
            Builds the full name of the component including parent component full name, own component name and own component type name.
            </summary>
            <returns>The full name of the component.</returns>
        </member>
        <member name="M:Atata.UIComponent.Exists(Atata.SearchOptions)">
            <summary>
            Determines whether the component exists.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true"/> if the component exists; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">The <paramref name="options"/> has <see cref="P:Atata.SearchOptions.IsSafely"/> property equal to <see langword="false"/> value and the component doesn't exist.</exception>
        </member>
        <member name="M:Atata.UIComponent.Missing(Atata.SearchOptions)">
            <summary>
            Determines whether the component is missing.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null"/>, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true"/> if the component is missing; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:Atata.NotMissingElementException">The <paramref name="options"/> has <see cref="P:Atata.SearchOptions.IsSafely"/> property equal to <see langword="false"/> value and the component exists.</exception>
        </member>
        <member name="M:Atata.UIComponent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance including <see cref="P:Atata.UIComponent.ComponentFullName"/> and <see cref="P:Atata.UIComponent.Scope"/> element details.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Atata.UIComponent.CleanUp">
            <summary>
            Cleans up the current instance.
            </summary>
        </member>
        <member name="T:Atata.UIComponentAttributeProvider`1">
            <summary>
            Allows to access the component scope element's attribute values.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentAttributeProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value of the specified control's scope element attribute.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The <see cref="T:Atata.DataProvider`2"/> instance for the attribute's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.Get``1(System.String)">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value of the specified control's scope element attribute.
            </summary>
            <typeparam name="TValue">The type of the attribute value.</typeparam>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The <see cref="T:Atata.DataProvider`2"/> instance for the attribute's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.GetValue(System.String)">
            <summary>
            Gets the value of the specified control's scope element attribute.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attribute's current value.
            Returns <see langword="null"/> if the value is not set.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.GetValue``1(System.String)">
            <summary>
            Gets the value of the specified control's scope element attribute.
            </summary>
            <typeparam name="TValue">The type of the attribute value.</typeparam>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attribute's current value.
            Returns <see langword="null"/> if the value is not set.</returns>
        </member>
        <member name="T:Atata.UIComponentCssProvider`1">
            <summary>
            Allows to access the component scope element's CSS property values.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentCssProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value of the specified control's scope element CSS property.
            </summary>
            <param name="propertyName">The name of the CSS property.</param>
            <returns>The <see cref="T:Atata.DataProvider`2"/> instance for the CSS property's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentCssProvider`1.GetValue(System.String)">
            <summary>
            Gets the value of the specified control's scope element CSS property.
            </summary>
            <param name="propertyName">The name of the CSS property.</param>
            <returns>The CSS property's current value.</returns>
        </member>
        <member name="T:Atata.UIComponentLocationProvider`1">
            <summary>
            Allows to access the component scope element's location (X and Y).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.UIComponentSizeProvider`1">
            <summary>
            Allows to access the component scope element's size (width and height).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.UIComponent`1">
            <summary>
            Represents the base class for UI components.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponent`1.Owner">
            <summary>
            Gets the owner page object.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.IsPresent">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the component is present considering the <see cref="T:Atata.Visibility"/> of component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.IsVisible">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the value indicating whether the component is visible.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Content">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the text content.
            Gets a content using <see cref="T:Atata.ContentGetBehaviorAttribute"/> associated with the component, which by default is <see cref="P:Atata.UIComponent`1.ContentSourceAttribute"/> with <see cref="F:Atata.ContentSource.Text"/> argument.
            Meaning that be default it returns <see cref="P:OpenQA.Selenium.IWebElement.Text"/> property value of component scope's <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Should">
            <summary>
            Gets the verification provider that provides a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ComponentLocation">
            <summary>
            Gets the <see cref="T:Atata.UIComponentLocationProvider`1"/> instance that provides an access to the scope element's location (X and Y).
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ComponentSize">
            <summary>
            Gets the <see cref="T:Atata.UIComponentSizeProvider`1"/> instance that provides an access to the scope element's size (Width and Height).
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Attributes">
            <summary>
            Gets the <see cref="T:Atata.UIComponentAttributeProvider`1"/> instance that provides an access to the scope element's attributes.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Css">
            <summary>
            Gets the <see cref="T:Atata.UIComponentCssProvider`1"/> instance that provides an access to the scope element's CSS properties.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Controls">
            <summary>
            Gets the list of child controls.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Triggers">
            <summary>
            Gets the set of triggers.
            Provides the functionality to get/add/remove triggers dynamically.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ContentSourceAttribute">
            <summary>
            Gets an instance of <see cref="P:Atata.UIComponent`1.ContentSourceAttribute"/> or <see langword="null"/> if not found.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ContentGetBehavior">
            <summary>
            Gets an instance of <see cref="T:Atata.ContentGetBehaviorAttribute"/> associated with the component.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.Wait(Atata.Until,Atata.WaitOptions)">
            <summary>
            Waits until the specified component condition is met.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="options">The options.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetContent(Atata.ContentSource)">
            <summary>
            Gets the <see cref="T:Atata.DataProvider`2"/> instance for the text content using <paramref name="source"/> argument.
            </summary>
            <param name="source">The source of the content.</param>
            <returns>The <see cref="T:Atata.DataProvider`2"/> instance for the text content.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetOrCreateDataProvider``1(System.String,System.Func{``0})">
            <summary>
            Gets the data provider by name or creates and stores a new instance with the specified <paramref name="providerName"/> and using <paramref name="valueGetFunction"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">Name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.DataProvider`2"/> type or already stored one.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.CreateDataProvider``1(System.String,System.Func{``0})">
            <summary>
            Creates and stores a new instance with the specified <paramref name="providerName"/> and using <paramref name="valueGetFunction"/>.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">Name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.DataProvider`2"/> type.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.ExecuteTriggers(Atata.TriggerEvents)">
            <summary>
            Executes the triggers.
            </summary>
            <param name="on">The event to trigger.</param>
        </member>
        <member name="M:Atata.UIComponent`1.GetAncestor``1">
            <summary>
            Gets the ancestor component of specified type.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetAncestorOrSelf``1">
            <summary>
            Gets the ancestor component of specified type or self.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.CleanUp">
            <summary>
            Cleans up the current instance.
            </summary>
        </member>
        <member name="T:Atata.UnorderedList`2">
            <summary>
            Represents the unordered list control (<c>&lt;ul&gt;</c>).
            Default search finds the first occurring <c>&lt;ul&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.ListItem`1" />
        </member>
        <member name="T:Atata.ContentExtractor">
            <summary>
            Provides the functionality to get the content of the component.
            </summary>
        </member>
        <member name="M:Atata.ContentExtractor.Get``1(Atata.IUIComponent{``0},Atata.ContentSource)">
            <summary>
            Gets the content of the component using <see cref="T:Atata.ContentSource"/> value.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The component.</param>
            <param name="contentSource">The content source.</param>
            <returns>The content.</returns>
        </member>
        <member name="T:Atata.ContentSource">
            <summary>
            Specifies the content source of a component.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.Text">
            <summary>
            Uses <see cref="P:OpenQA.Selenium.IWebElement.Text"/> property of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.TextContent">
            <summary>
            Uses <c>textContent</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.InnerHtml">
            <summary>
            Uses <c>innerHTML</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.Value">
            <summary>
            Uses <c>value</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodes">
            <summary>
            Uses the concatenation of child nested text values.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element, filters only <c>Node.TEXT_NODE</c> and concatenates the <c>textContent</c> values of these nodes.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodesTrimmed">
            <summary>
            Uses the concatenation of child nested text values trimming each text.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element, filters only <c>Node.TEXT_NODE</c>, gets <c>textContent</c> of each node, trims each value and concatenates them.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodesTrimmedAndSpaceJoined">
            <summary>
            Uses the concatenation of child nested text values trimming each text part and joining with <c>" "</c> separator.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element, filters only <c>Node.TEXT_NODE</c>, gets <c>textContent</c> of each node, trims each value and concatenates them delimiting with <c>" "</c> character.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.FirstChildTextNode">
            <summary>
            Uses the first child nested text value.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element, finds the first <c>Node.TEXT_NODE</c> and returns the <c>textContent</c> value of this node.
            Returns an empty string if there are no text nodes.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.LastChildTextNode">
            <summary>
            Uses the last child nested text value.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement"/> element, finds the last <c>Node.TEXT_NODE</c> and returns the <c>textContent</c> value of this node.
            Returns an empty string if there are no text nodes.
            </summary>
        </member>
        <member name="T:Atata.AtataBuildingContext">
            <summary>
            Represents the building context for <see cref="T:Atata.AtataContext"/> creation.
            It is used by <see cref="T:Atata.AtataContextBuilder"/>.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DriverFactories">
            <summary>
            Gets the driver factories.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.LogConsumers">
            <summary>
            Gets the log consumers.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ScreenshotConsumers">
            <summary>
            Gets the screenshot consumers.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DriverFactoryToUse">
            <summary>
            Gets the driver factory to use.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.TestNameFactory">
            <summary>
            Gets or sets the factory method of the test name.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.OnBuildingActions">
            <summary>
            Gets the actions to perform during <see cref="T:Atata.AtataContext"/> building.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.OnBuiltActions">
            <summary>
            Gets the actions to perform after <see cref="T:Atata.AtataContext"/> building.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.OnDriverCreatedActions">
            <summary>
            Gets the actions to perform after the driver is created.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.CleanUpActions">
            <summary>
            Gets the actions to perform during <see cref="T:Atata.AtataContext"/> cleanup.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.RetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.RetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseRetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseRetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ElementFindTimeout">
            <summary>
            Gets the element find timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to <c>5</c> seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ElementFindRetryInterval">
            <summary>
            Gets the element find retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.WaitingTimeout">
            <summary>
            Gets the waiting timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to 5 seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.WaitingRetryInterval">
            <summary>
            Gets the waiting retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.VerificationTimeout">
            <summary>
            Gets the verification timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to <c>5</c> seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.VerificationRetryInterval">
            <summary>
            Gets the verification retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssertionExceptionType">
            <summary>
            Gets or sets the type of the assertion exception.
            The default value is <c>typeof(Atata.AssertionException)</c>.
            </summary>
        </member>
        <member name="M:Atata.AtataBuildingContext.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>The copied <see cref="T:Atata.AtataBuildingContext"/> instance.</returns>
        </member>
        <member name="T:Atata.AtataContext">
            <summary>
            Represents the Atata context, the entry point for the test set-up.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Current">
            <summary>
            Gets or sets the current context.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.IsThreadStatic">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Atata.AtataContext.Current"/> property use thread-static approach (value unique for each thread).
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.GlobalConfiguration">
            <summary>
            Gets the global configuration.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BuildStart">
            <summary>
            Gets the build start date and time.
            Contains the same value for all the tests being executed within one build.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.DriverAlias">
            <summary>
            Gets the driver alias.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Log">
            <summary>
            Gets the instance of the log manager.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestName">
            <summary>
            Gets the name of the test.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestNameSanitized">
            <summary>
            Gets the name of the test sanitized for file path/name.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestStart">
            <summary>
            Gets the test start date and time.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.RetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.RetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseRetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseRetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ElementFindTimeout">
            <summary>
            Gets the element find timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ElementFindRetryInterval">
            <summary>
            Gets the element find retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.WaitingTimeout">
            <summary>
            Gets the waiting timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.WaitingRetryInterval">
            <summary>
            Gets the waiting retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.VerificationTimeout">
            <summary>
            Gets the verification timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.VerificationRetryInterval">
            <summary>
            Gets the verification retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Culture">
            <summary>
            Gets the culture.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            The default value is <c>typeof(Atata.AssertionException)</c>.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.CleanUpActions">
            <summary>
            Gets the list of actions to perform during <see cref="T:Atata.AtataContext"/> cleanup.
            </summary>
        </member>
        <member name="M:Atata.AtataContext.Configure">
            <summary>
            Creates <see cref="T:Atata.AtataContextBuilder"/> instance for <see cref="T:Atata.AtataContext"/> configuration.
            Sets the value to <see cref="P:Atata.AtataContextBuilder.BuildingContext"/> copied from <see cref="P:Atata.AtataContext.GlobalConfiguration"/>.
            </summary>
            <returns>The created <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContext.CleanUp(System.Boolean)">
            <summary>
            Cleans up the test context.
            </summary>
            <param name="quitDriver">if set to <see langword="true"/> quits WebDriver.</param>
        </member>
        <member name="M:Atata.AtataContext.RestartDriver">
            <summary>
            Restarts the driver.
            </summary>
        </member>
        <member name="M:Atata.AtataContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Atata.AtataContextBuilder">
            <summary>
            Represents the builder of <see cref="T:Atata.AtataContext"/>.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.BuildingContext">
            <summary>
            Gets the building context.
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver``1(``0)">
            <summary>
            Use the driver factory.
            </summary>
            <typeparam name="TDriverFactory">The type of the driver factory.</typeparam>
            <param name="driverFactory">The driver factory.</param>
            <returns>The <typeparamref name="TDriverFactory"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(System.String)">
            <summary>
            Sets the alias of the driver to use.
            </summary>
            <param name="alias">The alias of the driver.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Use specified driver instance.
            </summary>
            <param name="driver">The driver to use.</param>
            <returns>The <see cref="T:Atata.CustomDriverAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(System.Func{OpenQA.Selenium.Remote.RemoteWebDriver})">
            <summary>
            Use custom driver factory method.
            </summary>
            <param name="driverFactory">The driver factory method.</param>
            <returns>The <see cref="T:Atata.CustomDriverAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseChrome">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Chrome.ChromeDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.ChromeAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseFirefox">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Firefox.FirefoxDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.FirefoxAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseInternetExplorer">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.IE.InternetExplorerDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.InternetExplorerAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseEdge">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Edge.EdgeDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.EdgeAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseOpera">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Opera.OperaDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.OperaAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseSafari">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Safari.SafariDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.SafariAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseRemoteDriver">
            <summary>
            Use the <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/>.
            </summary>
            <returns>The <see cref="T:Atata.RemoteDriverAtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddLogConsumer``1(``0)">
            <summary>
            Adds the log consumer.
            </summary>
            <typeparam name="TLogConsumer">The type of the log consumer.</typeparam>
            <param name="consumer">The log consumer.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddLogConsumer(System.String)">
            <summary>
            Adds the log consumer.
            </summary>
            <param name="typeNameOrAlias">The type name or alias of the log consumer.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddTraceLogging">
            <summary>
            Adds the <see cref="T:Atata.TraceLogConsumer"/> instance that uses <see cref="T:System.Diagnostics.Trace"/> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddDebugLogging">
            <summary>
            Adds the <see cref="T:Atata.DebugLogConsumer"/> instance that uses <see cref="T:System.Diagnostics.Debug"/> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddConsoleLogging">
            <summary>
            Adds the <see cref="T:Atata.ConsoleLogConsumer"/> instance that uses <see cref="T:System.Console"/> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddNUnitTestContextLogging">
            <summary>
            Adds the <see cref="T:Atata.NUnitTestContextLogConsumer"/> instance that uses <c>NUnit.Framework.TestContext</c> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddNLogLogging(System.String)">
            <summary>
            Adds the <see cref="T:Atata.NLogConsumer"/> instance that uses <c>NLog.Logger</c> class for logging.
            </summary>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddScreenshotConsumer``1(``0)">
            <summary>
            Adds the screenshot consumer.
            </summary>
            <typeparam name="TScreenshotConsumer">The type of the screenshot consumer.</typeparam>
            <param name="consumer">The screenshot consumer.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddScreenshotConsumer(System.String)">
            <summary>
            Adds the screenshot consumer.
            </summary>
            <param name="typeNameOrAlias">The type name or alias of the log consumer.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddScreenshotFileSaving">
            <summary>
            Adds the <see cref="T:Atata.FileScreenshotConsumer"/> instance for the screenshot saving to file.
            By default uses <c>"Logs\{build-start}\{test-name-sanitized}"</c> as folder path format,
            <c>"{screenshot-number:D2} - {screenshot-pageobjectfullname}{screenshot-title: - *}"</c> as file name format
            and <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png"/> as image format.
            Example of screenshot file path using default settings: <c>"Logs\2018-03-03 14_34_04\SampleTest\01 - Home page - Screenshot title.png"</c>.
            Available path variables: <c>{build-start}</c>, <c>{test-name}</c>, <c>{test-name-sanitized}</c>, <c>{test-start}</c>, <c>{driver-alias}</c>, <c>{screenshot-number}</c>, <c>{screenshot-title}</c>, <c>{screenshot-pageobjectname}</c>, <c>{screenshot-pageobjecttypename}</c>, <c>{screenshot-pageobjectfullname}</c>.
            Path variables support the formatting.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestName(System.Func{System.String})">
            <summary>
            Sets the factory method of the test name.
            </summary>
            <param name="testNameFactory">The factory method of the test name.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestName(System.String)">
            <summary>
            Sets the name of the test.
            </summary>
            <param name="testName">The name of the test.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseUrl(System.String)">
            <summary>
            Sets the base URL.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseRetryTimeout(System.TimeSpan)">
            <summary>
            Sets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseRetryInterval(System.TimeSpan)">
            <summary>
            Sets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseRetryTimeout(System.TimeSpan)">
            <summary>
            Sets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseRetryInterval(System.TimeSpan)">
            <summary>
            Sets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseElementFindTimeout(System.TimeSpan)">
            <summary>
            Sets the element find timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseElementFindRetryInterval(System.TimeSpan)">
            <summary>
            Sets the element find retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseWaitingTimeout(System.TimeSpan)">
            <summary>
            Sets the waiting timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseWaitingRetryInterval(System.TimeSpan)">
            <summary>
            Sets the waiting retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseVerificationTimeout(System.TimeSpan)">
            <summary>
            Sets the verification timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout"/>, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseVerificationRetryInterval(System.TimeSpan)">
            <summary>
            Sets the verification retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval"/>, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the culture.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseCulture(System.String)">
            <summary>
            Sets the culture by the name.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="cultureName">The name of the culture.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssertionExceptionType(System.Type)">
            <summary>
            Sets the type of the assertion exception.
            The default value is <c>typeof(Atata.AssertionException)</c>.
            </summary>
            <param name="exceptionType">The type of the exception.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssertionExceptionType``1">
            <summary>
            Sets the type of the assertion exception.
            The default value is <c>typeof(Atata.AssertionException)</c>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnBuilding(System.Action)">
            <summary>
            Adds the action to perform during <see cref="T:Atata.AtataContext"/> building.
            It will be executed at the beginning of the build after the log is set up.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnBuilt(System.Action)">
            <summary>
            Adds the action to perform after <see cref="T:Atata.AtataContext"/> building.
            It will be executed at the end of the build after the driver is created.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnDriverCreated(System.Action{OpenQA.Selenium.Remote.RemoteWebDriver})">
            <summary>
            Adds the action to perform after the driver is created.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnDriverCreated(System.Action)">
            <summary>
            Adds the action to perform after the driver is created.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnCleanUp(System.Action)">
            <summary>
            Adds the action to perform during <see cref="T:Atata.AtataContext"/> cleanup.
            </summary>
            <param name="action">The action.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitTestName">
            <summary>
            Defines that the name of the test should be taken from the NUnit test.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.LogNUnitError">
            <summary>
            Defines that an error occurred during the NUnit test execution should be added to the log during the cleanup.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.TakeScreenshotOnNUnitError(System.String)">
            <summary>
            Defines that an error occurred during the NUnit test execution should be captured by a screenshot during the cleanup.
            </summary>
            <param name="title">The screenshot title.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.Clear">
            <summary>
            Clears the <see cref="P:Atata.AtataContextBuilder.BuildingContext"/>.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder"/> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.Build">
            <summary>
            Builds the <see cref="T:Atata.AtataContext" /> instance and sets it to <see cref="P:Atata.AtataContext.Current" /> property.
            </summary>
            <returns>The created <see cref="T:Atata.AtataContext"/> instance.</returns>
        </member>
        <member name="P:Atata.AtataContextBuilder`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilder`1.WithProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the context.
            </summary>
            <param name="propertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ChromeAtataContextBuilder.WithArguments(System.String[])">
            <summary>
            Adds arguments to be appended to the Chrome.exe command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="P:Atata.DriverAtataContextBuilder`1.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`1.CreateDriver">
            <summary>
            Creates the driver instance.
            </summary>
            <returns>The created <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`1.WithAlias(System.String)">
            <summary>
            Specifies the driver alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.CreateDriver(`1,`2,System.TimeSpan)">
            <summary>
            Creates the driver instance.
            </summary>
            <param name="service">The driver service.</param>
            <param name="options">The driver options.</param>
            <param name="commandTimeout">The command timeout.</param>
            <returns>The driver instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(`2)">
            <summary>
            Specifies the driver options.
            </summary>
            <param name="options">The driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Func{`2})">
            <summary>
            Specifies the driver options factory method.
            </summary>
            <param name="optionsFactory">The factory method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Action{`2})">
            <summary>
            Specifies the driver options initialization method.
            </summary>
            <param name="optionsInitializer">The initialization method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the driver options.
            </summary>
            <param name="optionsPropertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithCapability(System.String,System.Object)">
            <summary>
            Adds additional capability to the driver options.
            </summary>
            <param name="capabilityName">The name of the capability to add.</param>
            <param name="capabilityValue">The value of the capability to add</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Func{`1})">
            <summary>
            Specifies the driver service factory method.
            </summary>
            <param name="serviceFactory">The factory method of the driver service.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Action{`1})">
            <summary>
            Specifies the driver service initialization method.
            </summary>
            <param name="serviceInitializer">The initialization method of the driver service.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the driver service.
            </summary>
            <param name="servicePropertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverPath(System.String)">
            <summary>
            Specifies the directory containing the driver executable file.
            </summary>
            <param name="driverPath">The directory containing the driver executable file.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithLocalDriverPath">
            <summary>
            Specifies that local/current directory should be used as the directory containing the driver executable file.
            Uses <c>AppDomain.CurrentDomain.BaseDirectory</c> as driver folder path.
            This configuration option makes sense for .NET Core 2.0+ project that uses driver as a project package (hosted in the same build directory).
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverExecutableFileName(System.String)">
            <summary>
            Specifies the name of the driver executable file.
            </summary>
            <param name="driverExecutableFileName">The name of the driver executable file.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithHostName(System.String)">
            <summary>
            Specifies the host name of the service.
            The default value is <c>"localhost"</c>.
            This configuration option makes sense for .NET Core 2.0 to be set to <c>"127.0.0.1"</c> for IPv4 and <c>"[::1]"</c> for IPv6.
            There is a bug (https://github.com/dotnet/corefx/issues/24104) in .NET Core 2.0: each WebDriver request takes extra <c>1</c> second.
            </summary>
            <param name="hostName">The host name.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithFixOfCommandExecutionDelay">
            <summary>
            Specifies that the fix of driver's HTTP command execution delay should be applied.
            Invokes <c>WithHostName("127.0.0.1")</c> method.
            This configuration option makes sense for .NET Core 2.0 that works within IPv4.
            There is a bug (https://github.com/dotnet/corefx/issues/24104) in .NET Core 2.0: each WebDriver request takes extra <c>1</c> second.
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithCommandTimeout(System.TimeSpan)">
            <summary>
            Specifies the command timeout (the maximum amount of time to wait for each command).
            </summary>
            <param name="commandTimeout">The maximum amount of time to wait for each command.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.FirefoxAtataContextBuilder.WithArguments(System.String[])">
            <summary>
            Adds arguments to be used in launching the Firefox browser.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.IDriverFactory">
            <summary>
            Represents the driver factory.
            </summary>
        </member>
        <member name="P:Atata.IDriverFactory.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="M:Atata.IDriverFactory.Create">
            <summary>
            Creates the driver instance.
            </summary>
            <returns>The created <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithoutSectionFinish``1(Atata.AtataContextBuilder{``0})">
            <summary>
            Defines that the logging should not use section-like pair messages (not <c>"Starting: {action}"</c> and <c>"Finished: {action}"</c>, but just <c>"{action}"</c>).
            </summary>
            <typeparam name="TTLogConsumer">The type of the log consumer.</typeparam>
            <param name="builder">The builder.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithMinLevel``1(Atata.AtataContextBuilder{``0},Atata.LogLevel)">
            <summary>
            Specifies the minimum level of the log event to write to the log.
            </summary>
            <typeparam name="TTLogConsumer">The type of the log consumer.</typeparam>
            <param name="builder">The builder.</param>
            <param name="level">The level.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithLoggerName(Atata.AtataContextBuilder{Atata.NLogConsumer},System.String)">
            <summary>
            Specifies the name of NLog logger.
            </summary>
            <param name="builder">The builder.</param>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.OperaAtataContextBuilder.WithArguments(System.String[])">
            <summary>
            Adds arguments to be appended to the Opera.exe command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="F:Atata.RemoteDriverAtataContextBuilder.DefaultCommandTimeout">
            <summary>
            The default command timeout is <c>60</c> seconds.
            </summary>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithRemoteAddress(System.Uri)">
            <summary>
            Specifies the remote address URI.
            </summary>
            <param name="remoteAddress">URI containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithRemoteAddress(System.String)">
            <summary>
            Specifies the remote address URI.
            </summary>
            <param name="remoteAddress">URI string containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions``1">
            <summary>
            Specifies the type of the driver options.
            </summary>
            <typeparam name="TOptions">The type of the options.</typeparam>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(OpenQA.Selenium.DriverOptions)">
            <summary>
            Specifies the driver options.
            </summary>
            <param name="options">The driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(System.Func{OpenQA.Selenium.DriverOptions})">
            <summary>
            Specifies the driver options factory method.
            </summary>
            <param name="optionsFactory">The factory method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(System.Action{OpenQA.Selenium.DriverOptions})">
            <summary>
            Specifies the driver options initialization method.
            </summary>
            <param name="optionsInitializer">The initialization method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCapabilities(OpenQA.Selenium.ICapabilities)">
            <summary>
            Specifies the capabilities.
            </summary>
            <param name="capabilities">The driver capabilities.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCapabilities(System.Func{OpenQA.Selenium.ICapabilities})">
            <summary>
            Specifies the capabilities factory method.
            </summary>
            <param name="capabilitiesFactory">The factory method of the driver capabilities.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCapability(System.String,System.Object)">
            <summary>
            Adds the capability.
            </summary>
            <param name="capabilityName">The name of the capability to add.</param>
            <param name="capabilityValue">The value of the capability to add</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCommandTimeout(System.TimeSpan)">
            <summary>
            Specifies the command timeout (the maximum amount of time to wait for each command).
            </summary>
            <param name="commandTimeout">The maximum amount of time to wait for each command.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.With``1(Atata.AtataContextBuilder{``0},OpenQA.Selenium.ScreenshotImageFormat)">
            <summary>
            Specifies the image format of the file screenshot consumer.
            </summary>
            <typeparam name="TConsumer">The type of the file screenshot consumer.</typeparam>
            <param name="builder">The builder.</param>
            <param name="imageFormat">The image format.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFolderPath(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{System.String})">
            <summary>
            Specifies the folder path builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="folderPathBuilder">The folder path builder function.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFolderPath(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the folder path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="folderPath">The folder path.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFileName(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{Atata.ScreenshotInfo,System.String})">
            <summary>
            Specifies the file name builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileNameBuilder">The file name builder function that takes an instance of <see cref="T:Atata.ScreenshotInfo"/>.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFileName(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the file name of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileName">The file name.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFilePath(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{Atata.ScreenshotInfo,System.String})">
            <summary>
            Specifies the file path builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePathBuilder">The file path builder function that takes an instance of <see cref="T:Atata.ScreenshotInfo"/>.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFilePath(Atata.AtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the file path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePath">The file path.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder`1"/> instance.</returns>
        </member>
        <member name="P:Atata.DataProvider`2.Should">
            <summary>
            Gets the verification provider that gives a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.IDataProviderExtensions.Get``2(Atata.IDataProvider{``0,``1},``0@)">
            <summary>
            Gets the value and records it to <paramref name="value"/> parameter.
            </summary>
            <typeparam name="TValue">The type of the data value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="provider">The data provider.</param>
            <param name="value">The value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IDataProviderExtensions.Get``1(Atata.IDataProvider{System.Nullable{System.Decimal},``0},System.Nullable{System.Int32}@)">
            <summary>
            Gets the value and records it to <paramref name="value"/> parameter.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="provider">The data provider.</param>
            <param name="value">The value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IDataProviderExtensions.ConvertValueToString``2(Atata.IDataProvider{``0,``1},``0)">
            <summary>
            Gets the value and records it to <paramref name="value"/> parameter.
            </summary>
            <typeparam name="TValue">The type of the data value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="provider">The data provider.</param>
            <param name="value">The value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.ExpressionStringBuilder.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            Output a given expression tree to a string.
            </summary>
            <param name="node">The expession node.</param>
            <returns>The string representing the expression.</returns>
        </member>
        <member name="T:Atata.ObjectExpressionStringBuilder">
            <summary>
            Represents a visitor or rewriter for expression trees.
            Specifically oriented to handle the expression of function taking a single object argument.
            </summary>
        </member>
        <member name="M:Atata.ObjectExpressionStringBuilder.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            Outputs a given expression tree to a string.
            </summary>
            <param name="node">The expression node.</param>
            <returns>The string representing the expression.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``1(Atata.EditableField{System.Nullable{System.Decimal},``0},System.Nullable{System.Int32}@)">
            <summary>
            Sets the random value and records it to <paramref name="value"/> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``1(Atata.EditableField{System.Nullable{System.Decimal},``0},System.Int32@)">
            <summary>
            Sets the random value and records it to <paramref name="value"/> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``2(Atata.EditableField{System.Nullable{``0},``1},``0@)">
            <summary>
            Sets the random value and records it to <paramref name="value"/> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TData">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.INavigableExtensions.ClickAndGo``2(Atata.INavigable{``0,``1})">
            <summary>
            Clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo"/> type.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="navigableControl">The navigable control.</param>
            <returns>The instance of <typeparamref name="TNavigateTo"/>.</returns>
        </member>
        <member name="M:Atata.Go.To``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null"/> creates an instance using the default constructor.</param>
            <param name="url">The URL.</param>
            <param name="navigate">If set to <see langword="true"/> executes page object navigation functionality.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToWindow``1(``0,System.String,System.Boolean)">
            <summary>
            Navigates to the window with the specified page object by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null"/> creates an instance using the default constructor.</param>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToWindow``1(System.String,System.Boolean)">
            <summary>
            Navigates to the window by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToNextWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the next window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null"/> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToPreviousWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the previous window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null"/> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true"/> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToUrl(System.String)">
            <summary>
            Navigates to the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:Atata.IPropertySettings">
            <summary>
            Defines functionality that provides the properties bag.
            </summary>
        </member>
        <member name="P:Atata.IPropertySettings.Properties">
            <summary>
            Gets the properties bag.
            </summary>
        </member>
        <member name="T:Atata.ConsoleLogConsumer">
            <summary>
            Represents the log consumer that uses <see cref="M:System.Console.WriteLine(System.String)"/> method for logging.
            </summary>
            <seealso cref="T:Atata.TextOutputLogConsumer" />
        </member>
        <member name="T:Atata.FileScreenshotConsumer">
            <summary>
            Represents the screenshot consumer that saves the screenshot to the file.
            By default uses <c>"Logs\{build-start}\{test-name-sanitized}"</c> as folder path format,
            <c>"{screenshot-number:D2} - {screenshot-pageobjectfullname}{screenshot-title: - *}"</c> as file name format
            and <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png"/> as image format.
            Example of screenshot file path using default settings: <c>"Logs\2018-03-03 14_34_04\SampleTest\01 - Home page - Screenshot title.png"</c>.
            Available path variables: <c>{build-start}</c>, <c>{test-name}</c>, <c>{test-name-sanitized}</c>, <c>{test-start}</c>, <c>{driver-alias}</c>, <c>{screenshot-number}</c>, <c>{screenshot-title}</c>, <c>{screenshot-pageobjectname}</c>, <c>{screenshot-pageobjecttypename}</c>, <c>{screenshot-pageobjectfullname}</c>.
            Path variables support the formatting.
            </summary>
            <seealso cref="T:Atata.IScreenshotConsumer" />
        </member>
        <member name="F:Atata.FileScreenshotConsumer.DefaultDateTimeFormat">
            <summary>
            The default DateTime format for <c>"build-start"</c> and <c>"test-start"</c> path variables is <c>"yyyy-MM-dd HH_mm_ss"</c>.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FolderPathBuilder">
            <summary>
            Gets or sets the builder of the folder path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FileNameBuilder">
            <summary>
            Gets or sets the builder of the file name.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FilePathBuilder">
            <summary>
            Gets or sets the builder of the file path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FolderPath">
            <summary>
            Gets or sets the folder path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="M:Atata.FileScreenshotConsumer.FormatPath(System.String,Atata.ScreenshotInfo)">
            <summary>
            Formats the screenshot file path using path variables.
            </summary>
            <param name="format">The format.</param>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The formatted file path format.</returns>
        </member>
        <member name="M:Atata.FileScreenshotConsumer.BuildFilePath(Atata.ScreenshotInfo)">
            <summary>
            Builds the path of the file without the extension.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The file path without the extension.</returns>
        </member>
        <member name="P:Atata.FileScreenshotConsumerBase.ImageFormat">
            <summary>
            Gets or sets the image format.
            The default format is <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png"/>.
            </summary>
        </member>
        <member name="M:Atata.FileScreenshotConsumerBase.Take(Atata.ScreenshotInfo)">
            <summary>
            Takes the specified screenshot.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
        </member>
        <member name="M:Atata.FileScreenshotConsumerBase.BuildFilePath(Atata.ScreenshotInfo)">
            <summary>
            Builds the path of the file without the extension.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The file path without the extension.</returns>
        </member>
        <member name="T:Atata.IScreenshotConsumer">
            <summary>
            Defines the interface for the screenshot consumer.
            </summary>
        </member>
        <member name="M:Atata.IScreenshotConsumer.Take(Atata.ScreenshotInfo)">
            <summary>
            Takes the specified screenshot.
            </summary>
            <param name="screenshotInfo">The screenshot information object.</param>
        </member>
        <member name="T:Atata.LogEventInfo">
            <summary>
            Represents the logging event information raised by Atata framework.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Timestamp">
            <summary>
            Gets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Level">
            <summary>
            Gets the level of the logging event.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Message">
            <summary>
            Gets the log message.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Exception">
            <summary>
            Gets the exception information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.SectionStart">
            <summary>
            Gets the section start information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.SectionEnd">
            <summary>
            Gets the section end information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.BuildStart">
            <summary>
            Gets the build start date and time.
            Contains the same value for all the tests being executed within one build.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.TestName">
            <summary>
            Gets the name of the test.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.TestNameSanitized">
            <summary>
            Gets the name of the test sanitized for file path/name.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.TestStart">
            <summary>
            Gets the test start date and time.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.DriverAlias">
            <summary>
            Gets the alias of the driver.
            </summary>
        </member>
        <member name="T:Atata.LogLevel">
            <summary>
            Specifies the level of log event.
            </summary>
        </member>
        <member name="T:Atata.LogManager">
            <summary>
            Represents the log manager, the entry point for the Atata logging functionality.
            </summary>
            <seealso cref="T:Atata.ILogManager" />
        </member>
        <member name="M:Atata.LogManager.Use(Atata.ILogConsumer,Atata.LogLevel,System.Boolean)">
            <summary>
            Use the specified consumer for logging.
            </summary>
            <param name="consumer">The log consumer.</param>
            <param name="minLevel">The minimum level of the log message.</param>
            <param name="logSectionFinish">If set to <see langword="true"/> logs the section finish messages with elapsed time span.</param>
            <returns>
            The same <see cref="T:Atata.LogManager" /> instance.
            </returns>
        </member>
        <member name="M:Atata.LogManager.Use(Atata.IScreenshotConsumer)">
            <summary>
            Use the specified screenshot consumer.
            </summary>
            <param name="consumer">The screenshot consumer.</param>
            <returns>The same <see cref="T:Atata.LogManager"/> instance.</returns>
        </member>
        <member name="M:Atata.LogManager.Start(Atata.LogSection)">
            <summary>
            Starts the specified log section.
            </summary>
            <param name="section">The log section.</param>
            <example>This sample shows how to log the data insertion to some control in the scope of the control.
            <code>
            string value = "new_value";
            Log.Start(new DataAdditionLogSection(this, value));
            // TODO: Add a value to the control.
            Log.EndSection();
            </code>
            </example>
        </member>
        <member name="M:Atata.LogManager.EndSection">
            <summary>
            Ends the latest log section.
            </summary>
        </member>
        <member name="T:Atata.Report`1">
            <summary>
            Provides reporting functionality.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.Report`1.#ctor(`0,Atata.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Report`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="M:Atata.Report`1.Trace(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Trace"/> level optionally using the specified <paramref name="args"/> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Debug(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Debug"/> level optionally using the specified <paramref name="args"/> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Info(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Info"/> level optionally using the specified <paramref name="args"/> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Warn(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Warn"/> level optionally using the specified <paramref name="args"/> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.Exception)">
            <summary>
            Writes the exception at the <see cref="F:Atata.LogLevel.Error"/> level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.String,System.Exception)">
            <summary>
            Writes the log message and optionally exception at the <see cref="F:Atata.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.String,System.String)">
            <summary>
            Writes the log message and stack trace at the <see cref="F:Atata.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message.</param>
            <param name="stackTrace">The stack trace.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Fatal(System.Exception)">
            <summary>
            Writes the exception at the <see cref="F:Atata.LogLevel.Fatal"/> level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Fatal(System.String,System.Exception)">
            <summary>
            Writes the log message and optionally exception at the <see cref="F:Atata.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(Atata.LogSection)">
            <summary>
            Starts the specified log section.
            </summary>
            <param name="section">The log section.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(System.String)">
            <summary>
            Starts the specified log section with message.
            </summary>
            <param name="sectionMessage">The section message.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(System.String,Atata.LogLevel)">
            <summary>
            Starts the specified log section with message and log level.
            </summary>
            <param name="sectionMessage">The section message.</param>
            <param name="level">The level.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.EndSection">
            <summary>
            Ends the latest log section.
            </summary>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Screenshot(System.String)">
            <summary>
            Takes a screenshot with the optionally specified title.
            </summary>
            <param name="title">The title.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="T:Atata.ScreenshotInfo">
            <summary>
            Represents the screenshot information.
            Is used by the classes that implement <see cref="T:Atata.IScreenshotConsumer"/>.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Screenshot">
            <summary>
            Gets the screenshot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Number">
            <summary>
            Gets the number.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Title">
            <summary>
            Gets the title. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectName">
            <summary>
            Gets the name of the page object that was shot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectTypeName">
            <summary>
            Gets the type name of the page object that was shot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectFullName">
            <summary>
            Gets the full name of the page object that was shot.
            </summary>
        </member>
        <member name="T:Atata.TextOutputLogConsumer">
            <summary>
            Represents text output log consumer.
            Is used for regular text logging.
            Action to write text to some source can be passed via constructor.
            Also it is possible to define custom class inherited from <see cref="T:Atata.TextOutputLogConsumer"/> and override <see cref="M:Atata.TextOutputLogConsumer.Write(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Atata.TextOutputLogConsumer.Separator">
            <summary>
            Gets or sets the text parts separator.
            The default value is <c>" "</c>.
            </summary>
        </member>
        <member name="P:Atata.TextOutputLogConsumer.TimestampFormat">
            <summary>
            Gets or sets the timestamp format.
            The default value is <c>"yyyy-MM-dd HH:mm:ss.ffff"</c>.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnHeaderStrategy">
            <summary>
            Represents a strategy that finds a control in a cell that corresponds the column searched by the column header text.
            First finds the index of the column header and then finds the cell by this index.
            </summary>
        </member>
        <member name="F:Atata.FindByColumnHeaderStrategy.DefaultHeaderXPath">
            <summary>
            The default XPath of the header, which is <c>"ancestor::table[1]//th"</c>.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnHeaderStrategy"/> class
            using <see cref="F:Atata.FindByColumnHeaderStrategy.DefaultHeaderXPath"/>.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnHeaderStrategy"/> class
            using the specified <paramref name="headerXPath"/> argument value.
            </summary>
            <param name="headerXPath">The XPath of the header element.</param>
        </member>
        <member name="P:Atata.FindByColumnHeaderStrategy.HeaderXPath">
            <summary>
            Gets or sets the XPath of the header element.
            The default value is <c>"ancestor::table[1]//th"</c>.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.GetColumnIndex(OpenQA.Selenium.IWebElement,Atata.ComponentScopeLocateOptions,Atata.SearchOptions)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="scope">The scope.</param>
            <param name="options">The component scope locate options.</param>
            <param name="searchOptions">The search options.</param>
            <returns>The index of the column or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.CreateColumnIndexStrategy(System.Int32)">
            <summary>
            Creates the strategy to find a component by the column index.
            By default creates an instance of <see cref="T:Atata.FindByColumnIndexStrategy"/>.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>An instance of <see cref="T:Atata.FindByColumnIndexStrategy"/>.</returns>
        </member>
        <member name="T:Atata.FindByColumnIndexStrategy">
            <summary>
            Represents a strategy that finds a control in a cell searched by the specified column index.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnIndexStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnIndexStrategy"/> class.
            </summary>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="P:Atata.FindByColumnIndexStrategy.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
        </member>
        <member name="P:Atata.FindByColumnIndexStrategy.CellXPath">
            <summary>
            Gets or sets the XPath of the cell.
            The dafault value is <c>"td"</c>.
            </summary>
        </member>
        <member name="T:Atata.ScopeSource">
            <summary>
            Specifies the source of the scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Parent">
            <summary>
            Uses the parent's scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Grandparent">
            <summary>
            Uses the grandparent's (the parent of the parent) scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.PageObject">
            <summary>
            Uses the owner page object's scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Page">
            <summary>
            Uses the page's scope (<c>&lt;body&gt;</c> element).
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Atata.TermCase">
            <summary>
            Specifies the term case.
            </summary>
        </member>
        <member name="F:Atata.TermCase.None">
            <summary>
            Doesn't apply the case.
            </summary>
        </member>
        <member name="F:Atata.TermCase.Title">
            <summary>
            Uses title case (e.g. <c>"Some of the Terms"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Capitalized">
            <summary>
            Uses title case with all words capitalized (e.g. <c>"Some Of The Terms"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Sentence">
            <summary>
            Uses sentence case (e.g. <c>"Some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.MidSentence">
            <summary>
            Uses mid-sentence case where the first word is not capitalized (e.g. <c>"some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Lower">
            <summary>
            Uses lower case (e.g. <c>"some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.LowerMerged">
            <summary>
            Uses lower case with words merging (e.g. <c>"someterm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Upper">
            <summary>
            Uses upper case (e.g. <c>"SOME TERM"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.UpperMerged">
            <summary>
            Uses upper case with words merging (e.g. <c>"SOMETERM"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Camel">
            <summary>
            Uses camel case (e.g. <c>"someTerm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Pascal">
            <summary>
            Uses pascal case (e.g. <c>"SomeTerm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Kebab">
            <summary>
            Uses dash ('-') and lower case (e.g. <c>"some-term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.HyphenKebab">
            <summary>
            Uses hyphen ('‐') and lower case (e.g. <c>"some‐term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.PascalKebab">
            <summary>
            Uses dash ('-') and pascal case (e.g. <c>"Some-Term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.PascalHyphenKebab">
            <summary>
            Uses hyphen ('‐') and pascal case (e.g. <c>"Some‐Term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Snake">
            <summary>
            Uses underscore ('_') and lower case (e.g. <c>"some_term"</c>).
            </summary>
        </member>
        <member name="T:Atata.TermMatch">
            <summary>
            Specifies the match approach for the term finding.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.Equals">
            <summary>
            Checks whether the text equals the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.Contains">
            <summary>
            Checks whether the text contains the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.StartsWith">
            <summary>
            Checks whether the text starts with the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.EndsWith">
            <summary>
            Checks whether the text ends with the specified term.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Match">
            <summary>
            Gets or sets the match.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Case">
            <summary>
            Gets or sets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="T:Atata.TriggerEvents">
            <summary>
            Specifies the trigger events.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.None">
            <summary>
            None of the events.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.Init">
            <summary>
            Occurs upon the page object initialization.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.DeInit">
            <summary>
            Occurs upon the page object de-initialization.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAccess">
            <summary>
            Occurs before any access to the component.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterAccess">
            <summary>
            Occurs after any access to the component.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeGet">
            <summary>
            Occurs before the value is taken from the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterGet">
            <summary>
            Occurs after the value is taken from the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeSet">
            <summary>
            Occurs before the value is set to the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterSet">
            <summary>
            Occurs after the value is set to the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClick">
            <summary>
            Occurs before the click on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClick">
            <summary>
            Occurs after the click on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeHover">
            <summary>
            Occurs before the hover on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterHover">
            <summary>
            Occurs after the hover on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeFocus">
            <summary>
            Occurs before the control gets the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterFocus">
            <summary>
            Occurs after the control gets the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeScroll">
            <summary>
            Occurs before the scrolling to control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterScroll">
            <summary>
            Occurs after the scrolling to control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeGetOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeGet"/> and <see cref="F:Atata.TriggerEvents.BeforeSet"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrHover">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick"/> and <see cref="F:Atata.TriggerEvents.BeforeHover"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick"/> and <see cref="F:Atata.TriggerEvents.BeforeFocus"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrHoverOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick"/>, <see cref="F:Atata.TriggerEvents.BeforeHover"/> and <see cref="F:Atata.TriggerEvents.BeforeFocus"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAnyAction">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick"/>, <see cref="F:Atata.TriggerEvents.BeforeGet"/>, <see cref="F:Atata.TriggerEvents.BeforeSet"/>, <see cref="F:Atata.TriggerEvents.BeforeFocus"/> and <see cref="F:Atata.TriggerEvents.BeforeScroll"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterGetOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterGet"/> and <see cref="F:Atata.TriggerEvents.AfterSet"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrHover">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick"/> and <see cref="F:Atata.TriggerEvents.AfterHover"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick"/> and <see cref="F:Atata.TriggerEvents.AfterFocus"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrHoverOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick"/>, <see cref="F:Atata.TriggerEvents.AfterHover"/> and <see cref="F:Atata.TriggerEvents.AfterFocus"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterAnyAction">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick"/>, <see cref="F:Atata.TriggerEvents.AfterGet"/>, <see cref="F:Atata.TriggerEvents.AfterSet"/>, <see cref="F:Atata.TriggerEvents.AfterFocus"/> and <see cref="F:Atata.TriggerEvents.AfterScroll"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick"/> and <see cref="F:Atata.TriggerEvents.AfterSet"/>.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAndAfterClick">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick"/> and <see cref="F:Atata.TriggerEvents.AfterClick"/>.
            </summary>
        </member>
        <member name="T:Atata.TriggerPriority">
            <summary>
            Specifies the priority of the trigger execution.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Higher">
            <summary>
            The higher priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.High">
            <summary>
            The high priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Medium">
            <summary>
            The medium priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Low">
            <summary>
            The low priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Lower">
            <summary>
            The lower priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Lowest">
            <summary>
            The lowest priority.
            </summary>
        </member>
        <member name="T:Atata.TriggerScope">
            <summary>
            Specifies the scope of the trigger application.
            </summary>
        </member>
        <member name="F:Atata.TriggerScope.Self">
            <summary>
            Indicates that the trigger applies to the class/member declared.
            </summary>
        </member>
        <member name="F:Atata.TriggerScope.Children">
            <summary>
            Indicates that the trigger applies to the child control properties.
            </summary>
        </member>
        <member name="T:Atata.UIComponentMetadata">
            <summary>
            Represents the UI component metadata which consists of component name, type, attributes, etc.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.Name">
            <summary>
            Gets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentType">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ParentComponentType">
            <summary>
            Gets the type of the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentDefinitionAttribute">
            <summary>
            Gets the component definition attribute.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.DeclaredAttributes">
            <summary>
            Gets the attributes hosted at the declared level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentAttributes">
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ParentComponentAttributes">
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.AssemblyAttributes">
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.GlobalAttributes">
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.AllAttributes">
            <summary>
            Gets all attributes in the following order of levels:
            decalred, parent component, assembly, global, component.
            </summary>
        </member>
        <member name="M:Atata.UIComponentMetadata.Get``1">
            <summary>
            Gets the first attribute of the specified type or <see langword="null"/> if no such attribute is found.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The first attribute found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Get``1(System.Func{Atata.AttributeFilter{``0},Atata.AttributeFilter{``0}})">
            <summary>
            Gets the first attribute of the specified type or <see langword="null"/> if no such attribute is found.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="filterConfiguration">The filter configuration function.</param>
            <returns>The first attribute found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Get``1(Atata.AttributeLevels,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Gets the first attribute of the specified type or <see langword="null"/> if no such attribute is found.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="levels">The attribute levels.</param>
            <param name="predicate">The predicate.</param>
            <param name="filterByTarget">If set to <see langword="true"/>, filters by <see cref="T:Atata.MulticastAttribute"/> criteria if <typeparamref name="TAttribute"/> is <see cref="T:Atata.MulticastAttribute"/>.</param>
            <returns>The first attribute found or <see langword="null"/>.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetAll``1">
            <summary>
            Gets the sequence of attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The sequence of attributes found.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetAll``1(System.Func{Atata.AttributeFilter{``0},Atata.AttributeFilter{``0}})">
            <summary>
            Gets the sequence of attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="filterConfiguration">The filter configuration function.</param>
            <returns>The sequence of attributes found.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetAll``1(Atata.AttributeLevels,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Gets the sequence of attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="levels">The attribute levels.</param>
            <param name="predicate">The predicate.</param>
            <param name="filterByTarget">If set to <see langword="true"/>, filters by <see cref="T:Atata.MulticastAttribute"/> criteria if <typeparamref name="TAttribute"/> is <see cref="T:Atata.MulticastAttribute"/>.</param>
            <returns>The sequence of attributes found.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Push(System.Attribute[])">
            <summary>
            Inserts the specified attributes into <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes"/> collection at the beginning.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.Push(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Inserts the specified attributes into <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes"/> collection at the beginning.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetCulture">
            <summary>
            Gets the culture by searching the <see cref="T:Atata.CultureAttribute"/> at all attribute levels or current culture if not found.
            </summary>
            <returns>The <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetFormat">
            <summary>
            Gets the format by searching the <see cref="T:Atata.FormatAttribute"/> at all attribute levels or <see langword="null"/> if not found.
            </summary>
            <returns>The format or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:Atata.UriUtils">
            <summary>
            Provides a set of methods for URI manipulations.
            </summary>
        </member>
        <member name="M:Atata.UriUtils.TryCreateAbsoluteUrl(System.String,System.Uri@)">
            <summary>
            Tries to create an absolute <see cref="T:System.Uri"/>.
            </summary>
            <param name="urlString">The URL string.</param>
            <param name="result">The result containing constructed <see cref="T:System.Uri"/>.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value that is <see langword="true"/> if the <see cref="T:System.Uri"/> was successfully created;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Atata.UriUtils.Concat(System.String,System.String)">
            <summary>
            Concatenates the specified base URI with the relative URI.
            </summary>
            <param name="baseUri">The base URI.</param>
            <param name="relativeUri">The relative URI.</param>
            <returns>The created <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:Atata.Until">
            <summary>
            Specifies the waiting condition of the component/element.
            </summary>
        </member>
        <member name="F:Atata.Until.Missing">
            <summary>
            Waits until the component/element will be missing.
            </summary>
        </member>
        <member name="F:Atata.Until.Hidden">
            <summary>
            Waits until the component/element will be hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingOrHidden">
            <summary>
            Waits until the component/element will be missing or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.Visible">
            <summary>
            Waits until the component/element will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleOrHidden">
            <summary>
            Waits until the component/element will be visible or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenHidden">
            <summary>
            Waits until the component/element will be visible and then until it will be hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenMissing">
            <summary>
            Waits until the component/element will be visible and then until it will be missing.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenMissingOrHidden">
            <summary>
            Waits until the component/element will be visible and then until it will be missing or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingThenVisible">
            <summary>
            Waits until the component/element will be missing and then until it will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.HiddenThenVisible">
            <summary>
            Waits until the component/element will be hidden and then until it will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingOrHiddenThenVisible">
            <summary>
            Waits until the component/element will be missing or hidden and then until it will be visible.
            </summary>
        </member>
        <member name="T:Atata.WaitBy">
            <summary>
            Specifies the kind of the element selector for the waiting.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Id">
            <summary>
            Uses the id selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Name">
            <summary>
            Uses the name selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Class">
            <summary>
            Uses the class selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Css">
            <summary>
            Uses the CSS selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.XPath">
            <summary>
            Uses the XPath selector kind.
            </summary>
        </member>
        <member name="T:Atata.WaitOptions">
            <summary>
            Represents the component waiting options.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.ThrowOnPresenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the presence (exists or visible) failure.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.ThrowOnAbsenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the absence (missing or hidden) failure.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.PresenceTimeout">
            <summary>
            Gets or sets the presence (exists or visible) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.AbsenceTimeout">
            <summary>
            Gets or sets the absence (missing or hidden) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.RetryInterval">
            <summary>
            Gets or sets the retry interval in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingRetryInterval.TotalSeconds</c>.
            </summary>
        </member>
    </members>
</doc>
