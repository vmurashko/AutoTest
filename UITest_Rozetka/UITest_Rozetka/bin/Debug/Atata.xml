<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Atata</name>
    </assembly>
    <members>
        <member name="T:Atata.AttributeNotFoundException">
            <summary>
            The exception that is thrown when an attribute cannot be found.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Atata.AttributeNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AttributeNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:Atata.AttributeNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AttributeNotFoundException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Atata.AttributeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AttributeNotFoundException" /> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Atata.AttributeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AttributeNotFoundException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Atata.AttributeNotFoundException.Create(System.Type,System.String)">
            <summary>
            Creates the <see cref="T:Atata.AttributeNotFoundException" /> for the specified <paramref name="attributeType" />
            and <paramref name="sourceName" />.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <param name="sourceName">Name of the source where the finding of the attribute ocurred.</param>
            <returns>An instance of <see cref="T:Atata.AttributeNotFoundException" />.</returns>
        </member>
        <member name="T:Atata.AttributeSettingsAttribute">
            <summary>
            Represents the base attribute settings class for other attributes.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.TargetAttributeTypes">
            <summary>
            Gets or sets the target attribute types.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.TargetAttributeType">
            <summary>
            Gets or sets the target attribute type.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.ExcludeTargetAttributeTypes">
            <summary>
            Gets or sets the target attribute types to exclude.
            </summary>
        </member>
        <member name="P:Atata.AttributeSettingsAttribute.ExcludeTargetAttributeType">
            <summary>
            Gets or sets the target attribute type to exclude.
            </summary>
        </member>
        <member name="T:Atata.BlurBehaviorAttribute">
            <summary>
            Represents the base behavior class for control blur (removing focus) implementation.
            </summary>
        </member>
        <member name="M:Atata.BlurBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.BlursUsingScriptAttribute">
            <summary>
            Represents the behavior for control blurring by executing <c>HTMLElement.blur()</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.BlursUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClickBehaviorAttribute">
            <summary>
            Represents the base behavior class for control click implementation.
            </summary>
        </member>
        <member name="M:Atata.ClickBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClicksOnCellByIndexAttribute">
            <summary>
            Represents the behavior for control clicking by actually clicking the nth <c>&lt;td&gt;</c> cell.
            There is a sense to apply this behavior to <see cref="T:Atata.TableRow`1" /> classes.
            </summary>
        </member>
        <member name="M:Atata.ClicksOnCellByIndexAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ClicksOnCellByIndexAttribute" /> class.
            </summary>
            <param name="index">The index of a cell.</param>
        </member>
        <member name="P:Atata.ClicksOnCellByIndexAttribute.Index">
            <summary>
            Gets the index of a cell.
            </summary>
        </member>
        <member name="M:Atata.ClicksOnCellByIndexAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClicksUsingActionsAttribute">
            <summary>
            Represents the behavior for control clicking by using a set of actions:
            <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)" /> or <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,OpenQA.Selenium.Interactions.MoveToElementOffsetOrigin)" /> and <see cref="M:OpenQA.Selenium.Interactions.Actions.Click" />.
            </summary>
        </member>
        <member name="P:Atata.ClicksUsingActionsAttribute.OffsetKind">
            <summary>
            Gets or sets the kind of the offset.
            The default value is <see cref="F:Atata.UIComponentOffsetKind.FromCenterInPercents" />.
            </summary>
        </member>
        <member name="P:Atata.ClicksUsingActionsAttribute.OffsetX">
            <summary>
            Gets or sets the horizontal offset to which to move the mouse.
            </summary>
        </member>
        <member name="P:Atata.ClicksUsingActionsAttribute.OffsetY">
            <summary>
            Gets or sets the vertical offset to which to move the mouse.
            </summary>
        </member>
        <member name="M:Atata.ClicksUsingActionsAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClicksUsingClickMethodAttribute">
            <summary>
            Represents the behavior for control clicking by <see cref="M:OpenQA.Selenium.IWebElement.Click" /> method.
            </summary>
        </member>
        <member name="M:Atata.ClicksUsingClickMethodAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClicksUsingScriptAttribute">
            <summary>
            Represents the behavior for control clicking by executing <c>HTMLElement.click()</c> JavaScript method.
            </summary>
        </member>
        <member name="M:Atata.ClicksUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ContentGetBehaviorAttribute">
            <summary>
            Represents the base behavior class for getting the component's content.
            </summary>
        </member>
        <member name="M:Atata.ContentGetBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Gets the component content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The component.</param>
            <returns>The content.</returns>
        </member>
        <member name="T:Atata.GetsContentFromAttributeAttribute">
            <summary>
            Represents the behavior for component content getting from HTML attribute by attribute name.
            </summary>
        </member>
        <member name="M:Atata.GetsContentFromAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.GetsContentFromAttributeAttribute" /> class using the name of HTML attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="P:Atata.GetsContentFromAttributeAttribute.AttributeName">
            <summary>
            Gets the name of HTML attribute.
            </summary>
        </member>
        <member name="T:Atata.GetsContentFromSourceAttribute">
            <summary>
            Represents the behavior for component content getting from
            the specified source of <see cref="T:Atata.ContentSource" /> enumeration type.
            </summary>
        </member>
        <member name="M:Atata.GetsContentFromSourceAttribute.#ctor(Atata.ContentSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.GetsContentFromSourceAttribute" /> class using <see cref="T:Atata.ContentSource" /> value.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Atata.GetsContentFromSourceAttribute.Source">
            <summary>
            Gets the kind of source.
            </summary>
        </member>
        <member name="T:Atata.DoubleClickBehaviorAttribute">
            <summary>
            Represents the base behavior class for control double-click implementation.
            </summary>
        </member>
        <member name="M:Atata.DoubleClickBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.DoubleClicksUsingActionsAttribute">
            <summary>
            Represents the behavior for control double-clicking by using a set of actions:
            <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)" /> or <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,OpenQA.Selenium.Interactions.MoveToElementOffsetOrigin)" /> and <see cref="M:OpenQA.Selenium.Interactions.Actions.DoubleClick" />.
            </summary>
        </member>
        <member name="P:Atata.DoubleClicksUsingActionsAttribute.OffsetKind">
            <summary>
            Gets or sets the kind of the offset.
            The default value is <see cref="F:Atata.UIComponentOffsetKind.FromCenterInPercents" />.
            </summary>
        </member>
        <member name="P:Atata.DoubleClicksUsingActionsAttribute.OffsetX">
            <summary>
            Gets or sets the horizontal offset to which to move the mouse.
            </summary>
        </member>
        <member name="P:Atata.DoubleClicksUsingActionsAttribute.OffsetY">
            <summary>
            Gets or sets the vertical offset to which to move the mouse.
            </summary>
        </member>
        <member name="M:Atata.DoubleClicksUsingActionsAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.DoubleClicksUsingScriptAttribute">
            <summary>
            Represents the behavior for control double-clicking by executing <c>HTMLElement.dispatchEvent(new Event('dblclick'))</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.DoubleClicksUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.DragAndDropToOffsetBehaviorAttribute">
            <summary>
            Represents the base behavior class for implementation of control drag and drop to offset.
            </summary>
        </member>
        <member name="T:Atata.DragsAndDropsToOffsetUsingActionsAttribute">
            <summary>
            Represents the behavior for control dragging and dropping to offset using WebDriver's <see cref="T:OpenQA.Selenium.Interactions.Actions" />.
            Performs <see cref="M:OpenQA.Selenium.Interactions.Actions.DragAndDropToOffset(OpenQA.Selenium.IWebElement,System.Int32,System.Int32)" /> action.
            </summary>
        </member>
        <member name="T:Atata.DragAndDropBehaviorAttribute">
            <summary>
            Represents the base behavior class for drag and drop.
            </summary>
        </member>
        <member name="T:Atata.DragsAndDropsUsingActionsAttribute">
            <summary>
            Represents the behavior for drag and drop using WebDriver's <see cref="T:OpenQA.Selenium.Interactions.Actions" />.
            Performs <see cref="M:OpenQA.Selenium.Interactions.Actions.DragAndDrop(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement)" /> action.
            </summary>
        </member>
        <member name="T:Atata.DragsAndDropsUsingDomEventsAttribute">
            <summary>
            Represents the behavior for drag and drop using JavaScript.
            The script simulates drag and drop by dispatching DOM events: 'dragstart', 'dragenter', 'dragover', 'drop' and 'dragend'.
            </summary>
        </member>
        <member name="T:Atata.FindItemByFollowingSiblingContentAttribute">
            <summary>
            Represents the behavior to find an item of <see cref="T:Atata.OptionList`2" /> control by following sibling element content.
            </summary>
        </member>
        <member name="T:Atata.FindItemByParentContentAttribute">
            <summary>
            Represents the behavior to find an item of <see cref="T:Atata.OptionList`2" /> control by parent element content.
            </summary>
        </member>
        <member name="T:Atata.FindItemByPrecedingSiblingContentAttribute">
            <summary>
            Represents the behavior to find an item of <see cref="T:Atata.OptionList`2" /> control by preceding sibling element content.
            </summary>
        </member>
        <member name="T:Atata.FindItemByRelativeElementContentAttribute">
            <summary>
            Represents the behavior to find an item of <see cref="T:Atata.OptionList`2" /> control by relative element content using its XPath.
            </summary>
        </member>
        <member name="P:Atata.FindItemByRelativeElementContentAttribute.RelativeElementXPath">
            <summary>
            Gets the relative element XPath.
            </summary>
        </member>
        <member name="P:Atata.TermFindItemAttribute.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.TermFindItemAttribute.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindItemAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="T:Atata.FocusBehaviorAttribute">
            <summary>
            Represents the base behavior class for control focus implementation.
            </summary>
        </member>
        <member name="M:Atata.FocusBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.FocusesUsingScriptAttribute">
            <summary>
            Represents the behavior for control focusing by executing <c>HTMLElement.focus()</c> JavaScript.
            </summary>
        </member>
        <member name="T:Atata.HoverBehaviorAttribute">
            <summary>
            Represents the base behavior class for control hover implementation.
            </summary>
        </member>
        <member name="M:Atata.HoverBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.HoversUsingActionsAttribute">
            <summary>
            Represents the behavior for control hovering by using one of actions:
            <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)" /> or <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,OpenQA.Selenium.Interactions.MoveToElementOffsetOrigin)" />.
            </summary>
        </member>
        <member name="P:Atata.HoversUsingActionsAttribute.OffsetKind">
            <summary>
            Gets or sets the kind of the offset.
            The default value is <see cref="F:Atata.UIComponentOffsetKind.FromCenterInPercents" />.
            </summary>
        </member>
        <member name="P:Atata.HoversUsingActionsAttribute.OffsetX">
            <summary>
            Gets or sets the horizontal offset to which to move the mouse.
            </summary>
        </member>
        <member name="P:Atata.HoversUsingActionsAttribute.OffsetY">
            <summary>
            Gets or sets the vertical offset to which to move the mouse.
            </summary>
        </member>
        <member name="M:Atata.HoversUsingActionsAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.RightClickBehaviorAttribute">
            <summary>
            Represents the base behavior class for control right-click implementation.
            </summary>
        </member>
        <member name="M:Atata.RightClickBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.RightClicksUsingActionsAttribute">
            <summary>
            Represents the behavior for control right-clicking by using a set of actions:
            <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)" /> or
            <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement,System.Int32,System.Int32,OpenQA.Selenium.Interactions.MoveToElementOffsetOrigin)" /> and
            <see cref="M:OpenQA.Selenium.Interactions.Actions.ContextClick" />.
            </summary>
        </member>
        <member name="P:Atata.RightClicksUsingActionsAttribute.OffsetKind">
            <summary>
            Gets or sets the kind of the offset.
            The default value is <see cref="F:Atata.UIComponentOffsetKind.FromCenterInPercents" />.
            </summary>
        </member>
        <member name="P:Atata.RightClicksUsingActionsAttribute.OffsetX">
            <summary>
            Gets or sets the horizontal offset to which to move the mouse.
            </summary>
        </member>
        <member name="P:Atata.RightClicksUsingActionsAttribute.OffsetY">
            <summary>
            Gets or sets the vertical offset to which to move the mouse.
            </summary>
        </member>
        <member name="M:Atata.RightClicksUsingActionsAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.RightClicksUsingScriptAttribute">
            <summary>
            Represents the behavior for control right-clicking by executing <c>HTMLElement.dispatchEvent(new Event('contextmenu'))</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.RightClicksUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ScrollBehaviorAttribute">
            <summary>
            Represents the base behavior class for scrolling to control.
            </summary>
        </member>
        <member name="T:Atata.ScrollsUsingActionsAttribute">
            <summary>
            Represents the behavior for scrolling to control using WebDriver's <see cref="T:OpenQA.Selenium.Interactions.Actions" />.
            Performs <see cref="M:OpenQA.Selenium.Interactions.Actions.MoveToElement(OpenQA.Selenium.IWebElement)" /> action.
            </summary>
        </member>
        <member name="T:Atata.ScrollsUsingScriptAttribute">
            <summary>
            Represents the behavior for scrolling to control using JavaScript.
            Performs <c>element.scrollIntoView()</c> function.
            </summary>
        </member>
        <member name="T:Atata.SelectOptionBehaviorAttribute">
            <summary>
            Represents the base behavior class for option selection of <see cref="T:Atata.Select`2" /> control.
            </summary>
        </member>
        <member name="T:Atata.SelectsOptionByAttributeAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2" /> control using specified option attribute.
            </summary>
        </member>
        <member name="P:Atata.SelectsOptionByAttributeAttribute.AttributeName">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="T:Atata.SelectsOptionByLabelAttributeAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2" /> control using option <c>label</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.SelectsOptionByTextAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2" /> control using option text.
            </summary>
        </member>
        <member name="T:Atata.SelectsOptionByValueAttribute">
            <summary>
            Represents the behavior for option selection of <see cref="T:Atata.Select`2" /> control using option <c>value</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.TextTypeBehaviorAttribute">
            <summary>
            Represents the base behavior class for an implementation of control text typing.
            </summary>
        </member>
        <member name="M:Atata.TextTypeBehaviorAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.TypesTextUsingFocusBehaviorAndSendKeysAttribute">
            <summary>
            Represents the behavior for control text typing by executing <see cref="T:Atata.FocusBehaviorAttribute" /> behavior
            and then invoking <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method.
            </summary>
        </member>
        <member name="M:Atata.TypesTextUsingFocusBehaviorAndSendKeysAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.TypesTextUsingFocusBehaviorAndSendKeysCharByCharAttribute">
            <summary>
            Represents the behavior for control text typing by executing <see cref="T:Atata.FocusBehaviorAttribute" /> behavior
            and then invoking <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method
            for character by character with interval defined in <see cref="P:Atata.TypesTextUsingSendKeysCharByCharAttribute.TypingIntervalInSeconds" /> property.
            </summary>
        </member>
        <member name="M:Atata.TypesTextUsingFocusBehaviorAndSendKeysCharByCharAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.TypesTextUsingScriptAttribute">
            <summary>
            Represents the behavior for control text typing by executing
            <c>HTMLElement.value += '{value}'; HTMLElement.dispatchEvent(new Event('change'));</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.TypesTextUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.TypesTextUsingSendKeysAttribute">
            <summary>
            Represents the behavior for control text typing by <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method.
            <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method is invoked only when the value is not null or empty.
            </summary>
        </member>
        <member name="M:Atata.TypesTextUsingSendKeysAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.TypesTextUsingSendKeysCharByCharAttribute">
            <summary>
            Represents the behavior for control text typing by invoking <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method
            for character by character with interval defined in <see cref="P:Atata.TypesTextUsingSendKeysCharByCharAttribute.TypingIntervalInSeconds" /> property.
            </summary>
        </member>
        <member name="P:Atata.TypesTextUsingSendKeysCharByCharAttribute.TypingIntervalInSeconds">
            <summary>
            Gets the typing interval in seconds.
            The default value is <c>0.2</c>.
            </summary>
        </member>
        <member name="M:Atata.TypesTextUsingSendKeysCharByCharAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The text value to type.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingClearMethodAttribute">
            <summary>
            Represents the behavior for control value clearing by <see cref="M:OpenQA.Selenium.IWebElement.Clear" /> method.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingClearMethodAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingClearMethodOrScriptAttribute">
            <summary>
            Represents the behavior for control value clearing by trying to execute <see cref="M:OpenQA.Selenium.IWebElement.Clear" /> method.
            If <see cref="T:OpenQA.Selenium.InvalidElementStateException" /> occurs, then clears the value by executing
            <c>HTMLElement.value = ''; HTMLElement.dispatchEvent(new Event('change'));</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingClearMethodOrScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingCtrlADeleteKeysAttribute">
            <summary>
            Represents the behavior for control value clearing by performing "Ctrl+A, Delete" keyboard shortcut.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingCtrlADeleteKeysAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingHomeShiftEndDeleteKeysAttribute">
            <summary>
            Represents the behavior for control value clearing by performing "Home, Shift+End, Delete" keyboard shortcut.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingHomeShiftEndDeleteKeysAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingScriptAttribute">
            <summary>
            Represents the behavior for control value clearing by executing
            <c>HTMLElement.value = ''; HTMLElement.dispatchEvent(new Event('change'));</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ClearsValueUsingShiftHomeDeleteKeysAttribute">
            <summary>
            Represents the behavior for control value clearing by performing "Shift+Home, Delete" keyboard shortcut.
            Note that "End" key is not pressed in the beginning of the shortcut, as the caret on element by default goes to the end.
            </summary>
        </member>
        <member name="M:Atata.ClearsValueUsingShiftHomeDeleteKeysAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.ValueClearBehaviorAttribute">
            <summary>
            Represents the base behavior class for an implementation of control value clearing.
            </summary>
        </member>
        <member name="M:Atata.ValueClearBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
        </member>
        <member name="T:Atata.GetsValueFromContentAttribute">
            <summary>
            Represents the behavior for control value getting from <see cref="P:Atata.IUIComponent`1.Content" /> property.
            </summary>
        </member>
        <member name="M:Atata.GetsValueFromContentAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Atata.GetsValueFromValueAttribute">
            <summary>
            Represents the behavior for control value getting from <c>value</c> attribute.
            </summary>
        </member>
        <member name="M:Atata.GetsValueFromValueAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Atata.ValueGetBehaviorAttribute">
            <summary>
            Represents the base behavior class for an implementation of control value getting.
            </summary>
        </member>
        <member name="M:Atata.ValueGetBehaviorAttribute.Execute``1(Atata.IUIComponent{``0})">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Atata.SetsValueUsingCharByCharTypingAttribute">
            <summary>
            Represents the behavior for control value set by clicking on the control element
            and then typing the text character by character with interval defined in <see cref="P:Atata.SetsValueUsingCharByCharTypingAttribute.TypingIntervalInSeconds" /> property.
            </summary>
        </member>
        <member name="P:Atata.SetsValueUsingCharByCharTypingAttribute.TypingIntervalInSeconds">
            <summary>
            Gets the typing interval in seconds.
            The default value is <c>0.2</c>.
            </summary>
        </member>
        <member name="T:Atata.SetsValueUsingClearAndSendKeysAttribute">
            <summary>
            Represents the behavior for control value set by invoking
            <see cref="M:OpenQA.Selenium.IWebElement.Clear" /> and <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> methods.
            <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method is invoked only when the value is not null or empty.
            </summary>
        </member>
        <member name="M:Atata.SetsValueUsingClearAndSendKeysAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute">
            <summary>
            Represents the behavior for control value set by executing <see cref="T:Atata.ValueClearBehaviorAttribute" /> behavior first;
            then, if value to set is not <see langword="null" /> or empty,
            executes <see cref="T:Atata.TextTypeBehaviorAttribute" /> behavior.
            </summary>
        </member>
        <member name="M:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute" /> class.
            </summary>
        </member>
        <member name="M:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute" /> class.
            </summary>
            <param name="useUIComponentScopeCache">If set to <c>true</c>, uses UI component scope cache.</param>
        </member>
        <member name="M:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Atata.SetsValueUsingScriptAttribute">
            <summary>
            Represents the behavior for control value set by executing
            <c>HTMLElement.value = '{value}'; HTMLElement.dispatchEvent(new Event('change'));</c> JavaScript.
            </summary>
        </member>
        <member name="M:Atata.SetsValueUsingScriptAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Atata.SetsValueUsingSendKeysAttribute">
            <summary>
            Represents the behavior for control value set by <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method.
            <see cref="M:OpenQA.Selenium.IWebElement.SendKeys(System.String)" /> method is invoked only when the value is not null or empty.
            </summary>
        </member>
        <member name="M:Atata.SetsValueUsingSendKeysAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Atata.ValueSetBehaviorAttribute">
            <summary>
            Represents the base behavior class for an implementation of control value set.
            </summary>
        </member>
        <member name="M:Atata.ValueSetBehaviorAttribute.Execute``1(Atata.IUIComponent{``0},System.String)">
            <summary>
            Executes the behavior implementation.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The UI component.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Atata.ICanUseCache">
            <summary>
            Provides a property that can enable/disable caching.
            </summary>
        </member>
        <member name="P:Atata.ICanUseCache.UsesCache">
            <summary>
            Gets a value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:Atata.UsesCacheAttribute">
            <summary>
            Specifies whether the component caching mechanics should be used.
            </summary>
        </member>
        <member name="P:Atata.UsesCacheAttribute.UsesCache">
            <summary>
            Gets a value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:Atata.UsesColumnHeaderTextsCacheAttribute">
            <summary>
            Specifies whether the column header texts cache of the
            <see cref="T:Atata.Table`3" /> control should be used.
            Caches a value when it is requested at first time,
            then returns the cached value on further requests.
            </summary>
        </member>
        <member name="P:Atata.UsesColumnHeaderTextsCacheAttribute.UsesCache">
            <summary>
            Gets a value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:Atata.UsesScopeCacheAttribute">
            <summary>
            Specifies whether the component scope cache mechanic should be used.
            Caches a scope element of a component when it is requested at first time,
            then returns the cached element instance on further scope requests.
            </summary>
        </member>
        <member name="P:Atata.UsesScopeCacheAttribute.UsesCache">
            <summary>
            Gets a value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:Atata.UsesValueCacheAttribute">
            <summary>
            Specifies whether the component value cache mechanic should be used.
            Caches a value of a component when it is requested at first time,
            then returns the cached value on further scope requests.
            </summary>
        </member>
        <member name="P:Atata.UsesValueCacheAttribute.UsesCache">
            <summary>
            Gets a value indicating whether the cache is enabled.
            </summary>
        </member>
        <member name="T:Atata.FindAttribute">
            <summary>
            Represents the base attribute class for the finding attributes.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Index">
            <summary>
            Gets or sets the index of the control.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent" />.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.OuterXPath">
            <summary>
            Gets or sets the outer XPath.
            The default value is <see langword="null" />, meaning that the control is searchable as descendant (using <c>".//"</c> XPath) in scope source.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Strategy">
            <summary>
            Gets or sets the strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeFindStrategy" />.
            The default value is <see langword="null" />, meaning that the default strategy of the specific <see cref="T:Atata.FindAttribute" /> should be used.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Timeout">
            <summary>
            Gets or sets the element find timeout in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.ElementFindTimeout" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.RetryInterval">
            <summary>
            Gets or sets the element find retry interval in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.ElementFindRetryInterval" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.As">
            <summary>
            Gets or sets the way this <see cref="T:Atata.FindAttribute" /> should be used.
            The default value is <see cref="F:Atata.FindAs.Scope" />.
            Each control can have 1 <see cref="T:Atata.FindAttribute" /> with <see cref="F:Atata.FindAs.Scope" /> value
            and many other <see cref="T:Atata.FindAttribute" />s with another <see cref="T:Atata.FindAs" /> values, which are used as layers.
            When several layer attributes are used,
            then <see cref="P:Atata.FindAttribute.Layer" /> property can be used to specify an order of each attribute.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Layer">
            <summary>
            Gets or sets the layer order of find attribute.
            It is useful to specify the order of the layer when several layers are used.
            This property is used only paired with <see cref="P:Atata.FindAttribute.As" /> property set to any value except <see cref="F:Atata.FindAs.Scope" />.
            The default value is <c>0</c>.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.DefaultStrategy">
            <summary>
            Gets the default strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeFindStrategy" />.
            </summary>
        </member>
        <member name="M:Atata.FindAttribute.CreateStrategy(Atata.UIComponentMetadata)">
            <summary>
            Creates the strategy.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>
            The strategy created.
            </returns>
        </member>
        <member name="T:Atata.FindAttributeExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.FindAttribute" />.
            </summary>
        </member>
        <member name="T:Atata.FindByAltAttribute">
            <summary>
            Specifies that a control should be found by the <c>alt</c> attribute.
            Finds the control that has the <c>alt</c> attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Sentence" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByAttributeAttribute">
            <summary>
            Specifies that a control should be found by the specified attribute.
            Finds the control that has the specified attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByChildContentAttribute">
            <summary>
            Specifies that a control should be found by the child content text.
            Finds the control having the child with the specified content.
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="P:Atata.FindByChildContentAttribute.ChildIndex">
            <summary>
            Gets or sets the index of the child element.
            The default value is <c>0</c>.
            </summary>
        </member>
        <member name="T:Atata.FindByClassAttribute">
            <summary>
            Specifies that a control should be found by class attribute.
            Finds the descendant or self control in the scope of the element having the specified class.
            Uses <see cref="F:Atata.TermCase.Kebab" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnHeaderAttribute">
            <summary>
            Specifies that a control should be found within the table column (<c>&lt;td&gt;</c>) that has the header (<c>&lt;th&gt;</c>) matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnIndexAttribute">
            <summary>
            Specifies that a control should be found within the table column (<c>&lt;td&gt;</c>) that has the nth index.
            </summary>
        </member>
        <member name="T:Atata.FindByContentAttribute">
            <summary>
            Specifies that a control should be found by the content text.
            Finds the control having the specified content.
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByContentOrValueAttribute">
            <summary>
            Specifies that a control should be found by the content text or value attribute.
            Finds the control that has the content or value attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByCssAttribute">
            <summary>
            Specifies that a control should be found by CSS selector.
            Finds the descendant or self control in the scope of the element found by the specified CSS selector.
            </summary>
        </member>
        <member name="P:Atata.FindByCssAttribute.Values">
            <summary>
            Gets the CSS selector values.
            </summary>
        </member>
        <member name="T:Atata.FindByDescendantAttributeAttribute">
            <summary>
            Specifies that a control should be found by the specified attribute of any control's descendant.
            Finds the control that has any descendant having specified attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByDescendantIdAttribute">
            <summary>
            Specifies that a control should be found by the id attribute of any control's descendant.
            Finds the control that has any descendant having id matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Kebab" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByDescriptionTermAttribute">
            <summary>
            Specifies that a control should be found by the description list term element.
            Finds the descendant control of the <c>&lt;dd&gt;</c> element in the scope of the <c>&lt;dl&gt;</c> element that has the <c>&lt;dt&gt;</c> element matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByFieldSetAttribute">
            <summary>
            Specifies that a control should be found by the parent fieldset element.
            Finds the descendant control in the scope of the <c>&lt;fieldset&gt;</c> element that has the <c>&lt;legend&gt;</c> element matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByIdAttribute">
            <summary>
            Specifies that a control should be found by id attribute.
            Finds the descendant or self control in the scope of the element having the specified id.
            Uses <see cref="F:Atata.TermCase.Kebab" /> as the default term case.
            </summary>
        </member>
        <member name="P:Atata.FindByIdAttribute.DefaultCase">
            <summary>
            Gets the default term case.
            The default value is <see cref="F:Atata.TermCase.Kebab" />.
            </summary>
        </member>
        <member name="T:Atata.FindByIndexAttribute">
            <summary>
            Specifies that a control should use the nth occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindByLabelAttribute">
            <summary>
            Specifies that a control should be found by the label element.
            Finds the <c>&lt;label&gt;</c> element by the specified term(s), then finds the bound control (for example, by label's <c>for</c> attribute referencing the element of the control by id).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByNameAttribute">
            <summary>
            Specifies that a control should be found by name attribute.
            Finds the descendant or self control in the scope of the element having the specified name.
            Uses <see cref="F:Atata.TermCase.Kebab" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByPlaceholderAttribute">
            <summary>
            Specifies that a control should be found by the placeholder attribute.
            Finds the control that has the placeholder attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByScriptAttribute">
            <summary>
            Specifies that a control should be found by specific script.
            The script should return an element or collection of elements.
            The script can also return <c>null</c> for the case when the element is not found.
            The scope element is passed to the script as an argument and can be used in the script as <c>arguments[0]</c>.
            </summary>
            <example>
            <code>
            [FindByScript("return document.querySelector('input[type=radio][value=OptionA]')")]
            public RadioButton&lt;_&gt; OptionA { get; private set; }
            </code>
            </example>
        </member>
        <member name="P:Atata.FindByScriptAttribute.Script">
            <summary>
            Gets the script.
            </summary>
        </member>
        <member name="T:Atata.FindByTitleAttribute">
            <summary>
            Specifies that a control should be found by the title attribute.
            Finds the control that has the title attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByValueAttribute">
            <summary>
            Specifies that a control should be found by the value attribute.
            Finds the control that has the value attribute matching the specified term(s).
            Uses <see cref="F:Atata.TermCase.Title" /> as the default term case.
            </summary>
        </member>
        <member name="T:Atata.FindByXPathAttribute">
            <summary>
            Specifies that a control should be found by XPath.
            Finds the descendant or self control in the scope of the element found by the specified XPath.
            </summary>
        </member>
        <member name="P:Atata.FindByXPathAttribute.Values">
            <summary>
            Gets the XPath values.
            </summary>
        </member>
        <member name="T:Atata.FindFirstAttribute">
            <summary>
            Indicates that a control should use the first occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindLastAttribute">
            <summary>
            Indicates that a control should use the last occurring element matching the control's definition.
            </summary>
        </member>
        <member name="T:Atata.FindOnlyVisibleAttribute">
            <summary>
            Sets <see cref="P:Atata.FindSettingsAttribute.Visibility" /> property to <see cref="F:Atata.Visibility.Visible" />.
            Also can define additional finding settings to apply to the targeted control(s).
            Adds to or overrides properties of <see cref="T:Atata.FindAttribute" />.
            </summary>
        </member>
        <member name="T:Atata.FindSettingsAttribute">
            <summary>
            Defines the finding settings to apply to the targeted control(s).
            Adds to or overrides properties of <see cref="T:Atata.FindAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Index">
            <summary>
            Gets or sets the index of the control.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent" />.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.OuterXPath">
            <summary>
            Gets or sets the outer XPath.
            The default value is null, meaning that the control is searchable as descendant (using ".//" XPath) in scope source.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Strategy">
            <summary>
            Gets or sets the strategy type for the control search.
            Strategy type should implement <see cref="T:Atata.IComponentScopeFindStrategy" />.
            The default value is <see langword="null" />, meaning that the default strategy of the specific <see cref="T:Atata.FindAttribute" /> should be used.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Timeout">
            <summary>
            Gets or sets the element find timeout in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.ElementFindTimeout" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.RetryInterval">
            <summary>
            Gets or sets the element find retry interval in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.ElementFindRetryInterval" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="T:Atata.TermFindAttribute">
            <summary>
            Represents the base attribute class for the finding attributes that use terms.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Values">
            <summary>
            Gets the term values.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut
            considering the <see cref="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings" /> property value
            of <see cref="T:Atata.ControlDefinitionAttribute" /> and <see cref="T:Atata.PageObjectDefinitionAttribute" />.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.DefaultCase">
            <summary>
            Gets the default term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindAttribute.DefaultMatch">
            <summary>
            Gets the default match.
            The default value is <see cref="F:Atata.TermMatch.Equals" />.
            </summary>
        </member>
        <member name="T:Atata.TermFindSettingsAttribute">
            <summary>
            Defines the term settings to apply for the specified finding strategy of a control.
            Adds to or overrides properties of <see cref="T:Atata.TermFindAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Case">
            <summary>
            Gets or sets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Match">
            <summary>
            Gets or sets the match.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:Atata.TermFindSettingsAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut
            considering the <c>IgnoreNameEndings</c> property value of <see cref="T:Atata.ControlDefinitionAttribute" /> and <see cref="T:Atata.PageObjectDefinitionAttribute" />.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="T:Atata.CultureAttribute">
            <summary>
            Specifies the culture of the component.
            </summary>
        </member>
        <member name="P:Atata.CultureAttribute.Value">
            <summary>
            Gets the culture value.
            </summary>
        </member>
        <member name="T:Atata.ControlDefinitionAttribute">
            <summary>
            Specifies the definition of the control, like scope XPath, visibility, component type name, etc.
            </summary>
        </member>
        <member name="P:Atata.ControlDefinitionAttribute.Visibility">
            <summary>
            Gets or sets the visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
        </member>
        <member name="T:Atata.PageObjectDefinitionAttribute">
            <summary>
            Specifies the definition of the page object, like scope XPath, component type name, etc.
            </summary>
        </member>
        <member name="T:Atata.ScopeDefinitionAttribute">
            <summary>
            Represents the base attribute class for component scope definition.
            The basic definition is represented with XPath.
            </summary>
        </member>
        <member name="F:Atata.ScopeDefinitionAttribute.DefaultScopeXPath">
            <summary>
            The default scope XPath, which is <c>"*"</c>.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ScopeXPath">
            <summary>
            Gets the XPath of the scope element which is a combination of XPath passed through the constructor and <see cref="P:Atata.ScopeDefinitionAttribute.ContainingClasses" /> property values.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ContainingClass">
            <summary>
            Gets or sets the containing CSS class name.
            </summary>
        </member>
        <member name="P:Atata.ScopeDefinitionAttribute.ContainingClasses">
            <summary>
            Gets or sets the containing CSS class names.
            Multiple class names are used in XPath as conditions joined with <c>and</c> operator.
            </summary>
        </member>
        <member name="M:Atata.ScopeDefinitionAttribute.BuildScopeXPath">
            <summary>
            Builds the complete XPath of the scope element which is a combination of XPath passed through the constructor and <see cref="P:Atata.ScopeDefinitionAttribute.ContainingClasses" /> property values.
            </summary>
            <returns>The built XPath.</returns>
        </member>
        <member name="T:Atata.UIComponentDefinitionAttribute">
            <summary>
            Represents the base attribute class for UI component (page object, control) definition.
            </summary>
        </member>
        <member name="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName">
            <summary>
            Gets or sets the name of the component type.
            It is used in report log messages to describe the component type.
            </summary>
        </member>
        <member name="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings">
            <summary>
            Gets or sets the property name endings to ignore/truncate.
            Accepts a string containing a set of values separated by comma, for example <c>"Button,Link"</c>.
            </summary>
        </member>
        <member name="M:Atata.UIComponentDefinitionAttribute.GetIgnoreNameEndingValues">
            <summary>
            Gets the values of property name endings to ignore.
            </summary>
            <returns>An array of name endings to ignore.</returns>
        </member>
        <member name="M:Atata.UIComponentDefinitionAttribute.NormalizeNameIgnoringEnding(System.String)">
            <summary>
            Normalizes the name considering value of <see cref="P:Atata.UIComponentDefinitionAttribute.IgnoreNameEndings" />.
            </summary>
            <param name="name">The name.</param>
            <returns>Normalized name.</returns>
        </member>
        <member name="P:Atata.ExtraXPathAttribute.RawXPath">
            <summary>
            Gets the raw XPath.
            </summary>
        </member>
        <member name="P:Atata.ExtraXPathAttribute.XPath">
            <summary>
            Gets the XPath prepended with <c>"/"</c>, if it can be applied.
            </summary>
        </member>
        <member name="T:Atata.FormatAttribute">
            <summary>
            Specifies the data format of the control.
            </summary>
        </member>
        <member name="P:Atata.FormatAttribute.Value">
            <summary>
            Gets the format value.
            </summary>
        </member>
        <member name="T:Atata.GoTemporarilyAttribute">
            <summary>
            Spicifies whether to temporarily navigate to page object.
            </summary>
        </member>
        <member name="T:Atata.MulticastAttribute">
            <summary>
            Represents the base class for Atata attributes that can be applied to component at any level (declared, parent component, assembly, global and component).
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetNames">
            <summary>
            Gets or sets the target component names.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetName">
            <summary>
            Gets or sets the target component name.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetTypes">
            <summary>
            Gets or sets the target component types.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetType">
            <summary>
            Gets or sets the target component type.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetTags">
            <summary>
            Gets or sets the target component tags.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetTag">
            <summary>
            Gets or sets the target component tag.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetParentTypes">
            <summary>
            Gets or sets the target component's parent types.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetParentType">
            <summary>
            Gets or sets the target component's parent type.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetNames">
            <summary>
            Gets or sets the target component names to exlcude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetName">
            <summary>
            Gets or sets the target component name to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetTypes">
            <summary>
            Gets or sets the target component types to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetType">
            <summary>
            Gets or sets the target component type to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetTags">
            <summary>
            Gets or sets the target component tags to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetTag">
            <summary>
            Gets or sets the target component tag to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetParentTypes">
            <summary>
            Gets or sets the target component's parent types to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.ExcludeTargetParentType">
            <summary>
            Gets or sets the target component's parent type to exclude.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetSelf">
            <summary>
            Gets or sets a value indicating whether to target the component where this attribute is declared.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetSelfAndChildren">
            <summary>
            Gets or sets a value indicating whether to target the component where this attribute is declared and its children.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.IsTargetSpecified">
            <summary>
            Gets a value indicating whether this instance has any target specified.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetAnyType">
            <summary>
            Gets or sets a value indicating whether any type is targeted.
            When is set to <see langword="true" />, sets <c>typeof(object)</c> to <see cref="P:Atata.MulticastAttribute.TargetType" /> property.
            When is set to <see langword="false" />, sets <see langword="null" /> to <see cref="P:Atata.MulticastAttribute.TargetType" /> property.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetAllChildren">
            <summary>
            Gets or sets a value indicating whether all children are targeted.
            Actually, is a wrapper over the <see cref="P:Atata.MulticastAttribute.TargetAnyType" /> property.
            </summary>
        </member>
        <member name="P:Atata.MulticastAttribute.TargetChildren">
            <summary>
            Gets or sets a value indicating whether children are targeted.
            </summary>
        </member>
        <member name="M:Atata.MulticastAttribute.IsNameApplicable(System.String)">
            <summary>
            Determines whether the component name applies the name criteria.
            </summary>
            <param name="name">The component name.</param>
            <returns>
            <see langword="true" /> if the name applies the criteria; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Atata.MulticastAttribute.AreTagsApplicable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the component tags apply the tag criteria.
            </summary>
            <param name="tags">The component tags.</param>
            <returns>
            <see langword="true" /> if the tags apply the criteria; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Atata.MulticastAttribute.CalculateTargetRank(Atata.UIComponentMetadata)">
            <summary>
            Calculates the target rank.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>The rank.</returns>
        </member>
        <member name="T:Atata.NameAttribute">
            <summary>
            Specifies the name of the component.
            </summary>
        </member>
        <member name="P:Atata.NameAttribute.Value">
            <summary>
            Gets the name value.
            </summary>
        </member>
        <member name="T:Atata.NavigationPageObjectCreatorAttribute">
            <summary>
            Specifies the function that creates a page object for navigation.
            </summary>
        </member>
        <member name="P:Atata.NavigationPageObjectCreatorAttribute.Creator">
            <summary>
            Gets the creator function.
            </summary>
        </member>
        <member name="T:Atata.RandomizeCountAttribute">
            <summary>
            Specifies the count of items to randomize.
            </summary>
            <remarks>
            It can be useful for <see cref="T:Atata.CheckBoxList`2" /> to set the number of checkboxes to check.
            </remarks>
        </member>
        <member name="P:Atata.RandomizeCountAttribute.Min">
            <summary>
            Gets the minimum count.
            </summary>
        </member>
        <member name="P:Atata.RandomizeCountAttribute.Max">
            <summary>
            Gets the maximum count.
            </summary>
        </member>
        <member name="T:Atata.RandomizeExcludeAttribute">
            <summary>
            Specifies the values to exlude during randomization.
            </summary>
        </member>
        <member name="T:Atata.RandomizeIncludeAttribute">
            <summary>
            Specifies the values to choose during randomization.
            </summary>
        </member>
        <member name="T:Atata.RandomizeNumberSettingsAttribute">
            <summary>
            Specifies the settings for number randomization.
            </summary>
        </member>
        <member name="P:Atata.RandomizeNumberSettingsAttribute.Min">
            <summary>
            Gets the minimum boundary value.
            </summary>
        </member>
        <member name="P:Atata.RandomizeNumberSettingsAttribute.Max">
            <summary>
            Gets the maximum boundary value.
            </summary>
        </member>
        <member name="P:Atata.RandomizeNumberSettingsAttribute.Precision">
            <summary>
            Gets the precision.
            </summary>
        </member>
        <member name="T:Atata.RandomizeStringSettingsAttribute">
            <summary>
            Specifies the settings for string randomization.
            </summary>
        </member>
        <member name="P:Atata.RandomizeStringSettingsAttribute.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Atata.RandomizeStringSettingsAttribute.NumberOfCharacters">
            <summary>
            Gets the number of characters to randomize.
            </summary>
        </member>
        <member name="T:Atata.TagAttribute">
            <summary>
            Specifies the tag(s) of the component.
            </summary>
        </member>
        <member name="P:Atata.TagAttribute.Values">
            <summary>
            Gets the tag values.
            </summary>
        </member>
        <member name="T:Atata.TermAttribute">
            <summary>
            Specifies the term(s) to use for the control search.
            </summary>
        </member>
        <member name="P:Atata.TermAttribute.Values">
            <summary>
            Gets the term values.
            </summary>
        </member>
        <member name="P:Atata.TermAttribute.CutEnding">
            <summary>
            Gets or sets a value indicating whether the name should be cut
            considering the IgnoreNameEndings property value
            of <see cref="T:Atata.ControlDefinitionAttribute" /> and <see cref="T:Atata.PageObjectDefinitionAttribute" />.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="T:Atata.TermSettingsAttribute">
            <summary>
            Specifies the term settings.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="T:Atata.TraceLogAttribute">
            <summary>
            Indicates that component log messages should be written with <see cref="F:Atata.LogLevel.Trace" /> log level instead of <see cref="F:Atata.LogLevel.Info" />.
            Attribute is useful for sub-controls of complex controls to keep info log cleaner by skipping sub-control interactional log messages.
            </summary>
        </member>
        <member name="T:Atata.BlurAttribute">
            <summary>
            Indicates that the control blurring (removing focus) should be performed on the specified event.
            By default occurs after set.
            </summary>
        </member>
        <member name="T:Atata.ClearCacheAttribute">
            <summary>
            Indicates that the component's cache should be cleared on the specified event.
            By default occurs after click or set.
            </summary>
        </member>
        <member name="P:Atata.ClearCacheAttribute.Of">
            <summary>
            Gets or sets the target component whose cache should be cleared.
            The default value is <see cref="F:Atata.ClearCacheTarget.Self" />.
            </summary>
        </member>
        <member name="P:Atata.ClearCacheAttribute.OnlyDescendants">
            <summary>
            Gets or sets a value indicating whether to clear a cache of only descendant components (excluding self component).
            </summary>
        </member>
        <member name="T:Atata.ClearCacheTarget">
            <summary>
            Specifies the target component whose cache should be cleared.
            </summary>
        </member>
        <member name="F:Atata.ClearCacheTarget.Self">
            <summary>
            Targets self component.
            </summary>
        </member>
        <member name="F:Atata.ClearCacheTarget.Parent">
            <summary>
            Targets parent component.
            </summary>
        </member>
        <member name="F:Atata.ClearCacheTarget.Grandparent">
            <summary>
            Targets grandparent component.
            </summary>
        </member>
        <member name="F:Atata.ClearCacheTarget.GreatGrandparent">
            <summary>
            Targets great grandparent component.
            </summary>
        </member>
        <member name="F:Atata.ClearCacheTarget.PageObject">
            <summary>
            Targets the page object.
            </summary>
        </member>
        <member name="T:Atata.ClearValueAttribute">
            <summary>
            Indicates to clear the value on the specified event.
            By default occurs before the set.
            </summary>
        </member>
        <member name="T:Atata.ClickParentAttribute">
            <summary>
            Indicates that the click on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the drop-down button/menu controls.
            </summary>
        </member>
        <member name="T:Atata.CloseAlertBoxAttribute">
            <summary>
            Indicates that the alert box should be closed on the specified event.
            Be default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.CloseConfirmBoxAttribute">
            <summary>
            Indicates that the confirm box should be closed on the specified event.
            Be default occurs after the click.
            By default accepts the confirm box.
            </summary>
        </member>
        <member name="T:Atata.FocusAttribute">
            <summary>
            Indicates that the focusing on the control should be performed on the specified event.
            By default occurs before set.
            </summary>
        </member>
        <member name="T:Atata.HoverParentAttribute">
            <summary>
            Indicates that the hover on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the drop-down menu item controls.
            </summary>
        </member>
        <member name="T:Atata.InvokeDelegateAttribute">
            <summary>
            Defines the delegate to invoke on the specified event.
            </summary>
        </member>
        <member name="P:Atata.InvokeDelegateAttribute.ActionDelegate">
            <summary>
            Gets the action delegate.
            </summary>
        </member>
        <member name="T:Atata.InvokeMethodAttribute">
            <summary>
            Defines the method to invoke on the specified event.
            </summary>
        </member>
        <member name="P:Atata.InvokeMethodAttribute.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="T:Atata.LogInfoAttribute">
            <summary>
            Defines the information message to be logged on the specified event.
            </summary>
        </member>
        <member name="T:Atata.PressEndAttribute">
            <summary>
            Indicates that the End key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressEnterAttribute">
            <summary>
            Indicates that the Enter key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressEscapeAttribute">
            <summary>
            Indicates that the Escape key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressHomeAttribute">
            <summary>
            Indicates that the Home key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressKeysAttribute">
            <summary>
            Defines the keys to press on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.PressTabAttribute">
            <summary>
            Indicates that the Tab key should be pressed on the specified event.
            By default occurs after the set.
            </summary>
        </member>
        <member name="T:Atata.RightClickParentAttribute">
            <summary>
            Indicates that the right click on the parent component should occur on the specified event.
            By default occurs before any access to the component.
            Is useful for the context menu item controls.
            </summary>
        </member>
        <member name="T:Atata.ScreenshotAttribute">
            <summary>
            Indicates that the screenshot should be captured with an optional title.
            By default occurs before the click.
            </summary>
        </member>
        <member name="T:Atata.ScrollDownAttribute">
            <summary>
            Indicates that the scroll down should be performed on the specified event.
            By default occurs before any access to the component.
            </summary>
        </member>
        <member name="T:Atata.ScrollToAttribute">
            <summary>
            Indicates that the scrolling to the control should be performed on the specified event.
            By default occurs before: set, click, hover and focus.
            </summary>
        </member>
        <member name="T:Atata.ScrollUpAttribute">
            <summary>
            Indicates that the scroll up should be performed on the specified event.
            By default occurs before any access to the component.
            </summary>
        </member>
        <member name="T:Atata.TermVerificationTriggerAttribute">
            <summary>
            The base trigger attribute class that can be used in the verification process when the page object is initialized.
            </summary>
        </member>
        <member name="T:Atata.TriggerAttribute">
            <summary>
            Represents the base attribute class for the triggers.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.On">
            <summary>
            Gets or sets the trigger events.
            </summary>
        </member>
        <member name="P:Atata.TriggerAttribute.Priority">
            <summary>
            Gets or sets the priority.
            The default value is <see cref="F:Atata.TriggerPriority.Medium" />.
            </summary>
        </member>
        <member name="M:Atata.TriggerAttribute.Execute``1(Atata.TriggerContext{``0})">
            <summary>
            Executes the specified trigger action.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
        </member>
        <member name="T:Atata.VerifyContentAttribute">
            <summary>
            Specifies the verification of the page content.
            Verifies whether the component contains the specified content values.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyContentMatchesAttribute">
            <summary>
            Specifies the verification of the page content.
            Verifies whether the component content matches any of the specified values.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyExistsAttribute">
            <summary>
            Indicates that the component should be verified whether it exists on the specified event.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyH1Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h1&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH2Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h2&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH3Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h3&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH4Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h4&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH5Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h5&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyH6Attribute">
            <summary>
            Specifies the verification of the <c>&lt;h6&gt;</c> element content.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="P:Atata.VerifyHeadingTriggerAttribute.Index">
            <summary>
            Gets or sets the index of header.
            The default value is <c>-1</c>, meaning that the index is not used.
            </summary>
        </member>
        <member name="T:Atata.VerifyMissingAttribute">
            <summary>
            Indicates that the component should be verified whether it is missing on the specified event.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.VerifyTitleAttribute">
            <summary>
            Specifies the verification of the page title.
            By default occurs upon the page object initialization.
            If no value is specified, it uses the class name as the expected value with the <see cref="F:Atata.TermCase.Title" /> casing applied.
            </summary>
        </member>
        <member name="T:Atata.VerifyTitleSettingsAttribute">
            <summary>
            Defines the settings to apply for the <see cref="T:Atata.VerifyTitleAttribute" /> trigger.
            </summary>
        </member>
        <member name="T:Atata.WaitForAlertBoxAttribute">
            <summary>
            Indicates to wait for an alert box to be present on the specified event.
            Be default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.WaitForAngularJSAjaxAttribute">
            <summary>
            Indicates that the waiting should be performed until the AngularJS (v1.*) AJAX is completed.
            By default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.WaitForAttribute">
            <summary>
            Specifies the condition of the component to wait for.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="M:Atata.WaitForAttribute.#ctor(Atata.Until,Atata.TriggerEvents,Atata.TriggerPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.WaitForAttribute" /> class.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="on">The trigger events.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Atata.WaitForDocumentReadyStateAttribute">
            <summary>
            Indicates that the waiting should be performed until the document is ready/loaded.
            By default occurs upon the page object initialization.
            </summary>
        </member>
        <member name="T:Atata.WaitForElementAttribute">
            <summary>
            Specifies the waiting for the element.
            By default occurs after the click.
            </summary>
        </member>
        <member name="M:Atata.WaitForElementAttribute.#ctor(Atata.WaitBy,System.String,Atata.Until,Atata.TriggerEvents,Atata.TriggerPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.WaitForElementAttribute" /> class.
            </summary>
            <param name="waitBy">The kind of the element selector to wait for.</param>
            <param name="selector">The selector.</param>
            <param name="until">The waiting condition.</param>
            <param name="on">The trigger events.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:Atata.WaitForElementAttribute.WaitBy">
            <summary>
            Gets the kind of the element selector to wait for.
            </summary>
        </member>
        <member name="P:Atata.WaitForElementAttribute.Selector">
            <summary>
            Gets the selector.
            </summary>
        </member>
        <member name="P:Atata.WaitForElementAttribute.ScopeSource">
            <summary>
            Gets or sets the scope source.
            The default value is <see cref="F:Atata.ScopeSource.Parent" />.
            </summary>
        </member>
        <member name="T:Atata.WaitForJQueryAjaxAttribute">
            <summary>
            Indicates that the waiting should be performed until the jQuery AJAX is completed.
            By default occurs after the click.
            </summary>
        </member>
        <member name="T:Atata.WaitForScriptAttribute">
            <summary>
            Represents the base trigger attribute for a waiting for script to be executed successfully.
            An inherited class should override <c>BuildScript</c> method and optionally <c>BuildReportMessage</c>.
            </summary>
        </member>
        <member name="M:Atata.WaitForScriptAttribute.BuildReportMessage``1(Atata.TriggerContext{``0})">
            <summary>
            Builds the report message.
            The default message is <c>"Wait for script"</c>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
            <returns>The message or <see langword="null" />.</returns>
        </member>
        <member name="M:Atata.WaitForScriptAttribute.BuildScript``1(Atata.TriggerContext{``0})">
            <summary>
            Builds the script to wait until it returns <c>true</c>.
            The script should return <see langword="true" /> or <see langword="false" />.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="context">The trigger context.</param>
            <returns>The script.</returns>
        </member>
        <member name="T:Atata.WaitingTriggerAttribute">
            <summary>
            Represents the base trigger attribute for a waiting functionality.
            </summary>
        </member>
        <member name="P:Atata.WaitingTriggerAttribute.Timeout">
            <summary>
            Gets or sets the waiting timeout in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.WaitingTimeout" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="P:Atata.WaitingTriggerAttribute.RetryInterval">
            <summary>
            Gets or sets the retry interval in seconds.
            The default value is taken from <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> property of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="T:Atata.WaitSecondsAttribute">
            <summary>
            Specifies the waiting period in seconds.
            By default occurs after any action.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.Until">
            <summary>
            Gets the waiting approach.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.ThrowOnPresenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the presence (exists or visible) failure.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.ThrowOnAbsenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the absence (missing or hidden) failure.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.PresenceTimeout">
            <summary>
            Gets or sets the presence (exists or visible) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.RetryTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.AbsenceTimeout">
            <summary>
            Gets or sets the absence (missing or hidden) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.RetryTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.RetryInterval">
            <summary>
            Gets or sets the retry interval.
            The default value is taken from <c>AtataContext.Current.RetryInterval.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitUntilAttribute.WaitOptions">
            <summary>
            Gets the wait options.
            </summary>
        </member>
        <member name="T:Atata.WaitUntilEnabledAttribute">
            <summary>
            Specifies the waiting for the control to become enabled.
            By default occurs before the click and before the set.
            </summary>
        </member>
        <member name="T:Atata.UrlAttribute">
            <summary>
            Specifies the URL to navigate to during initialization of page object.
            Applies to page object types.
            </summary>
        </member>
        <member name="P:Atata.UrlAttribute.Url">
            <summary>
            Gets the URL to navigate to.
            </summary>
        </member>
        <member name="T:Atata.ValueGetFormatAttribute">
            <summary>
            Specifies the data format to use for getting the value of the control.
            Can override control's <see cref="T:Atata.FormatAttribute" />, but only for getting the value.
            </summary>
        </member>
        <member name="P:Atata.ValueGetFormatAttribute.Value">
            <summary>
            Gets the format value.
            </summary>
        </member>
        <member name="T:Atata.ValueSetFormatAttribute">
            <summary>
            Specifies the data format to use for setting the value to the control.
            Can override control's <see cref="T:Atata.FormatAttribute" />, but only for setting the value.
            </summary>
        </member>
        <member name="P:Atata.ValueSetFormatAttribute.Value">
            <summary>
            Gets the format value.
            </summary>
        </member>
        <member name="T:Atata.WindowTitleAttribute">
            <summary>
            Specifies the window title of <see cref="T:Atata.PopupWindow`1" /> page object.
            This title can be used to identify the popup window among others when there can be several opened popups at the same time.
            It is used by <see cref="T:Atata.PopupWindow`1" /> together with <see cref="T:Atata.WindowTitleElementDefinitionAttribute" />.
            </summary>
            <seealso cref="T:Atata.PopupWindow`1" />
            <seealso cref="T:Atata.WindowTitleElementDefinitionAttribute" />
        </member>
        <member name="T:Atata.WindowTitleElementDefinitionAttribute">
            <summary>
            Specifies the definition of the window title element which belongs to <see cref="T:Atata.PopupWindow`1" />.
            It is used by <see cref="T:Atata.PopupWindow`1" /> together with <see cref="T:Atata.WindowTitleAttribute" />.
            </summary>
            <seealso cref="T:Atata.PopupWindow`1" />
            <seealso cref="T:Atata.WindowTitleAttribute" />
        </member>
        <member name="T:Atata.AssociatedControlList`2">
            <summary>
            Represents the list of associated controls of <typeparamref name="TItem" /> type.
            Provides functionality to get associated/dependent <typeparamref name="TItem" /> control to another control.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.AssociatedControlList`2.Item(System.Func{`1,Atata.Control{`1}})">
            <summary>
            Gets the <typeparamref name="TItem" /> control associated with the control specified in <paramref name="controlSelector" />.
            </summary>
            <param name="controlSelector">The control selector.</param>
            <returns>The <typeparamref name="TItem" /> control associated with the control specified in <paramref name="controlSelector" />.</returns>
        </member>
        <member name="M:Atata.AssociatedControlList`2.For(System.Func{`1,Atata.Control{`1}})">
            <summary>
            Gets the <typeparamref name="TItem" /> control associated with the control specified in <paramref name="controlSelector" />.
            </summary>
            <param name="controlSelector">The control selector.</param>
            <returns>The <typeparamref name="TItem" /> control associated with the control specified in <paramref name="controlSelector" />.</returns>
        </member>
        <member name="M:Atata.AssociatedControlList`2.CreateAssociatedControl(Atata.Control{`1})">
            <summary>
            Creates an instance of <typeparamref name="TItem" /> control that is associated with the <paramref name="control" /> argument.
            </summary>
            <param name="control">The control for which the associated control is to be created.</param>
            <returns>The <typeparamref name="TItem" /> control.</returns>
        </member>
        <member name="T:Atata.Button`1">
            <summary>
            Represents the button control.
            Default search is performed by the content and value (button by content text and input by value attribute).
            Handles any input element with <c>type="button"</c>, <c>type="submit"</c>, <c>type="reset"</c> or <c>button</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Button`2">
            <summary>
            Represents the button control.
            Default search is performed by the content and value (button by content text and input by value attribute).
            Handles any input element with <c>type="button"</c>, <c>type="submit"</c>, <c>type="reset"</c> or <c>button</c> element.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Button`1" />
            <seealso cref="T:Atata.INavigable`2" />
        </member>
        <member name="T:Atata.Clickable`1">
            <summary>
            Represents any HTML element.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Clickable`2">
            <summary>
            Represents any HTML element.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.ClickableDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Clickable`1" /> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Clickable`1" />
        </member>
        <member name="T:Atata.ClickableDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Clickable`2" /> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Clickable`2" />
        </member>
        <member name="T:Atata.LinkDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Link`1" /> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Link`1" />
        </member>
        <member name="T:Atata.LinkDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Link`2" /> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Link`2" />
        </member>
        <member name="T:Atata.ButtonDelegate`1">
            <summary>
            Represents the <see cref="T:Atata.Button`1" /> delegate.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the owner page object.</returns>
            <seealso cref="T:Atata.Button`1" />
        </member>
        <member name="T:Atata.ButtonDelegate`2">
            <summary>
            Represents the <see cref="T:Atata.Button`2" /> delegate.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <returns>The instance of the <typeparamref name="TNavigateTo" /> page object.</returns>
            <seealso cref="T:Atata.Button`2" />
        </member>
        <member name="T:Atata.ControlList`2">
            <summary>
            Represents the list of controls of <typeparamref name="TItem" /> type.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.ControlList`2.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Count">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of controls count.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Contents">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of controls contents.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Item(System.Int32)">
            <summary>
            Gets the control at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Atata.ControlList`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the control that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetByXPathCondition(System.String)">
            <summary>
            Gets the control that matches the specified XPath condition.
            </summary>
            <param name="xPathCondition">
            The XPath condition.
            For example: <c>"@some-attr='some value'"</c>.</param>
            <returns>The first item that matches the XPath condition.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetByXPathCondition(System.String,System.String)">
            <summary>
            Gets the control that matches the specified XPath condition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="xPathCondition">
            The XPath condition.
            For example: <c>"@some-attr='some value'"</c>.</param>
            <returns>The first item that matches the XPath condition.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetAllByXPathCondition(System.String)">
            <summary>
            Gets all controls of this list that match the specified XPath condition.
            </summary>
            <param name="xPathCondition">
            The XPath condition.
            For example: <c>"@some-attr='some value'"</c>.</param>
            <returns>All items that match the XPath condition.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetAllByXPathCondition(System.String,System.String)">
            <summary>
            Gets all controls of this list that match the specified XPath condition.
            </summary>
            <param name="itemsName">Name of the items to use in reporting.</param>
            <param name="xPathCondition">
            The XPath condition.
            For example: <c>"@some-attr='some value'"</c>.</param>
            <returns>All items that match the XPath condition.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetCount">
            <summary>
            Gets the controls count.
            </summary>
            <returns>The count of controls.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetContents">
            <summary>
            Gets the controls contents.
            </summary>
            <returns>The contents of controls.</returns>
        </member>
        <member name="M:Atata.ControlList`2.IndexOf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Searches for the item that matches the conditions defined by the specified predicate expression
            and returns the zero-based index of the first occurrence.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>
            The <see cref="T:Atata.ValueProvider`2" /> containing zero-based index
            of the first occurrence of item, if found; otherwise, <c>–1</c>.
            </returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectData``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Selects the specified data (property) set of each control.
            Data can be a sub-control, an instance of <see cref="T:Atata.ValueProvider`2" />, etc.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="selector">The data selector.</param>
            <returns>An instance of <see cref="T:Atata.ValueProvider`2" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectData``1(System.String,System.String,Atata.TermOptions)">
            <summary>
            Selects the data of each control using JavaScript path relative to control element.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="elementValueJSPath">
            The JavaScript path to the element value,
            for example: <c>getAttribute('data-id')</c>.
            </param>
            <param name="valueProviderName">Name of the value provider to use in reporting.</param>
            <param name="valueTermOptions">The term options of value.</param>
            <returns>An instance of <see cref="T:Atata.ValueProvider`2" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectDataByExtraXPath``1(System.String,System.String,System.String,Atata.TermOptions)">
            <summary>
            Selects the data of each control using JavaScript path relative to element
            that is found using additional <paramref name="elementXPath" />.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="elementXPath">The element XPath.</param>
            <param name="elementValueJSPath">
            The JavaScript path to the element value,
            for example: <c>getAttribute('data-id')</c>.
            </param>
            <param name="valueProviderName">Name of the value provider to use in reporting.</param>
            <param name="valueTermOptions">The term options of value.</param>
            <returns>An instance of <see cref="T:Atata.ValueProvider`2" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectContentsByExtraXPath(System.String,System.String,Atata.TermOptions)">
            <summary>
            Selects the content of each control relative to element
            that is found using additional <paramref name="elementXPath" />.
            </summary>
            <param name="elementXPath">The element XPath.</param>
            <param name="valueProviderName">Name of the value provider to use in reporting.</param>
            <param name="valueTermOptions">The term options of value.</param>
            <returns>An instance of <see cref="T:Atata.ValueProvider`2" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.SelectContentsByExtraXPath``1(System.String,System.String,Atata.TermOptions)">
            <summary>
            Selects the content of each control relative to element
            that is found using additional <paramref name="elementXPath" />.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="elementXPath">The element XPath.</param>
            <param name="valueProviderName">Name of the value provider to use in reporting.</param>
            <param name="valueTermOptions">The term options of value.</param>
            <returns>An instance of <see cref="T:Atata.ValueProvider`2" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Atata.ControlList`2.AsEnumerable">
            <summary>
            Returns the controls as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <returns>The controls as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="M:Atata.ControlList`2.ClearCache">
            <summary>
            Clears the cache of the controls.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.Control`1">
            <summary>
            Represents the base class for the controls.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Control`1.Context">
            <summary>
            Gets the <see cref="T:Atata.AtataContext" /> instance with which this component is associated.
            </summary>
        </member>
        <member name="P:Atata.Control`1.ScopeSource">
            <summary>
            Gets the source of the scope.
            The default value is <see cref="F:Atata.ScopeSource.Parent" />.
            </summary>
        </member>
        <member name="P:Atata.Control`1.IsEnabled">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> for the value
            indicating whether the control is enabled.
            </summary>
        </member>
        <member name="P:Atata.Control`1.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.Control`1.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.Control`1.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.Control`1.Click">
            <summary>
            Clicks the control.
            Executes an associated with the component <see cref="T:Atata.ClickBehaviorAttribute" />
            that is <see cref="T:Atata.ClicksUsingClickMethodAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnClick">
            <summary>
            Clicks the control by executing <see cref="T:Atata.ClickBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.ClickAndGo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo" /> type.
            Executes an associated with the component <see cref="T:Atata.ClickBehaviorAttribute" />
            that is <see cref="T:Atata.ClicksUsingClickMethodAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="navigateToPageObject">The page object instance to navigate to.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of <typeparamref name="TNavigateTo" />.</returns>
        </member>
        <member name="M:Atata.Control`1.Hover">
            <summary>
            Hovers the control.
            Executes an associated with the component <see cref="T:Atata.HoverBehaviorAttribute" />
            that is <see cref="T:Atata.HoversUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeHover" /> and <see cref="F:Atata.TriggerEvents.AfterHover" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnHover">
            <summary>
            Hovers the control by executing <see cref="T:Atata.HoverBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.Focus">
            <summary>
            Focuses the control.
            Executes an associated with the component <see cref="T:Atata.FocusBehaviorAttribute" />
            that is <see cref="T:Atata.FocusesUsingScriptAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeFocus" /> and <see cref="F:Atata.TriggerEvents.AfterFocus" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnFocus">
            <summary>
            Focuses the control by executing <see cref="T:Atata.FocusBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.Blur">
            <summary>
            Removes focus from the control.
            Executes an associated with the component <see cref="T:Atata.BlurBehaviorAttribute" />
            that is <see cref="T:Atata.BlursUsingScriptAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeBlur" /> and <see cref="F:Atata.TriggerEvents.AfterBlur" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnBlur">
            <summary>
            Removes focus from the control by executing <see cref="T:Atata.BlurBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.DoubleClick">
            <summary>
            Double-clicks the control.
            Executes an associated with the component <see cref="T:Atata.DoubleClickBehaviorAttribute" />
            that is <see cref="T:Atata.DoubleClicksUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnDoubleClick">
            <summary>
            Double-clicks the control by executing <see cref="T:Atata.DoubleClickBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.DoubleClickAndGo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Double-clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo" /> type.
            Executes an associated with the component <see cref="T:Atata.DoubleClickBehaviorAttribute" />
            that is <see cref="T:Atata.DoubleClicksUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="navigateToPageObject">The page object instance to navigate to.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of <typeparamref name="TNavigateTo" />.</returns>
        </member>
        <member name="M:Atata.Control`1.RightClick">
            <summary>
            Right-clicks the control.
            Executes an associated with the component <see cref="T:Atata.RightClickBehaviorAttribute" />
            that is <see cref="T:Atata.RightClicksUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnRightClick">
            <summary>
            Right-clicks the control by executing <see cref="T:Atata.RightClickBehaviorAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Control`1.DragAndDropTo(System.Func{`0,Atata.Control{`0}})">
            <summary>
            Drags and drops the control to the target control returned by <paramref name="targetSelector" />.
            Executes an associated with the component <see cref="T:Atata.DragAndDropBehaviorAttribute" />
            that is <see cref="T:Atata.DragsAndDropsUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="targetSelector">The target control selector.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.DragAndDropTo(Atata.Control{`0})">
            <summary>
            Drags and drops the control to the target control.
            Executes an associated with the component <see cref="T:Atata.DragAndDropBehaviorAttribute" />
            that is <see cref="T:Atata.DragsAndDropsUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="target">The target control.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnDragAndDropTo(Atata.Control{`0})">
            <summary>
            Drags and drops the control to the target control by executing <see cref="T:Atata.DragAndDropBehaviorAttribute" />.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Atata.Control`1.DragAndDropToOffset(System.Int32,System.Int32)">
            <summary>
            Drags and drops the control to the specified offset.
            Executes an associated with the component <see cref="T:Atata.DragAndDropToOffsetBehaviorAttribute" />
            that is <see cref="T:Atata.DragsAndDropsToOffsetUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <param name="offsetX">The horizontal offset to which to move the mouse.</param>
            <param name="offsetY">The vertical offset to which to move the mouse.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnDragAndDropToOffset(System.Int32,System.Int32)">
            <summary>
            Drags and drops the control to the specified offset by executing <see cref="T:Atata.DragAndDropToOffsetBehaviorAttribute" />.
            </summary>
            <param name="offsetX">The X offset.</param>
            <param name="offsetY">The Y offset.</param>
        </member>
        <member name="M:Atata.Control`1.ScrollTo">
            <summary>
            Scrolls to the control.
            Executes an associated with the component <see cref="T:Atata.ScrollBehaviorAttribute" />
            that is <see cref="T:Atata.ScrollsUsingActionsAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeScroll" /> and <see cref="F:Atata.TriggerEvents.AfterScroll" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.Control`1.OnScrollTo">
            <summary>
            Scrolls to the control by executing <see cref="T:Atata.ScrollBehaviorAttribute" />.
            </summary>
        </member>
        <member name="T:Atata.CheckBoxList`2">
            <summary>
            Represents the checkbox list control (a set of <c>&lt;input type="checkbox"&gt;</c>).
            Default search is performed by the name.
            Specific checkbox items can be found by label or value.
            By default items are searched by label using <see cref="T:Atata.FindItemByLabelAttribute" />.
            Use <see cref="T:Atata.FindItemByValueAttribute" /> to find items by value.
            Currently as a data type supports only enum (with <c>[Flags]</c>) types.
            </summary>
            <typeparam name="TValue">
            The type of the control's value.
            Supports only enum (with <c>[Flags]</c>) types.
            </typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.CheckBoxList`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.CheckBoxList`2" /> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">generic <typeparamref name="TValue" /> parameter is not an Enum type.</exception>
        </member>
        <member name="P:Atata.CheckBoxList`2.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.CheckBoxList`2.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.CheckBoxList`2.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.CheckBoxList`2.Check(`0)">
            <summary>
            Checks the checkbox by specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value of the checkbox.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.CheckBoxList`2.Uncheck(`0)">
            <summary>
            Unchecks the checkbox by specified value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value of the checkbox.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.CheckBox`1">
            <summary>
            Represents the checkbox control (<c>&lt;input type="checkbox"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.CheckBox`1.IsChecked">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the checked state value.
            </summary>
        </member>
        <member name="P:Atata.CheckBox`1.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.CheckBox`1.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.CheckBox`1.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.CheckBox`1.Check">
            <summary>
            Checks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.CheckBox`1.Uncheck">
            <summary>
            Unchecks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.ContentEditor`1">
            <summary>
            Represents the content editor control (any element with <c>contenteditable='true'</c> or <c>contenteditable=''</c> attribute).
            This control is good to use for WYSIWYG editors.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Content`2">
            <summary>
            Represents any HTML element containing content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TValue">The type of the content.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Currency`1">
            <summary>
            Represents any element containing currency content.
            Default search finds the first occurring element.
            The default format is <c>"C2"</c> (e.g. <c>$123.45</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.DateTime`1">
            <summary>
            Represents any element containing date and time content.
            Default search finds the first occurring element.
            The default format is <c>"g"</c> (general date/time pattern (short time), e.g. <c>6/15/2009 1:45 PM</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Date`1">
            <summary>
            Represents any element containing date content.
            Default search finds the first occurring element.
            The default format is <c>"d"</c> (short date pattern, e.g. <c>6/15/2009</c>).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H1`1">
            <summary>
            Represents the <c>&lt;h1&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h1&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H2`1">
            <summary>
            Represents the <c>&lt;h2&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h2&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H3`1">
            <summary>
            Represents the <c>&lt;h3&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h3&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H4`1">
            <summary>
            Represents the <c>&lt;h4&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h4&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H5`1">
            <summary>
            Represents the <c>&lt;h5&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h5&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.H6`1">
            <summary>
            Represents the <c>&lt;h6&gt;</c> heading tag.
            Default search finds the first occurring <c>&lt;h6&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Label`1">
            <summary>
            Represents the label control (<c>&lt;label&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Label`2">
            <summary>
            Represents the label control (<c>&lt;label&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TValue">The type of the content.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Label`2.For">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the <c>for</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.Number`1">
            <summary>
            Represents any element containing number content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Text`1">
            <summary>
            Represents any element containing text content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Time`1">
            <summary>
            Represents any element containing time content.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.DateInput`1">
            <summary>
            Represents the date input control.
            Default search is performed by the label.
            The default format is <c>"d"</c> (short date pattern, e.g. <c>6/15/2009</c>).
            Handles any <c>input</c> element with <c>type="date"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.EditableField`2">
            <summary>
            Represents the base class for editable field controls.
            It can be used for controls like <c>&lt;input&gt;</c>, <c>&lt;select&gt;</c> and other editable controls.
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.EditableField`2.IsReadOnly">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the value indicating whether the control is read-only.
            By default checks <c>readonly</c> attribute of scope element.
            Override <see cref="M:Atata.EditableField`2.GetIsReadOnly" /> method to change the behavior.
            </summary>
        </member>
        <member name="P:Atata.EditableField`2.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.EditableField`2.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.EditableField`2.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.EditableField`2.ConvertValueToStringUsingSetFormat(`0)">
            <summary>
            Converts the value to string for <see cref="M:Atata.EditableField`2.SetValue(`0)" /> method.
            Can use format from <see cref="T:Atata.ValueSetFormatAttribute" />,
            otherwise from <see cref="T:Atata.FormatAttribute" />.
            Can use culture from <see cref="T:Atata.CultureAttribute" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to string.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetValue(`0)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Atata.EditableField`2.Set(`0)">
            <summary>
            Sets the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The value to set.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom">
            <summary>
            Sets the random value.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom(`0@)">
            <summary>
            Sets the random value and records it to <paramref name="value" /> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.SetRandom(System.Action{`0})">
            <summary>
            Sets the random value and invokes <paramref name="callback" />.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="callback">The callback to be invoked after the value is set.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableField`2.GenerateRandomValue">
            <summary>
            Generates the random value.
            </summary>
            <returns>The generated value.</returns>
        </member>
        <member name="T:Atata.EditableTextField`2">
            <summary>
            <para>
            Represents the editable text field control.
            </para>
            <para>
            To set the value, executes an associated with the component <see cref="T:Atata.ValueSetBehaviorAttribute" />
            that is <see cref="T:Atata.SetsValueUsingClearAndTypeBehaviorsAttribute" /> by default.
            To get the value, executes an associated with the component <see cref="T:Atata.ValueGetBehaviorAttribute" />
            that is <see cref="T:Atata.GetsValueFromValueAttribute" /> by default.
            </para>
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.EditableTextField`2.GetValue">
            <summary>
            Gets the value by executing <see cref="T:Atata.ValueGetBehaviorAttribute" />.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Atata.EditableTextField`2.SetValue(`0)">
            <summary>
            Sets the value by executing <see cref="T:Atata.ValueSetBehaviorAttribute" /> behavior.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Atata.EditableTextField`2.Clear">
            <summary>
            Clears the value.
            Executes an associated with the component <see cref="T:Atata.ValueClearBehaviorAttribute" />
            that is <see cref="T:Atata.ClearsValueUsingClearMethodAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.EditableTextField`2.OnClear">
            <summary>
            Clears the value by executing <see cref="T:Atata.ValueClearBehaviorAttribute" /> behavior.
            </summary>
        </member>
        <member name="M:Atata.EditableTextField`2.Type(System.String)">
            <summary>
            Types (appends) the specified text value.
            Executes an associated with the component <see cref="T:Atata.TextTypeBehaviorAttribute" />
            that is <see cref="T:Atata.TypesTextUsingSendKeysAttribute" /> by default.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <param name="text">The text to type.</param>
            <returns>The owner page object.</returns>
        </member>
        <member name="M:Atata.EditableTextField`2.OnType(System.String)">
            <summary>
            Types the text value by executing <see cref="T:Atata.TextTypeBehaviorAttribute" /> behavior.
            </summary>
            <param name="text">The text to type.</param>
        </member>
        <member name="T:Atata.EmailInput`1">
            <summary>
            Represents the email input control (<c>&lt;input type="email"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Field`2">
            <summary>
            Represents the base class for the field controls.
            It can be used for HTML elements containing content
            (like <c>&lt;h1&gt;</c>, <c>&lt;span&gt;</c>, etc.) representing content as a field value,
            as well as for <c>&lt;input&gt;</c> and other elements.
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Field`2.Value">
            <summary>
            Gets the value.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeGet" /> and <see cref="F:Atata.TriggerEvents.AfterGet" /> triggers.
            </summary>
        </member>
        <member name="P:Atata.Field`2.ValueProviderName">
            <summary>
            Gets the name of the value provider.
            The default value is <c>"value"</c>.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.Field`2.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.Field`2.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.Field`2.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Atata.Field`2.Get">
            <summary>
            Gets the value. Also executes <see cref="F:Atata.TriggerEvents.BeforeGet" /> and <see cref="F:Atata.TriggerEvents.AfterGet" /> triggers.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="M:Atata.Field`2.ConvertValueToString(`0)">
            <summary>
            Converts the value to string.
            Can use format from <see cref="T:Atata.FormatAttribute" />.
            Can use culture from <see cref="T:Atata.CultureAttribute" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to string.</returns>
        </member>
        <member name="M:Atata.Field`2.ConvertStringToValue(System.String)">
            <summary>
            Converts the string to value of <typeparamref name="TValue" /> type.
            Can use format from <see cref="T:Atata.FormatAttribute" />.
            Can use culture from <see cref="T:Atata.CultureAttribute" />.
            </summary>
            <param name="value">The value as string.</param>
            <returns>The value converted to <typeparamref name="TValue" /> type.</returns>
        </member>
        <member name="M:Atata.Field`2.ConvertStringToValueUsingGetFormat(System.String)">
            <summary>
            Converts the string to value of <typeparamref name="TValue" /> type for <see cref="M:Atata.Field`2.GetValue" /> method.
            Can use format from <see cref="T:Atata.ValueGetFormatAttribute" />,
            otherwise from <see cref="T:Atata.FormatAttribute" />.
            Can use culture from <see cref="T:Atata.CultureAttribute" />.
            </summary>
            <param name="value">The value as string.</param>
            <returns>The value converted to <typeparamref name="TValue" /> type.</returns>
        </member>
        <member name="M:Atata.Field`2.GetValueTermOptions">
            <summary>
            Gets the value term options (culture, format, etc.).
            </summary>
            <returns>The <see cref="T:Atata.TermOptions" /> instance.</returns>
        </member>
        <member name="M:Atata.Field`2.ClearValueCache">
            <summary>
            Clears the column header texts of the component.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.FileInput`1">
            <summary>
            Represents the file input control (<c>&lt;input type="file"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.FrameWrappedContentEditor`1">
            <summary>
            Represents the frame-wrapped content editor control.
            This control is good to use for iframe-based WYSIWYG editors.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="P:Atata.FrameWrappedContentEditor`1.ContentEditor">
            <summary>
            Gets the content editor.
            Finds the first one inside an <c>iframe</c> element.
            </summary>
        </member>
        <member name="M:Atata.FrameWrappedContentEditor`1.GetFrameControl">
            <summary>
            Gets the frame control.
            By default returns <c>this</c>.
            </summary>
            <returns>The control representing <c>iframe</c> element.</returns>
        </member>
        <member name="M:Atata.FrameWrappedContentEditor`1.DoWithinFrame(System.Action)">
            <summary>
            Performs the action within the frame provided by <see cref="M:Atata.FrameWrappedContentEditor`1.GetFrameControl" /> method.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Atata.HiddenInput`1">
            <summary>
            Represents the hidden input control (<c>&lt;input type="hidden"&gt;</c>) with text data.
            Default search finds the first occurring <c>&lt;input type="hidden"&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.HiddenInput`2">
            <summary>
            Represents the hidden input control (<c>&lt;input type="hidden"&gt;</c>).
            Default search finds the first occurring <c>&lt;input type="hidden"&gt;</c> element.
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.IClearable">
            <summary>
            Represents the interface that can clear.
            </summary>
        </member>
        <member name="M:Atata.IClearable.Clear">
            <summary>
            Clears the value.
            </summary>
        </member>
        <member name="T:Atata.IConvertsValueToString`1">
            <summary>
            Provides a method that converts a value to string.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Atata.IConvertsValueToString`1.ConvertValueToString(`0)">
            <summary>
            Converts the value to string.
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to string.</returns>
        </member>
        <member name="T:Atata.Input`2">
            <summary>
            Represents the input control (<c>&lt;input&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.LocalDateTimeInput`1">
            <summary>
            Represents the local date/time input control (<c>&lt;input type="datetime-local"&gt;</c>).
            Default search is performed by the label.
            The default format is <c>"yyyy-MM-ddTHH:mm"</c>.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.NumberInput`1">
            <summary>
            Represents the number input control.
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="number"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Option`2">
            <summary>
            Represents the option control (<c>&lt;option&gt;</c>).
            Default search finds the first occurring <c>&lt;option&gt;</c> element.
            </summary>
            <typeparam name="TValue">The type of the data value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Option`2.IsSelected">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the value indicating whether the component is selected.
            </summary>
        </member>
        <member name="P:Atata.Option`2.SelectOptionBehavior">
            <summary>
            Gets the <see cref="T:Atata.SelectOptionBehaviorAttribute" /> instance.
            By default uses <see cref="T:Atata.SelectsOptionByTextAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Option`2.Select">
            <summary>
            Selects the option.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.PasswordInput`1">
            <summary>
            Represents the password input control (<c>&lt;input type="password"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.RadioButtonList`2">
            <summary>
            Represents the radio button list control (a set of <c>&lt;input type="radio"&gt;</c>).
            Default search is performed by the name.
            Specific radio button items can be found by label or value.
            By default items are searched by label using <see cref="T:Atata.FindItemByLabelAttribute" />.
            Use <see cref="T:Atata.FindItemByValueAttribute" /> to find items by value.
            As a data type supports enum, string, numeric and other types.
            </summary>
            <typeparam name="TValue">
            The type of the control's value.
            Supports enum, string, numeric and other types.
            </typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.RadioButtonList`2.ToggleRandom">
            <summary>
            Sets random unselected value.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.RadioButton`1">
            <summary>
            Represents the radio button control (<c>&lt;input type="radio"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.RadioButton`1.IsChecked">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the checked state value.
            </summary>
        </member>
        <member name="P:Atata.RadioButton`1.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.RadioButton`1.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.RadioButton`1.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="M:Atata.RadioButton`1.Check">
            <summary>
            Checks the control.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <returns>The owner page object.</returns>
        </member>
        <member name="T:Atata.SearchInput`1">
            <summary>
            Represents the search input control (<c>&lt;input type="search"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Select`1">
            <summary>
            Represents the text select control (<c>&lt;select&gt;</c>).
            Default search is performed by the label.
            Selects an option using text.
            Option selection is configured via <see cref="T:Atata.SelectOptionBehaviorAttribute" />.
            Possible selection behavior attributes are:
            <see cref="T:Atata.SelectsOptionByTextAttribute" />, <see cref="T:Atata.SelectsOptionByValueAttribute" />,
            <see cref="T:Atata.SelectsOptionByLabelAttributeAttribute" /> and <see cref="T:Atata.SelectsOptionByAttributeAttribute" />.
            Default option selection is performed by text using <see cref="T:Atata.SelectsOptionByTextAttribute" />.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Select`2">
            <summary>
            Represents the select control (<c>&lt;select&gt;</c>).
            Default search is performed by the label.
            Option selection is configured via <see cref="T:Atata.SelectOptionBehaviorAttribute" />.
            Possible selection behavior attributes are:
            <see cref="T:Atata.SelectsOptionByTextAttribute" />, <see cref="T:Atata.SelectsOptionByValueAttribute" />,
            <see cref="T:Atata.SelectsOptionByLabelAttributeAttribute" /> and <see cref="T:Atata.SelectsOptionByAttributeAttribute" />.
            Default option selection is performed by text using <see cref="T:Atata.SelectsOptionByTextAttribute" />.
            </summary>
            <typeparam name="TValue">The type of the control's value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Select`2.Options">
            <summary>
            Gets the options' <see cref="T:Atata.ControlList`2" /> instance.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectedOption">
            <summary>
            Gets the selected option.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectedIndex">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the index of the selected option.
            </summary>
        </member>
        <member name="P:Atata.Select`2.SelectOptionBehavior">
            <summary>
            Gets the <see cref="T:Atata.SelectOptionBehaviorAttribute" /> instance.
            By default uses <see cref="T:Atata.SelectsOptionByTextAttribute" />.
            </summary>
        </member>
        <member name="M:Atata.Select`2.GetOption(`0)">
            <summary>
            Gets the option by the associated value.
            </summary>
            <param name="value">The value associated with the option.</param>
            <returns>The <see cref="T:Atata.Option`2" /> instance.</returns>
        </member>
        <member name="T:Atata.TelInput`1">
            <summary>
            Represents the telephone number input control (<c>&lt;input type="tel"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TextArea`1">
            <summary>
            Represents the text area control (<c>&lt;textarea&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TextInput`1">
            <summary>
            Represents the text input control (<c>&lt;input type="text"&gt;</c>).
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TimeInput`1">
            <summary>
            Represents the time input control.
            Default search is performed by the label.
            Handles any <c>&lt;input&gt;</c> element with <c>type="time"</c>, <c>type="text"</c> or without the defined <c>type</c> attribute.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.UrlInput`1">
            <summary>
            Represents the URL input control (<c>&lt;input type="url"&gt;</c>).
            Default search is performed by the label.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.FrameSetPage`1">
            <summary>
            Represents the frameset-based HTML page.
            Uses the root <c>&lt;frameset&gt;</c> tag as a scope.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.PageObject`1" />
        </member>
        <member name="T:Atata.Frame`1">
            <summary>
            Represents the frame control (<c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c>).
            Default search finds the first occurring <c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.Frame`1.SwitchTo``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object represented by the instance of <typeparamref name="TFramePageObject" /> type.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="framePageObject">The frame page object.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.Frame`1.DoWithin``1(System.Action{``0},System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object, executes action(s) in scope of frame and switches back to the owner page object.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="action">The action to do in scope of frame.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.Frame`2">
            <summary>
            Represents the frame control (<c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c>).
            Default search finds the first occurring <c>&lt;iframe&gt;</c> or <c>&lt;frame&gt;</c> element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.Frame`2.SwitchTo(`0,System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object represented by the instance of <typeparamref name="TFramePageObject" /> type.
            </summary>
            <param name="framePageObject">The frame page object.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.Frame`2.DoWithin(System.Action{`0},System.Nullable{System.Boolean})">
            <summary>
            Switches to the frame page object, executes action(s) in scope of frame and switches back to the owner page object.
            </summary>
            <param name="action">The action to do in scope of frame.</param>
            <param name="temporarily">
            If set to <see langword="true" /> navigates temporarily preserving current page object state.
            If is not set, checks <see cref="T:Atata.GoTemporarilyAttribute" />.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.HierarchicalControl`2">
            <summary>
            Represents the hierarchical control (a control containing structured hierarchy of controls of <typeparamref name="TItem" /> type).
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Children">
            <summary>
            Gets the children <see cref="T:Atata.ControlList`2" /> instance.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Descendants">
            <summary>
            Gets the descendants (all items at any level of hierarchy) <see cref="T:Atata.ControlList`2" /> instance.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Item(System.Int32)">
            <summary>
            Gets the child item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The child item at the specified index.</returns>
        </member>
        <member name="P:Atata.HierarchicalControl`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the child item that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first child item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="T:Atata.HierarchicalItem`2">
            <summary>
            Represents the hierarchical item control (a control containing structured hierarchy of controls of <typeparamref name="TItem" /> type).
            Can have parent control of <typeparamref name="TItem" /> type.
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
        </member>
        <member name="P:Atata.HierarchicalItem`2.Parent">
            <summary>
            Gets the parent control of <typeparamref name="TItem" /> type.
            </summary>
        </member>
        <member name="P:Atata.HierarchicalItem`2.HasParent">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value indicating whether the control has parent.
            </summary>
        </member>
        <member name="T:Atata.HierarchicalListItem`1">
            <summary>
            Represents the hierarchical list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            It is recommended to use with <see cref="T:Atata.HierarchicalUnorderedList`2" /> and <see cref="T:Atata.HierarchicalOrderedList`2" />.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalOrderedList`2" />
            <seealso cref="T:Atata.HierarchicalUnorderedList`2" />
        </member>
        <member name="T:Atata.HierarchicalListItem`2">
            <summary>
            Represents the hierarchical list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            It is recommended to use with <see cref="T:Atata.HierarchicalUnorderedList`2" /> and <see cref="T:Atata.HierarchicalOrderedList`2" />.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalOrderedList`2" />
            <seealso cref="T:Atata.HierarchicalUnorderedList`2" />
        </member>
        <member name="T:Atata.HierarchicalOrderedList`2">
            <summary>
            Represents the hierarchical ordered list control (<c>&lt;ol&gt;</c>).
            Default search finds the first occurring <c>&lt;ol&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
            <seealso cref="T:Atata.HierarchicalListItem`2" />
        </member>
        <member name="T:Atata.HierarchicalUnorderedList`2">
            <summary>
            Represents the hierarchical unordered list control (<c>&lt;ul&gt;</c>).
            Default search finds the first occurring <c>&lt;ul&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.HierarchicalControl`2" />
            <seealso cref="T:Atata.HierarchicalListItem`2" />
        </member>
        <member name="T:Atata.IClearsCache">
            <summary>
            Provides a method that clears a cache.
            </summary>
        </member>
        <member name="M:Atata.IClearsCache.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Atata.ImageInput`1">
            <summary>
            Represents the image input control (<c>&lt;input type="image"&gt;</c>).
            Default search is performed by <c>alt</c> attribute using <see cref="T:Atata.FindByAltAttribute" />.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.ImageInput`1.Source">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the <c>src</c> attribute.
            </summary>
        </member>
        <member name="P:Atata.ImageInput`1.Alt">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the <c>alt</c> attribute.
            </summary>
        </member>
        <member name="T:Atata.ImageInput`2">
            <summary>
            Represents the image input control (<c>&lt;input type="image"&gt;</c>).
            Default search is performed by <c>alt</c> attribute using <see cref="T:Atata.FindByAltAttribute" />.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ImageInput`1" />
        </member>
        <member name="T:Atata.Image`1">
            <summary>
            Represents the image control (<c>&lt;img&gt;</c>).
            Default search finds the first occurring <c>&lt;img&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Image`1.Source">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the <c>src</c> attribute.
            </summary>
        </member>
        <member name="P:Atata.Image`1.IsLoaded">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the value indicating whether the image file is loaded.
            </summary>
        </member>
        <member name="T:Atata.ItemsControl`2">
            <summary>
            Represents the items control (a control containing a set of any control of <typeparamref name="TItem" /> type).
            Default search finds the first occurring element.
            </summary>
            <typeparam name="TItem">The type of the item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.ItemsControl`2.Items">
            <summary>
            Gets the items' <see cref="T:Atata.ControlList`2" /> instance.
            </summary>
        </member>
        <member name="P:Atata.ItemsControl`2.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <returns>The child item at the specified index.</returns>
        </member>
        <member name="P:Atata.ItemsControl`2.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the item that matches the conditions defined by the specified predicate expression.
            </summary>
            <param name="predicateExpression">The predicate expression to test each item.</param>
            <returns>The first child item that matches the conditions of the specified predicate.</returns>
        </member>
        <member name="T:Atata.IUIComponent`1">
            <summary>
            Represents an interface for UI component.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.IUIComponent`1.Context">
            <summary>
            Gets the <see cref="T:Atata.AtataContext" /> instance with which this component is associated.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Owner">
            <summary>
            Gets the owner page object.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.IsVisible">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value indicating whether the control is visible.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Content">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the text content.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ScopeSource">
            <summary>
            Gets the source of the scope.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Scope">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement" /> instance that represents the scope HTML element associated with this component.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">Element not found.</exception>
        </member>
        <member name="P:Atata.IUIComponent`1.ScopeContext">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext" /> instance that represents the scope search context
            (where to find the children of this component).
            By default is the same as <see cref="P:Atata.IUIComponent`1.Scope" />.
            Also can execute <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ScopeLocator">
            <summary>
            Gets the scope locator.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentName">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentTypeName">
            <summary>
            Gets the name of the component type.
            Returns the value of <see cref="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName" /> property for control from <see cref="T:Atata.ControlDefinitionAttribute" />
            and for page object from <see cref="T:Atata.PageObjectDefinitionAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentFullName">
            <summary>
            Gets the full name of the component including parent component full name, own component name and own component type name.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentLocation">
            <summary>
            Gets the <see cref="T:Atata.UIComponentLocationProvider`1" /> instance that provides an access to the scope element's location (X and Y).
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.ComponentSize">
            <summary>
            Gets the <see cref="T:Atata.UIComponentSizeProvider`1" /> instance that provides an access to the scope element's size (Width and Height).
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Attributes">
            <summary>
            Gets the <see cref="T:Atata.UIComponentAttributeProvider`1" /> instance that provides an access to the scope element's attributes.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Css">
            <summary>
            Gets the <see cref="T:Atata.UIComponentCssProvider`1" /> instance that provides an access to the scope element's CSS properties.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Script">
            <summary>
            Gets the <see cref="T:Atata.UIComponentScriptExecutor`1" /> instance that provides a set of methods for JavaScript execution.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Controls">
            <summary>
            Gets the list of child controls.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Metadata">
            <summary>
            Gets the metadata of the component.
            </summary>
        </member>
        <member name="P:Atata.IUIComponent`1.Should">
            <summary>
            Gets the verification provider that provides a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.IUIComponent`1.GetScope(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement" /> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement" /> instance of the scope.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.GetScopeContext(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext" /> instance that represents the scope search context
            (where to find the children of this component).
            Also can execute <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.ISearchContext" /> instance of the scope context.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Wait(Atata.Until,Atata.WaitOptions)">
            <summary>
            Waits until the specified component condition is met.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="options">The options.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Exists(Atata.SearchOptions)">
            <summary>
            Determines whether the component exists.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true" /> if the component exists; otherwise, <see langword="false" />.</returns>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">
            The <paramref name="options" /> has <see cref="P:Atata.SearchOptions.IsSafely" /> property
            equal to <see langword="false" /> value and the component doesn't exist.
            </exception>
        </member>
        <member name="M:Atata.IUIComponent`1.Missing(Atata.SearchOptions)">
            <summary>
            Determines whether the component is missing.
            </summary>
            <param name="options">The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true" /> if the component is missing; otherwise, <see langword="false" />.</returns>
            <exception cref="T:Atata.NotMissingElementException">
            The <paramref name="options" /> has <see cref="P:Atata.SearchOptions.IsSafely" /> property
            equal to <see langword="false" /> value and the component exists.
            </exception>
        </member>
        <member name="M:Atata.IUIComponent`1.CreateValueProvider``1(System.String,System.Func{``0})">
            <summary>
            Creates a value provider with the specified <paramref name="providerName" /> and using <paramref name="valueGetFunction" />.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">The name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.ValueProvider`2" /> type.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Find``1(System.Attribute[])">
            <summary>
            Creates a control of the specified <typeparamref name="TControl" /> type,
            optionally with additional attributes, that is a descendant of the current component.
            The control's element will be found using either
            the <see cref="T:Atata.FindAttribute" /> specified in <paramref name="attributes" /> parameter,
            or the default/applied <see cref="T:Atata.FindAttribute" /> associated with the <typeparamref name="TControl" /> type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="attributes">The attributes.</param>
            <returns>The created control instance.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.Find``1(System.String,System.Attribute[])">
            <summary>
            Creates a control of the specified <typeparamref name="TControl" /> type with the specified name,
            optionally with additional attributes, that is a descendant of the current component.
            The control's element will be found using either
            the <see cref="T:Atata.FindAttribute" /> specified in <paramref name="attributes" /> parameter,
            or the default/applied <see cref="T:Atata.FindAttribute" /> associated with the <typeparamref name="TControl" /> type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="name">The control name, which is used in log.</param>
            <param name="attributes">The attributes.</param>
            <returns>The created control instance.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.FindAll``1(System.Attribute[])">
            <summary>
            Creates a control list of the specified <typeparamref name="TControl" /> type,
            optionally with additional attributes, that are descendants of the current component.
            Use <see cref="T:Atata.ControlDefinitionAttribute" /> to specialize the control element definition,
            instead of <see cref="T:Atata.FindAttribute" /> that doesn't utilize here.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="attributes">The attributes.</param>
            <returns>The instance of <see cref="T:Atata.ControlList`2" />.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.FindAll``1(System.String,System.Attribute[])">
            <summary>
            Creates a control list of the specified <typeparamref name="TControl" /> type with the specified name,
            optionally with additional attributes, that are descendants of the current component.
            Use <see cref="T:Atata.ControlDefinitionAttribute" /> to specialize the control element definition,
            instead of <see cref="T:Atata.FindAttribute" /> that doesn't utilize here.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="name">The control list name, which is used in log.</param>
            <param name="attributes">The attributes.</param>
            <returns>The instance of <see cref="T:Atata.ControlList`2" />.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.GetAncestor``1">
            <summary>
            Gets the ancestor component of specified type.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.GetAncestorOrSelf``1">
            <summary>
            Gets the ancestor component of specified type or self.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.ExecuteBehavior``1(System.Action{``0})">
            <summary>
            Gets a behavior attribute from the component's metadata and then invokes
            the specified <paramref name="behaviorExecutionAction" /> with passing the found behavior to it.
            </summary>
            <typeparam name="TBehaviorAttribute">The type of the behavior attribute.</typeparam>
            <param name="behaviorExecutionAction">The behavior execution action.</param>
        </member>
        <member name="M:Atata.IUIComponent`1.ExecuteBehavior``2(System.Func{``0,``1})">
            <summary>
            Gets a behavior attribute from the component's metadata and then invokes
            the specified <paramref name="behaviorExecutionFunction" /> with passing the found behavior to it.
            </summary>
            <typeparam name="TBehaviorAttribute">The type of the behavior attribute.</typeparam>
            <typeparam name="TResult">The type of the behavior result.</typeparam>
            <param name="behaviorExecutionFunction">The behavior execution function.</param>
            <returns>The result of behavior execution.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.ClearCache">
            <summary>
            Clears all cache of the component and its descendant components.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.ClearCacheOfDescendants">
            <summary>
            Clears all cache of the descendant components.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IUIComponent`1.ClearScopeCache">
            <summary>
            Clears the scope cache of the component.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.LabelList`1">
            <summary>
            Represents the list of <see cref="T:Atata.Label`1" /> controls.
            Gives opportunity to get a <see cref="T:Atata.Label`1" /> for particular control using its element <c>id</c> attribute that equals the <c>for</c> attribute of <c>&lt;label&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Label`1" />
        </member>
        <member name="M:Atata.LabelList`1.CreateAssociatedControl(Atata.Control{`0})">
            <summary>
            Creates an instance of <see cref="T:Atata.Label`1" /> control that is associated with the <paramref name="control" /> by <c>for</c>/<c>id</c> attributes.
            </summary>
            <param name="control">The control for which the <see cref="T:Atata.Label`1" /> control is to be created.</param>
            <returns>The <see cref="T:Atata.Label`1" /> control.</returns>
        </member>
        <member name="T:Atata.Link`1">
            <summary>
            Represents the link control (<c>&lt;a&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Link`2">
            <summary>
            Represents the link control (<c>&lt;a&gt;</c>).
            Default search is performed by the content.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.Link`1" />
        </member>
        <member name="T:Atata.ListItem`1">
            <summary>
            Represents the list item control (<c>&lt;li&gt;</c>).
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.OrderedList`2" />
            <seealso cref="T:Atata.UnorderedList`2" />
        </member>
        <member name="T:Atata.OrderedList`1">
            <summary>
            Represents the ordered list control (<c>&lt;ol&gt;</c>).
            Default search finds the first occurring <c>&lt;ol&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.TextListItem`1" />
        </member>
        <member name="T:Atata.OrderedList`2">
            <summary>
            Represents the ordered list control (<c>&lt;ol&gt;</c>).
            Default search finds the first occurring <c>&lt;ol&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.ListItem`1" />
        </member>
        <member name="T:Atata.OrdinaryPage">
            <summary>
            Represents the ordinary page.
            </summary>
        </member>
        <member name="T:Atata.PageObject`1">
            <summary>
            Represents the base class for the page objects.
            Also executes <see cref="F:Atata.TriggerEvents.Init" /> and <see cref="F:Atata.TriggerEvents.DeInit" /> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.PageObject`1.Context">
            <summary>
            Gets the <see cref="T:Atata.AtataContext" /> instance with which this component is associated.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.ScopeSource">
            <summary>
            Gets the source of the scope.
            The default value is <see cref="F:Atata.ScopeSource.PageObject" />.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.NavigateOnInit">
            <summary>
            Gets a value indicating whether the navigation should be performed upon initialization.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.IsTemporarilyNavigated">
            <summary>
            Gets a value indicating whether this instance is temporarily navigated using <see cref="T:Atata.GoTemporarilyAttribute" /> or other approach.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PreviousPageObject">
            <summary>
            Gets the previous page object.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.Report">
            <summary>
            Gets the instance that provides reporting functionality.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageTitle">
            <summary>
            Gets the title provider of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageUrl">
            <summary>
            Gets the URL provider of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageUri">
            <summary>
            Gets the URI provider of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.PageSource">
            <summary>
            Gets the page source provider of the current HTML page.
            </summary>
        </member>
        <member name="P:Atata.PageObject`1.ActiveControl">
            <summary>
            Gets the active control.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.CreateScopeBy">
            <summary>
            Creates the <see cref="T:OpenQA.Selenium.By" /> instance for Scope search.
            </summary>
            <returns>The <see cref="T:OpenQA.Selenium.By" /> instance.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToWindow(System.String)">
            <summary>
            Switches to the browser window by the window handle.
            </summary>
            <param name="windowHandle">The handle of the window.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame(Atata.IUIComponent{`0})">
            <summary>
            Switches to frame represented by <paramref name="component" /> parameter.
            </summary>
            <param name="component">The component representing frame element.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame(OpenQA.Selenium.IWebElement)">
            <summary>
            Switches to frame represented by <paramref name="element" /> parameter.
            </summary>
            <param name="element">The frame element.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame``1(OpenQA.Selenium.By,``0,System.Boolean)">
            <summary>
            Switches to frame page object using <see cref="T:OpenQA.Selenium.By" /> instance that represents the selector for <c>&lt;iframe&gt;</c> tag element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="frameBy">The frame <see cref="T:OpenQA.Selenium.By" /> instance.</param>
            <param name="framePageObject">
            The frame page object.
            If equals <see langword="null" />, creates an instance of <typeparamref name="TFramePageObject" /> using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToFrame``1(OpenQA.Selenium.IWebElement,``0,System.Boolean)">
            <summary>
            Switches to frame page object using <see cref="T:OpenQA.Selenium.IWebElement" /> instance that represents <c>&lt;iframe&gt;</c> tag element.
            </summary>
            <typeparam name="TFramePageObject">The type of the frame page object.</typeparam>
            <param name="frameElement">The frame element.</param>
            <param name="framePageObject">
            The frame page object.
            If equals <see langword="null" />, creates an instance of <typeparamref name="TFramePageObject" /> using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The instance of the frame page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToRoot">
            <summary>
            Switches to the root page using WebDriver's <c>SwitchTo().DefaultContent()</c> method.
            </summary>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.SwitchToRoot``1(``0)">
            <summary>
            Switches to the root page using WebDriver's <c>SwitchTo().DefaultContent()</c> method.
            </summary>
            <typeparam name="TPageObject">The type of the root page object.</typeparam>
            <param name="rootPageObject">
            The root page object.
            If equals <see langword="null" />, creates an instance of <typeparamref name="TPageObject" /> using the default constructor.</param>
            <returns>The instance of the root page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.RefreshPage">
            <summary>
            Refreshes the current page.
            </summary>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.RefreshPageUntil(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Refreshes the current page until the condition specified by <paramref name="predicateExpression" /> argument is met.
            </summary>
            <param name="predicateExpression">The predicate expression to test the page.</param>
            <param name="timeout">The timeout in seconds.</param>
            <param name="retryInterval">The retry interval in seconds.</param>
            <returns>The instance of this page object.</returns>
            <example>
            <code>
            PageObject.RefreshPageUntil(x =&gt; x.SomeControl.IsVisible, timeout: 60, retryInterval: 5);
            </code>
            </example>
        </member>
        <member name="M:Atata.PageObject`1.GoBack``1(``0)">
            <summary>
            Navigates back to the previous page.
            </summary>
            <typeparam name="TOther">The type of the page object that represents the previous page.</typeparam>
            <param name="previousPageObject">
            The instance of the previous page object.
            If equals <see langword="null" />, creates an instance of <typeparamref name="TOther" /> using the default constructor.</param>
            <returns>The instance of the previous page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.GoForward``1(``0)">
            <summary>
            Navigates forward to the next page.
            </summary>
            <typeparam name="TOther">The type of the page object that represents the next page.</typeparam>
            <param name="nextPageObject">
            The instance of the next page object.
            If equals <see langword="null" />, creates an instance of <typeparamref name="TOther" /> using the default constructor.</param>
            <returns>The instance of the next page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.CloseWindow">
            <summary>
            Closes the current window.
            </summary>
        </member>
        <member name="M:Atata.PageObject`1.Do``1(System.Func{`0,``0},System.Action{``0})">
            <summary>
            Executes the action passing specified owner's component.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="componentSelector">The component selector.</param>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do``2(System.Func{`0,``0},System.Func{``0,``1})">
            <summary>
            Executes the navigation action passing specified owner's component.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <param name="componentSelector">The component selector.</param>
            <param name="navigationAction">The navigation action.</param>
            <returns>The instance of the page object to navigate to.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do(System.Action{`0})">
            <summary>
            Executes the action passing current page object.
            </summary>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do``1(System.Func{`0,``0})">
            <summary>
            Executes the navigation action passing current page object.
            </summary>
            <typeparam name="TNavigateTo">The type of the navigate to.</typeparam>
            <param name="navigationAction">The navigation action.</param>
            <returns>The instance of the page object to navigate to.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Do(System.Action)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.AggregateAssert(System.Action{`0},System.String)">
            <summary>
            Executes aggregate assertion for the current page object using <see cref="M:Atata.AtataContext.AggregateAssert(System.Action,System.String)" /> method.
            </summary>
            <param name="action">The action to execute in scope of aggregate assertion.</param>
            <param name="assertionScopeName">
            Name of the scope being asserted.
            Is used to identify the assertion section in log.
            If it is <see langword="null" />, <see cref="P:Atata.UIComponent.ComponentFullName" /> is used instead.
            </param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.AggregateAssert``1(System.Func{`0,``0},System.Action{``0},System.String)">
            <summary>
            Executes aggregate assertion for the component of the current page object using <see cref="M:Atata.AtataContext.AggregateAssert(System.Action,System.String)" /> method.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="componentSelector">The component selector.</param>
            <param name="action">The action to execute in scope of aggregate assertion.</param>
            /// <param name="assertionScopeName">
            Name of the scope being asserted.
            Is used to identify the assertion section in log.
            If it is <see langword="null" />, component full name is used instead.
            </param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Press(System.String)">
            <summary>
            Presses the specified keystrokes.
            </summary>
            <param name="keys">The keystrokes to send to the browser.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.PerformActions(System.Func{OpenQA.Selenium.Interactions.Actions,OpenQA.Selenium.Interactions.Actions})">
            <summary>
            Performs the specified set of actions.
            </summary>
            <param name="actionsBuilder">The actions builder.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.Wait(System.TimeSpan)">
            <summary>
            Waits the specified time.
            </summary>
            <param name="time">The time to wait.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.WaitSeconds(System.Double)">
            <summary>
            Waits the specified time in seconds.
            </summary>
            <param name="seconds">The time to wait in seconds.</param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.ScrollUp">
            <summary>
            Scrolls up.
            </summary>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="M:Atata.PageObject`1.ScrollDown">
            <summary>
            Scrolls down.
            </summary>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="T:Atata.Page`1">
            <summary>
            Represents the whole HTML page and is the main base class to inherit for the pages.
            Uses the <c>&lt;body&gt;</c> tag as a scope.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.PageObject`1" />
        </member>
        <member name="P:Atata.Page`1.ScopeSource">
            <summary>
            Gets the source of the scope.
            The default value is <see cref="F:Atata.ScopeSource.Page" />.
            </summary>
        </member>
        <member name="T:Atata.PopupWindow`1">
            <summary>
            <para>
            Represents the base class for the popup window page objects.
            </para>
            <para>
            In addition to regular page object attributes, supports:
            <list type="bullet">
            <item><see cref="T:Atata.WindowTitleElementDefinitionAttribute" /></item>
            <item><see cref="T:Atata.WindowTitleAttribute" /></item>
            </list>
            </para>
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.PopupWindow`1.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.PopupWindow`1" /> class.
            </summary>
            <param name="windowTitleValues">
            The window title values.
            None can be passed.
            </param>
        </member>
        <member name="P:Atata.PopupWindow`1.WindowTitleValues">
            <summary>
            Gets or sets the window title values.
            By default, the value is taken from <see cref="T:Atata.WindowTitleAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.PopupWindow`1.WindowTitleMatch">
            <summary>
            Gets or sets the match that should be used for the window search by the title.
            The default value is <see cref="F:Atata.TermMatch.Equals" />.
            By default, the value is taken from <see cref="T:Atata.WindowTitleAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.PopupWindow`1.CanFindByWindowTitle">
            <summary>
            Gets a value indicating whether window can be found by window title.
            Returns <see langword="true" /> when <see cref="P:Atata.PopupWindow`1.WindowTitleValues" /> contains at least one value.
            </summary>
        </member>
        <member name="T:Atata.SvgCircle`1">
            <summary>
            Represents the SVG circle shape control (<c>&lt;circle&gt;</c>).
            Default search finds the first occurring <c>&lt;circle&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgEllipse`1">
            <summary>
            Represents the SVG ellipse shape control (<c>&lt;ellipse&gt;</c>).
            Default search finds the first occurring <c>&lt;ellipse&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgLine`1">
            <summary>
            Represents the SVG line shape control (<c>&lt;line&gt;</c>).
            Default search finds the first occurring <c>&lt;line&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgPath`1">
            <summary>
            Represents the SVG path shape control (<c>&lt;path&gt;</c>).
            Default search finds the first occurring <c>&lt;path&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgPolygon`1">
            <summary>
            Represents the SVG polygon shape control (<c>&lt;polygon&gt;</c>).
            Default search finds the first occurring <c>&lt;polygon&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgPolyline`1">
            <summary>
            Represents the SVG polyline shape control (<c>&lt;polyline&gt;</c>).
            Default search finds the first occurring <c>&lt;polyline&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgRectangle`1">
            <summary>
            Represents the SVG rectangle shape control (<c>&lt;rect&gt;</c>).
            Default search finds the first occurring <c>&lt;rect&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.SvgText`1">
            <summary>
            Represents the SVG text control (<c>&lt;text&gt;</c>).
            Default search finds the first occurring <c>&lt;text&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Svg`1">
            <summary>
            Represents the SVG control (<c>&lt;svg&gt;</c>).
            Default search finds the first occurring <c>&lt;svg&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TableHeader`1">
            <summary>
            Represents the table header cell control (&lt;th&gt;).
            Default search finds the first occurring &lt;th&gt; element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.TableRow`1">
            <summary>
            Represents the table row component (&lt;tr&gt;).
            Default search finds the first occurring &lt;tr&gt; element.
            By default every its control of type (or inherited from) <see cref="T:Atata.Content`2" /> is searched by the column header.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`1">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`2">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="TRow">The type of the table row control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="T:Atata.Table`3">
            <summary>
            Represents the table control (&lt;table&gt;).
            Default search finds the first occurring &lt;table&gt; element.
            </summary>
            <typeparam name="THeader">The type of the table header control.</typeparam>
            <typeparam name="TRow">The type of the table row control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.Table`3.Rows">
            <summary>
            Gets the rows list.
            </summary>
        </member>
        <member name="P:Atata.Table`3.Headers">
            <summary>
            Gets the headers list.
            </summary>
        </member>
        <member name="P:Atata.Table`3.UsesColumnHeaderTextsCache">
            <summary>
            Gets a value indicating whether to the cache of column header texts.
            Returns a <see cref="P:Atata.ICanUseCache.UsesCache" /> value of an associated with the component
            <see cref="T:Atata.UsesColumnHeaderTextsCacheAttribute" /> or <see cref="T:Atata.UsesCacheAttribute" />.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="M:Atata.Table`3.GetColumnHeaderTexts">
            <summary>
            Gets the column header texts.
            </summary>
            <returns>The collection of text values.</returns>
        </member>
        <member name="M:Atata.Table`3.SelectColumnHeaderTexts">
            <summary>
            Selects the column header texts.
            </summary>
            <returns>The collection of text values.</returns>
        </member>
        <member name="M:Atata.Table`3.ClearColumnHeaderTextsCache">
            <summary>
            Clears the column header texts of the component.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.TextListItem`1">
            <summary>
            Represents the list item control (<c>&lt;li&gt;</c>) of text kind.
            Default search finds the first occurring <c>&lt;li&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.OrderedList`1" />
            <seealso cref="T:Atata.UnorderedList`1" />
        </member>
        <member name="T:Atata.UIComponent">
            <summary>
            Represents the base class for UI components.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Context">
            <summary>
            Gets the <see cref="T:Atata.AtataContext" /> instance with which this component is associated.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Owner">
            <summary>
            Gets the owner component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ScopeSource">
            <summary>
            Gets the source of the scope.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.UsesScopeCache">
            <summary>
            Gets a value indicating whether to use scope cache.
            Returns a <see cref="P:Atata.ICanUseCache.UsesCache" /> value of an associated with the component
            <see cref="T:Atata.UsesScopeCacheAttribute" /> or <see cref="T:Atata.UsesCacheAttribute" />.
            Returns <see langword="false" />, as by default, when the attribute is not associated.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentName">
            <summary>
            Gets or sets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentTypeName">
            <summary>
            Gets the name of the component type.
            Returns the value of <see cref="P:Atata.UIComponentDefinitionAttribute.ComponentTypeName" /> property for control from <see cref="T:Atata.ControlDefinitionAttribute" />
            and for page object from <see cref="T:Atata.PageObjectDefinitionAttribute" />.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ComponentFullName">
            <summary>
            Gets the full name of the component including parent component full name, own component name and own component type name.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Metadata">
            <summary>
            Gets the metadata of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.Scope">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement" /> instance that represents the scope HTML element associated with this component.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">Element not found.</exception>
        </member>
        <member name="P:Atata.UIComponent.CachedScope">
            <summary>
            Gets or sets the cached scope element.
            </summary>
        </member>
        <member name="P:Atata.UIComponent.ScopeContext">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext" /> instance that represents the scope search context
            (where to find the children of this component).
            By default is the same as <see cref="P:Atata.UIComponent.Scope" />.
            Also can execute <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
        </member>
        <member name="M:Atata.UIComponent.GetScope(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement" /> instance that represents the scope HTML element.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.IWebElement" /> instance of the scope.</returns>
        </member>
        <member name="M:Atata.UIComponent.GetScopeContext(Atata.SearchOptions)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.ISearchContext" /> instance that represents the scope search context
            (where to find the children of this component).
            Also can execute <see cref="F:Atata.TriggerEvents.BeforeAccess" /> and <see cref="F:Atata.TriggerEvents.AfterAccess" /> triggers.
            </summary>
            <param name="searchOptions">
            The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns>The <see cref="T:OpenQA.Selenium.ISearchContext" /> instance of the scope context.</returns>
        </member>
        <member name="M:Atata.UIComponent.BuildComponentFullName">
            <summary>
            Builds the full name of the component including parent component full name, own component name and own component type name.
            </summary>
            <returns>The full name of the component.</returns>
        </member>
        <member name="M:Atata.UIComponent.Exists(Atata.SearchOptions)">
            <summary>
            Determines whether the component exists.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true" /> if the component exists; otherwise, <see langword="false" />.</returns>
            <exception cref="T:OpenQA.Selenium.NoSuchElementException">
            The <paramref name="options" /> has <see cref="P:Atata.SearchOptions.IsSafely" /> property
            equal to <see langword="false" /> value and the component doesn't exist.
            </exception>
        </member>
        <member name="M:Atata.UIComponent.Missing(Atata.SearchOptions)">
            <summary>
            Determines whether the component is missing.
            </summary>
            <param name="options">
            The search options.
            If set to <see langword="null" />, then it uses <c>SearchOptions.Safely()</c>.</param>
            <returns><see langword="true" /> if the component is missing; otherwise, <see langword="false" />.</returns>
            <exception cref="T:Atata.NotMissingElementException">
            The <paramref name="options" /> has <see cref="P:Atata.SearchOptions.IsSafely" /> property
            equal to <see langword="false" /> value and the component exists.
            </exception>
        </member>
        <member name="M:Atata.UIComponent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance including <see cref="P:Atata.UIComponent.ComponentFullName" /> and <see cref="P:Atata.UIComponent.Scope" /> element details.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Atata.UIComponent.CleanUp">
            <summary>
            Cleans up the current instance.
            </summary>
        </member>
        <member name="M:Atata.UIComponent.ExecuteBehavior``1(System.Action{``0})">
            <summary>
            Gets a behavior attribute from the component's metadata and then invokes
            the specified <paramref name="behaviorExecutionAction" /> with passing the found behavior to it.
            </summary>
            <typeparam name="TBehaviorAttribute">The type of the behavior attribute.</typeparam>
            <param name="behaviorExecutionAction">The behavior execution action.</param>
        </member>
        <member name="M:Atata.UIComponent.ExecuteBehavior``2(System.Func{``0,``1})">
            <summary>
            Gets a behavior attribute from the component's metadata and then invokes
            the specified <paramref name="behaviorExecutionAction" /> with passing the found behavior to it.
            </summary>
            <typeparam name="TBehaviorAttribute">The type of the behavior attribute.</typeparam>
        </member>
        <member name="T:Atata.UIComponentAttributeProvider`1">
            <summary>
            Allows to access the component scope element's attribute values.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentAttributeProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> instance for the value of the specified control's scope element attribute.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The <see cref="T:Atata.ValueProvider`2" /> instance for the attribute's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.Get``1(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> instance for the value of the specified control's scope element attribute.
            </summary>
            <typeparam name="TValue">The type of the attribute value.</typeparam>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The <see cref="T:Atata.ValueProvider`2" /> instance for the attribute's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.GetValue(System.String)">
            <summary>
            Gets the value of the specified control's scope element attribute.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attribute's current value.
            Returns <see langword="null" /> if the value is not set.</returns>
        </member>
        <member name="M:Atata.UIComponentAttributeProvider`1.GetValue``1(System.String)">
            <summary>
            Gets the value of the specified control's scope element attribute.
            </summary>
            <typeparam name="TValue">The type of the attribute value.</typeparam>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attribute's current value.
            Returns <see langword="null" /> if the value is not set.</returns>
        </member>
        <member name="T:Atata.UIComponentCssProvider`1">
            <summary>
            Allows to access the component scope element's CSS property values.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentCssProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value of the specified control's scope element CSS property.
            </summary>
            <param name="propertyName">The name of the CSS property.</param>
            <returns>The <see cref="T:Atata.ValueProvider`2" /> of the CSS property's current value.</returns>
        </member>
        <member name="M:Atata.UIComponentCssProvider`1.GetValue(System.String)">
            <summary>
            Gets the value of the specified control's scope element CSS property.
            </summary>
            <param name="propertyName">The name of the CSS property.</param>
            <returns>The CSS property's current value.</returns>
        </member>
        <member name="T:Atata.UIComponentLocationProvider`1">
            <summary>
            Allows to access the component scope element's location (X and Y).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentLocationProvider`1.X">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the X location coordinate of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentLocationProvider`1.Y">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the Y location coordinate of the component.
            </summary>
        </member>
        <member name="T:Atata.UIComponentOffsetKind">
            <summary>
            Specifies the offset kind relative to UI component.
            </summary>
        </member>
        <member name="F:Atata.UIComponentOffsetKind.FromCenterInPercents">
            <summary>
            An offset from center of UI component in percents.
            </summary>
        </member>
        <member name="F:Atata.UIComponentOffsetKind.FromCenterInPixels">
            <summary>
            An offset from center of UI component in pixels.
            </summary>
        </member>
        <member name="F:Atata.UIComponentOffsetKind.FromTopLeftInPercents">
            <summary>
            An offset from top left point of UI component in percents.
            </summary>
        </member>
        <member name="F:Atata.UIComponentOffsetKind.FromTopLeftInPixels">
            <summary>
            An offset from top left point of UI component in pixels.
            </summary>
        </member>
        <member name="T:Atata.UIComponentScriptExecutor`1">
            <summary>
            Represents the script executor of UI component.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.#ctor(Atata.IUIComponent{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.UIComponentScriptExecutor`1" /> class.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="component" /> is null.</exception>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.Execute(System.String,System.Object[])">
            <summary>
            Executes the specified script.
            </summary>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.Execute``1(System.String,System.Object[])">
            <summary>
            Executes the specified script that returns the result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> of the result.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAgainst(System.String,System.Object[])">
            <summary>
            Executes the specified script against the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            It means that the first argument (<c>arguments[0]</c>) passed into the script is the component's element.
            </summary>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAgainst``1(System.String,System.Object[])">
            <summary>
            Executes the specified script against the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            The script should return the result of <typeparamref name="TResult" /> type.
            It means that the first argument (<c>arguments[0]</c>) passed into the script is the component's element.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> of the result.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAsync(System.String,System.Object[])">
            <summary>
            Executes the specified asynchronous script.
            </summary>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAsync``1(System.String,System.Object[])">
            <summary>
            Executes the specified asynchronous script that returns the result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> of the result.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAsyncAgainst(System.String,System.Object[])">
            <summary>
            Executes the specified asynchronous script against the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            It means that the first argument (<c>arguments[0]</c>) passed into the script is the component's element.
            </summary>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ExecuteAsyncAgainst``1(System.String,System.Object[])">
            <summary>
            Executes the specified asynchronous script against the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            The script should return the result of <typeparamref name="TResult" /> type.
            It means that the first argument (<c>arguments[0]</c>) passed into the script is the component's element.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="script">The script.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> of the result.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.SetValue(System.String)">
            <summary>
            <para>
            Sets the value to the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].value = arguments[1];
            </code>
            </para>
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.AddValue(System.String)">
            <summary>
            <para>
            Adds the specified value to the current value of the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            var currentValue = arguments[0].value;
            arguments[0].value = currentValue ? currentValue + arguments[1] : arguments[1];
            </code>
            </para>
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.SetValueAndDispatchChangeEvent(System.String)">
            <summary>
            <para>
            Sets the value to the <see cref="P:Atata.UIComponent.Scope" /> element of the current component and dispatches 'change' event.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].value = arguments[1];
            arguments[0].dispatchEvent(new Event('change'));
            </code>
            </para>
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.AddValueAndDispatchChangeEvent(System.String)">
            <summary>
            <para>
            Adds the specified value to the current value of the <see cref="P:Atata.UIComponent.Scope" /> element of the current component and dispatches 'change' event.
            </para>
            <para>
            Executable script:
            <code>
            var currentValue = arguments[0].value;
            arguments[0].value = currentValue ? currentValue + arguments[1] : arguments[1];
            arguments[0].dispatchEvent(new Event('change'));
            </code>
            </para>
            </summary>
            <param name="value">The value.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.DispatchEvent(System.String)">
            <summary>
            <para>
            Dispatches the specified event.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].dispatchEvent(new Event(arguments[1]));
            </code>
            </para>
            </summary>
            <param name="eventName">The name of the event.</param>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.Click">
            <summary>
            <para>
            Clicks the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].click();
            </code>
            </para>
            </summary>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.Focus">
            <summary>
            <para>
            Sets focus to the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].focus();
            </code>
            </para>
            </summary>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.Blur">
            <summary>
            <para>
            Removes focus from the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].blur();
            </code>
            </para>
            </summary>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponentScriptExecutor`1.ScrollIntoView">
            <summary>
            <para>
            Scrolls to the <see cref="P:Atata.UIComponent.Scope" /> element of the current component.
            </para>
            <para>
            Executable script:
            <code>
            arguments[0].scrollIntoView();
            </code>
            </para>
            </summary>
            <returns>An instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.UIComponentSizeProvider`1">
            <summary>
            Allows to access the component scope element's size (width and height).
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponentSizeProvider`1.Width">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the width of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentSizeProvider`1.Height">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the height of the component.
            </summary>
        </member>
        <member name="T:Atata.UIComponent`1">
            <summary>
            Represents the base class for UI components.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
        </member>
        <member name="P:Atata.UIComponent`1.Owner">
            <summary>
            Gets the owner page object.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.IsPresent">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value indicating
            whether the component is present considering the <see cref="T:Atata.Visibility" /> of component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.IsVisible">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value indicating
            whether the component is visible.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.IsVisibleInViewPort">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of a value indicating
            whether the component is visible in viewport.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Content">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the text content.
            Gets a content using <see cref="T:Atata.ContentGetBehaviorAttribute" /> associated with the component,
            which by default is <see cref="T:Atata.GetsContentFromSourceAttribute" /> with <see cref="F:Atata.ContentSource.Text" /> argument,
            meaning that by default it returns <see cref="P:OpenQA.Selenium.IWebElement.Text" /> property value
            of component scope's <see cref="T:OpenQA.Selenium.IWebElement" /> element.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ComponentLocation">
            <summary>
            Gets the <see cref="T:Atata.UIComponentLocationProvider`1" /> instance that provides an access to the scope element's location (X and Y).
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.ComponentSize">
            <summary>
            Gets the <see cref="T:Atata.UIComponentSizeProvider`1" /> instance that provides an access to the scope element's size (Width and Height).
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Attributes">
            <summary>
            Gets the <see cref="T:Atata.UIComponentAttributeProvider`1" /> instance that provides an access to the scope element's attributes.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Css">
            <summary>
            Gets the <see cref="T:Atata.UIComponentCssProvider`1" /> instance that provides an access to the scope element's CSS properties.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Script">
            <summary>
            Gets the <see cref="T:Atata.UIComponentScriptExecutor`1" /> instance that provides a set of methods for JavaScript execution.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Controls">
            <summary>
            Gets the list of child controls.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.OnInit">
            <summary>
            Called upon initialization before the <see cref="F:Atata.TriggerEvents.Init" /> triggers are executed.
            Calls <see cref="M:Atata.UIComponent`1.OnInit" /> method for all child controls.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.OnInitCompleted">
            <summary>
            Called when initialization is completed after the <see cref="F:Atata.TriggerEvents.Init" /> triggers are executed.
            Calls <see cref="M:Atata.UIComponent`1.OnInitCompleted" /> method for all child controls.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.Wait(Atata.Until,Atata.WaitOptions)">
            <summary>
            Waits until the specified component condition is met.
            </summary>
            <param name="until">The waiting condition.</param>
            <param name="options">The options.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetLocation">
            <summary>
            Gets the location of the component.
            </summary>
            <returns>The size.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetSize">
            <summary>
            Gets the size of the component.
            </summary>
            <returns>The size.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetContent">
            <summary>
            Gets the text content of the component by executing <see cref="T:Atata.ContentGetBehaviorAttribute" />.
            </summary>
            <returns>The text content.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetContent(Atata.ContentSource)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the text content using <paramref name="source" /> argument.
            </summary>
            <param name="source">The source of the content.</param>
            <returns>The <see cref="T:Atata.ValueProvider`2" /> of the text content.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.CreateValueProvider``1(System.String,System.Func{``0})">
            <summary>
            Creates a value provider with the specified <paramref name="providerName" /> and using <paramref name="valueGetFunction" />.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">The name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.ValueProvider`2" /> type.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.ExecuteTriggers(Atata.TriggerEvents)">
            <summary>
            Executes the triggers.
            </summary>
            <param name="on">The event to trigger.</param>
        </member>
        <member name="M:Atata.UIComponent`1.Find``1(System.Attribute[])">
            <summary>
            Creates a control of the specified <typeparamref name="TControl" /> type,
            optionally with additional attributes, that is a descendant of the current component.
            The control's element will be found using either
            the <see cref="T:Atata.FindAttribute" /> specified in <paramref name="attributes" /> parameter,
            or the default/applied <see cref="T:Atata.FindAttribute" /> associated with the <typeparamref name="TControl" /> type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="attributes">The attributes.</param>
            <returns>The created control instance.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.Find``1(System.String,System.Attribute[])">
            <summary>
            Creates a control of the specified <typeparamref name="TControl" /> type with the specified name,
            optionally with additional attributes, that is a descendant of the current component.
            The control's element will be found using either
            the <see cref="T:Atata.FindAttribute" /> specified in <paramref name="attributes" /> parameter,
            or the default/applied <see cref="T:Atata.FindAttribute" /> associated with the <typeparamref name="TControl" /> type.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="name">The control name, which is used in log.</param>
            <param name="attributes">The attributes.</param>
            <returns>The created control instance.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetAncestor``1">
            <summary>
            Gets the ancestor component of specified type.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.GetAncestorOrSelf``1">
            <summary>
            Gets the ancestor component of specified type or self.
            </summary>
            <typeparam name="TComponentToFind">The type of the component to find.</typeparam>
            <returns>The component or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.ClearCache">
            <summary>
            Clears all cache of the component and its descendant components.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.ClearCacheOfDescendants">
            <summary>
            Clears all cache of the descendant components.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.OnClearCache">
            <summary>
            Clears the cache of the component.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.ClearScopeCache">
            <summary>
            Clears the scope cache of the component.
            </summary>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.UIComponent`1.CleanUp">
            <summary>
            Cleans up the current instance.
            </summary>
        </member>
        <member name="T:Atata.UnorderedList`1">
            <summary>
            Represents the unordered list control (<c>&lt;ul&gt;</c>).
            Default search finds the first occurring <c>&lt;ul&gt;</c> element.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.TextListItem`1" />
        </member>
        <member name="T:Atata.UnorderedList`2">
            <summary>
            Represents the unordered list control (<c>&lt;ul&gt;</c>).
            Default search finds the first occurring <c>&lt;ul&gt;</c> element.
            </summary>
            <typeparam name="TItem">The type of the list item control.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <seealso cref="T:Atata.ItemsControl`2" />
            <seealso cref="T:Atata.ListItem`1" />
        </member>
        <member name="T:Atata.ContentExtractor">
            <summary>
            Provides the functionality to get the content of the component.
            </summary>
        </member>
        <member name="M:Atata.ContentExtractor.Get``1(Atata.IUIComponent{``0},Atata.ContentSource)">
            <summary>
            Gets the content of the component using <see cref="T:Atata.ContentSource" /> value.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="component">The component.</param>
            <param name="contentSource">The content source.</param>
            <returns>The content.</returns>
        </member>
        <member name="T:Atata.ContentSource">
            <summary>
            Specifies the content source of a component.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.Text">
            <summary>
            Uses <see cref="P:OpenQA.Selenium.IWebElement.Text" /> property of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.TextContent">
            <summary>
            Uses <c>textContent</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.InnerHtml">
            <summary>
            Uses <c>innerHTML</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.Value">
            <summary>
            Uses <c>value</c> attribute of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodes">
            <summary>
            Uses the concatenation of child nested text values.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element,
            filters only <c>Node.TEXT_NODE</c> and concatenates the <c>textContent</c> values of these nodes.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodesTrimmed">
            <summary>
            Uses the concatenation of child nested text values trimming each text.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element,
            filters only <c>Node.TEXT_NODE</c>, gets <c>textContent</c> of each node, trims each value and concatenates them.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.ChildTextNodesTrimmedAndSpaceJoined">
            <summary>
            Uses the concatenation of child nested text values trimming each text part and joining with <c>" "</c> separator.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element,
            filters only <c>Node.TEXT_NODE</c>, gets <c>textContent</c> of each node, trims each value and concatenates them delimiting with <c>" "</c> character.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.FirstChildTextNode">
            <summary>
            Uses the first child nested text value.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element,
            finds the first <c>Node.TEXT_NODE</c> and returns the <c>textContent</c> value of this node.
            Returns an empty string if there are no text nodes.
            </summary>
        </member>
        <member name="F:Atata.ContentSource.LastChildTextNode">
            <summary>
            Uses the last child nested text value.
            Executes the script that gets <c>childNodes</c> of component scope <see cref="T:OpenQA.Selenium.IWebElement" /> element,
            finds the last <c>Node.TEXT_NODE</c> and returns the <c>textContent</c> value of this node.
            Returns an empty string if there are no text nodes.
            </summary>
        </member>
        <member name="T:Atata.AtataBuildingContext">
            <summary>
            Represents the building context for <see cref="T:Atata.AtataContext" /> creation.
            It is used by <see cref="T:Atata.AtataContextBuilder" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DriverFactories">
            <summary>
            Gets the driver factories.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.LogConsumerConfigurations">
            <summary>
            Gets the log consumer configurations.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.Variables">
            <summary>
            Gets the variables dictionary.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.SecretStringsToMaskInLog">
            <summary>
            Gets the list of secret strings to mask in log.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ScreenshotConsumers">
            <summary>
            Gets the screenshot consumers.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DriverFactoryToUse">
            <summary>
            Gets the driver factory to use.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DriverInitializationStage">
            <summary>
            Gets or sets the driver initialization stage.
            The default value is <see cref="F:Atata.AtataContextDriverInitializationStage.Build" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.UsesLocalBrowser">
            <summary>
            Gets a value indicating whether it uses a local browser.
            Basically, determines whether <see cref="P:Atata.AtataBuildingContext.DriverFactoryToUse" /> is <see cref="T:Atata.IUsesLocalBrowser" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.LocalBrowserToUseName">
            <summary>
            Gets the name of the local browser to use or <see langword="null" />.
            Returns <see cref="P:Atata.IUsesLocalBrowser.BrowserName" /> value if <see cref="P:Atata.AtataBuildingContext.DriverFactoryToUse" /> is <see cref="T:Atata.IUsesLocalBrowser" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ConfiguredLocalBrowserNames">
            <summary>
            Gets the names of local browsers that this instance uses.
            Distinctly returns <see cref="P:Atata.IUsesLocalBrowser.BrowserName" /> values of all <see cref="P:Atata.AtataBuildingContext.DriverFactories" /> that are <see cref="T:Atata.IUsesLocalBrowser" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.TestNameFactory">
            <summary>
            Gets or sets the factory method of the test name.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.TestSuiteNameFactory">
            <summary>
            Gets or sets the factory method of the test suite name.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.TestSuiteTypeFactory">
            <summary>
            Gets or sets the factory method of the test suite type.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.TimeZone">
            <summary>
            Gets or sets the time zone.
            The default value is <see cref="P:System.TimeZoneInfo.Local" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.Attributes">
            <summary>
            Gets the context of the attributes.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.EventSubscriptions">
            <summary>
            Gets the list of event subscriptions.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes">
            <summary>
            Gets or sets the default assembly name pattern that is used to filter assemblies to find types in them.
            The default value is <c>@"^(?!System($|\..+$)|mscorlib$|netstandard$|Microsoft\..+)"</c>, which filters non-system assemblies.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindComponentTypes">
            <summary>
            Gets or sets the assembly name pattern that is used to filter assemblies to find component types in them.
            The default value is <see langword="null" />, which means to use <see cref="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindAttributeTypes">
            <summary>
            Gets or sets the assembly name pattern that is used to filter assemblies to find attribute types in them.
            The default value is <see langword="null" />, which means to use <see cref="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindEventTypes">
            <summary>
            Gets or sets the assembly name pattern that is used to filter assemblies to find event types in them.
            The default value is <see langword="null" />, which means to use <see cref="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindEventHandlerTypes">
            <summary>
            Gets or sets the assembly name pattern that is used to filter assemblies to find event handler types in them.
            The default value is <see langword="null" />, which means to use <see cref="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ArtifactsPathBuilder">
            <summary>
            Gets or sets the Artifacts directory path builder.
            The default builder returns <c>"{basedir}/artifacts/{build-start:yyyyMMddTHHmmss}{test-suite-name-sanitized:/*}{test-name-sanitized:/*}"</c>.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseRetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.BaseRetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ElementFindTimeout">
            <summary>
            Gets the element find timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to <c>5</c> seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.ElementFindRetryInterval">
            <summary>
            Gets the element find retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.WaitingTimeout">
            <summary>
            Gets the waiting timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to 5 seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.WaitingRetryInterval">
            <summary>
            Gets the waiting retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.VerificationTimeout">
            <summary>
            Gets the verification timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to <c>5</c> seconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.VerificationRetryInterval">
            <summary>
            Gets the verification retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.DefaultControlVisibility">
            <summary>
            Gets or sets the default control visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AssertionExceptionType">
            <summary>
            Gets or sets the type of the assertion exception.
            The default value is a type of <see cref="T:Atata.AssertionException" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AggregateAssertionExceptionType">
            <summary>
            Gets or sets the type of the aggregate assertion exception.
            The default value is a type of <see cref="T:Atata.AggregateAssertionException" />.
            The exception type should have public constructor with <c>IEnumerable&lt;AssertionResult&gt;</c> argument.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.AggregateAssertionStrategy">
            <summary>
            Gets or sets the aggregate assertion strategy.
            The default value is an instance of <see cref="T:Atata.AtataAggregateAssertionStrategy" />.
            </summary>
        </member>
        <member name="P:Atata.AtataBuildingContext.WarningReportStrategy">
            <summary>
            Gets or sets the strategy for warning assertion reporting.
            The default value is an instance of <see cref="T:Atata.AtataWarningReportStrategy" />.
            </summary>
        </member>
        <member name="M:Atata.AtataBuildingContext.GetDriverFactory(System.String)">
            <summary>
            Gets the driver factory by the specified alias.
            </summary>
            <param name="alias">The alias of the driver factory.</param>
            <returns>The driver factory or <see langword="null" />.</returns>
        </member>
        <member name="M:Atata.AtataBuildingContext.System#ICloneable#Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>The copied <see cref="T:Atata.AtataBuildingContext" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataBuildingContext.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>The copied <see cref="T:Atata.AtataBuildingContext" /> instance.</returns>
        </member>
        <member name="T:Atata.AtataContext">
            <summary>
            Represents the Atata context, the entry point for the test set-up.
            </summary>
        </member>
        <member name="F:Atata.AtataContext.DefaultRetryTimeout">
            <summary>
            Gets the base retry timeout, which is <c>5</c> seconds.
            </summary>
        </member>
        <member name="F:Atata.AtataContext.DefaultRetryInterval">
            <summary>
            Gets the default retry interval, which is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Current">
            <summary>
            Gets or sets the current context.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ModeOfCurrent">
            <summary>
            Gets or sets the mode of <see cref="P:Atata.AtataContext.Current" /> property.
            The default value is <see cref="F:Atata.AtataContextModeOfCurrent.AsyncLocal" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.GlobalConfiguration">
            <summary>
            Gets the global configuration.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BuildStart">
            <summary>
            Gets the build start local date and time.
            Contains the same value for all the tests being executed within one build.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BuildStartUtc">
            <summary>
            Gets the build start UTC date and time.
            Contains the same value for all the tests being executed within one build.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.HasDriver">
            <summary>
            Gets a value indicating whether this instance has <see cref="P:Atata.AtataContext.Driver" /> instance.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.DriverAlias">
            <summary>
            Gets the driver alias.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.DriverInitializationStage">
            <summary>
            Gets the driver initialization stage.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Log">
            <summary>
            Gets the instance of the log manager.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestName">
            <summary>
            Gets the name of the test.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestNameSanitized">
            <summary>
            Gets the name of the test sanitized for file path/name.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestSuiteName">
            <summary>
            Gets the name of the test suite (fixture/class).
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestSuiteNameSanitized">
            <summary>
            Gets the name of the test suite sanitized for file path/name.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TestSuiteType">
            <summary>
            Gets the test suite (fixture/class) type.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.StartedAt">
            <summary>
            Gets the local date/time of the start.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.StartedAtUtc">
            <summary>
            Gets the UTC date/time of the start.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.TimeZone">
            <summary>
            Gets the time zone.
            The default value is <see cref="P:System.TimeZoneInfo.Local" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseRetryTimeout">
            <summary>
            Gets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.BaseRetryInterval">
            <summary>
            Gets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ElementFindTimeout">
            <summary>
            Gets the element find timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ElementFindRetryInterval">
            <summary>
            Gets the element find retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.WaitingTimeout">
            <summary>
            Gets the waiting timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.WaitingRetryInterval">
            <summary>
            Gets the waiting retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.VerificationTimeout">
            <summary>
            Gets the verification timeout.
            The default value is <c>5</c> seconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.VerificationRetryInterval">
            <summary>
            Gets the verification retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.DefaultControlVisibility">
            <summary>
            Gets the default control visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Culture">
            <summary>
            Gets the culture.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            The default value is a type of <see cref="T:Atata.AssertionException" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AggregateAssertionExceptionType">
            <summary>
            Gets the type of the aggregate assertion exception.
            The default value is a type of <see cref="T:Atata.AggregateAssertionException" />.
            The exception type should have public constructor with <c>IEnumerable&lt;AssertionResult&gt;</c> argument.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AggregateAssertionStrategy">
            <summary>
            Gets the aggregate assertion strategy.
            The default value is an instance of <see cref="T:Atata.AtataAggregateAssertionStrategy" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AggregateAssertionLevel">
            <summary>
            Gets the aggregate assertion depth level.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.WarningReportStrategy">
            <summary>
            Gets the strategy for warning assertion reporting.
            The default value is an instance of <see cref="T:Atata.AtataWarningReportStrategy" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.AssertionResults">
            <summary>
            Gets the list of all assertion results.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.PendingFailureAssertionResults">
            <summary>
            Gets the list of pending assertion results with <see cref="F:Atata.AssertionStatus.Failed" /> or <see cref="F:Atata.AssertionStatus.Warning" /> status.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Attributes">
            <summary>
            Gets the context of the attributes.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Artifacts">
            <summary>
            Gets the <see cref="T:Atata.DirectorySubject" /> of Artifacts directory.
            Artifacts directory can contain any files produced during test execution, logs, screenshots, downloads, etc.
            The default Artifacts directory path is <c>"{basedir}/artifacts/{build-start:yyyyMMddTHHmmss}{test-suite-name-sanitized:/*}{test-name-sanitized:/*}"</c>.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Go">
            <summary>
            Gets the <see cref="T:Atata.AtataNavigator" /> instance,
            which provides the navigation functionality between pages and windows.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.PageObject">
            <summary>
            Gets the current page object.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.UIComponentAccessChainScopeCache">
            <summary>
            Gets the UI component access chain scope cache.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ObjectCreator">
            <summary>
            Gets the object creator.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ObjectConverter">
            <summary>
            Gets the object converter.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.ObjectMapper">
            <summary>
            Gets the object mapper.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.EventBus">
            <summary>
            Gets the event bus, which can used to subscribe to and publish events.
            </summary>
        </member>
        <member name="P:Atata.AtataContext.Variables">
            <summary>
            Gets the variables dictionary.
            <para>
            The list of predefined variables:
            <list type="bullet">
            <item><c>build-start</c></item>
            <item><c>build-start-utc</c></item>
            <item><c>basedir</c></item>
            <item><c>artifacts</c></item>
            <item><c>test-name-sanitized</c></item>
            <item><c>test-name</c></item>
            <item><c>test-suite-name-sanitized</c></item>
            <item><c>test-suite-name</c></item>
            <item><c>test-start</c></item>
            <item><c>test-start-utc</c></item>
            <item><c>driver-alias</c></item>
            </list>
            </para>
            <para>
            Custom variables can be added as well.
            </para>
            </summary>
        </member>
        <member name="M:Atata.AtataContext.Configure">
            <summary>
            Creates <see cref="T:Atata.AtataContextBuilder" /> instance for <see cref="T:Atata.AtataContext" /> configuration.
            Sets the value to <see cref="P:Atata.AtataContextBuilder.BuildingContext" /> copied from <see cref="P:Atata.AtataContext.GlobalConfiguration" />.
            </summary>
            <returns>The created <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContext.AggregateAssert(System.Action,System.String)">
            <summary>
            Executes aggregate assertion using <see cref="P:Atata.AtataContext.AggregateAssertionStrategy" />.
            </summary>
            <param name="action">The action to execute in scope of aggregate assertion.</param>
            <param name="assertionScopeName">
            Name of the scope being asserted (page object, control, etc.).
            Is used to identify the assertion section in log.
            Can be null.
            </param>
        </member>
        <member name="M:Atata.AtataContext.CleanUp(System.Boolean)">
            <summary>
            Cleans up the test context.
            </summary>
            <param name="quitDriver">if set to <see langword="true" /> quits WebDriver.</param>
        </member>
        <member name="M:Atata.AtataContext.RestartDriver">
            <summary>
            Restarts the driver.
            </summary>
        </member>
        <member name="M:Atata.AtataContext.FillTemplateString(System.String)">
            <summary>
            Fills the template string with variables of this <see cref="T:Atata.AtataContext" /> instance.
            The <paramref name="template" /> can contain variables wrapped with curly braces, e.g. <c>"{varName}"</c>.
            Variables support standard .NET formatting (<c>"{numberVar:D5}"</c> or <c>"{dateTimeVar:yyyy-MM-dd}"</c>)
            and extended formatting for strings
            (for example, <c>"{stringVar:/*}"</c> appends <c>"/"</c> to the beginning of the string, if variable is not null).
            <para>
            The list of predefined variables:
            <list type="bullet">
            <item><c>{build-start}</c></item>
            <item><c>{build-start-utc}</c></item>
            <item><c>{basedir}</c></item>
            <item><c>{artifacts}</c></item>
            <item><c>{test-name-sanitized}</c></item>
            <item><c>{test-name}</c></item>
            <item><c>{test-suite-name-sanitized}</c></item>
            <item><c>{test-suite-name}</c></item>
            <item><c>{test-start}</c></item>
            <item><c>{test-start-utc}</c></item>
            <item><c>{driver-alias}</c></item>
            </list>
            </para>
            </summary>
            <param name="template">The template string.</param>
            <returns>The filled string.</returns>
        </member>
        <member name="M:Atata.AtataContext.FillTemplateString(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Fills the template string with variables of this <see cref="T:Atata.AtataContext" /> instance.
            The <paramref name="template" /> can contain variables wrapped with curly braces, e.g. <c>"{varName}"</c>.
            Variables support standard .NET formatting (<c>"{numberVar:D5}"</c> or <c>"{dateTimeVar:yyyy-MM-dd}"</c>)
            and extended formatting for strings
            (for example, <c>"{stringVar:/*}"</c> appends <c>"/"</c> to the beginning of the string, if variable is not null).
            <para>
            The list of predefined variables:
            <list type="bullet">
            <item><c>{build-start}</c></item>
            <item><c>{build-start-utc}</c></item>
            <item><c>{basedir}</c></item>
            <item><c>{artifacts}</c></item>
            <item><c>{test-name-sanitized}</c></item>
            <item><c>{test-name}</c></item>
            <item><c>{test-suite-name-sanitized}</c></item>
            <item><c>{test-suite-name}</c></item>
            <item><c>{test-start}</c></item>
            <item><c>{test-start-utc}</c></item>
            <item><c>{driver-alias}</c></item>
            </list>
            </para>
            </summary>
            <returns>The filled string.</returns>
            <param name="template">The template string.</param>
            <param name="additionalVariables">The additional variables.</param>
        </member>
        <member name="M:Atata.AtataContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Atata.AtataContextBuilder">
            <summary>
            Represents the builder of <see cref="T:Atata.AtataContext" />.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.BuildingContext">
            <summary>
            Gets the building context.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.Attributes">
            <summary>
            Gets the builder of context attributes,
            which provides the functionality to add extra attributes to different metadata levels:
            global, assembly, component and property.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.EventSubscriptions">
            <summary>
            Gets the builder of event subscriptions,
            which provides the methods to subscribe to Atata and custom events.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.LogConsumers">
            <summary>
            Gets the builder of log consumers,
            which provides the methods to add log consumers.
            </summary>
        </member>
        <member name="P:Atata.AtataContextBuilder.ScreenshotConsumers">
            <summary>
            Gets the builder of screenshot consumers,
            which provides the methods to add screenshot consumers.
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureDriver``1(System.String,System.Func{``0})">
            <summary>
            Returns an existing or creates a new builder for <typeparamref name="TDriverBuilder" /> by the specified alias.
            </summary>
            <typeparam name="TDriverBuilder">The type of the driver builder.</typeparam>
            <param name="alias">The driver alias.</param>
            <param name="driverBuilderCreator">The function that creates a driver builder.</param>
            <returns>The <typeparamref name="TDriverBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver``1(``0)">
            <summary>
            Use the driver builder.
            </summary>
            <typeparam name="TDriverBuilder">The type of the driver builder.</typeparam>
            <param name="driverBuilder">The driver builder.</param>
            <returns>The <typeparamref name="TDriverBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(System.String)">
            <summary>
            Sets the alias of the driver to use.
            </summary>
            <param name="alias">The alias of the driver.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(OpenQA.Selenium.IWebDriver)">
            <summary>
            Use specified driver instance.
            </summary>
            <param name="driver">The driver to use.</param>
            <returns>The <see cref="T:Atata.CustomDriverAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriver(System.Func{OpenQA.Selenium.IWebDriver})">
            <summary>
            Use custom driver factory method.
            </summary>
            <param name="driverFactory">The driver factory method.</param>
            <returns>The <see cref="T:Atata.CustomDriverAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDriverInitializationStage(Atata.AtataContextDriverInitializationStage)">
            <summary>
            Sets the driver initialization stage.
            The default value is <see cref="F:Atata.AtataContextDriverInitializationStage.Build" />.
            </summary>
            <param name="stage">The stage.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseChrome">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Chrome.ChromeDriver" />
            with default <see cref="F:Atata.DriverAliases.Chrome" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.ChromeAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseFirefox">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Firefox.FirefoxDriver" />
            with default <see cref="F:Atata.DriverAliases.Firefox" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.FirefoxAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseInternetExplorer">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.IE.InternetExplorerDriver" />
            with default <see cref="F:Atata.DriverAliases.InternetExplorer" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.InternetExplorerAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseEdge">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Edge.EdgeDriver" />
            with default <see cref="F:Atata.DriverAliases.Edge" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.EdgeAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseOpera">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Opera.OperaDriver" />
            with default <see cref="F:Atata.DriverAliases.Opera" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.OperaAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseSafari">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Safari.SafariDriver" />
            with default <see cref="F:Atata.DriverAliases.Safari" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.SafariAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseRemoteDriver">
            <summary>
            Creates and returns a new builder for <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver" />
            with default <see cref="F:Atata.DriverAliases.Remote" /> alias.
            Sets this builder as a one to use for a driver creation.
            </summary>
            <returns>The <see cref="T:Atata.RemoteDriverAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureChrome(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Chrome.ChromeDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Chrome" />.
            </param>
            <returns>The <see cref="T:Atata.ChromeAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureFirefox(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Firefox.FirefoxDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Firefox" />.
            </param>
            <returns>The <see cref="T:Atata.FirefoxAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureInternetExplorer(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.IE.InternetExplorerDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.InternetExplorer" />.
            </param>
            <returns>The <see cref="T:Atata.InternetExplorerAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureEdge(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Edge.EdgeDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Edge" />.
            </param>
            <returns>The <see cref="T:Atata.EdgeAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureOpera(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Opera.OperaDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Opera" />.
            </param>
            <returns>The <see cref="T:Atata.OperaAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureSafari(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Safari.SafariDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Safari" />.
            </param>
            <returns>The <see cref="T:Atata.SafariAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.ConfigureRemoteDriver(System.String)">
            <summary>
            Returns an existing or creates a new builder for <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver" /> by the specified alias.
            </summary>
            <param name="alias">
            The driver alias.
            The default value is <see cref="F:Atata.DriverAliases.Remote" />.
            </param>
            <returns>The <see cref="T:Atata.RemoteDriverAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Adds the variable.
            </summary>
            <param name="key">The variable key.</param>
            <param name="value">The variable value.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddVariables(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the variables.
            </summary>
            <param name="variables">The variables to add.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AddSecretStringToMaskInLog(System.String,System.String)">
            <summary>
            Adds the secret string to mask in log.
            </summary>
            <param name="value">The secret string value.</param>
            <param name="mask">The mask, which should replace the secret string.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestName(System.Func{System.String})">
            <summary>
            Sets the factory method of the test name.
            </summary>
            <param name="testNameFactory">The factory method of the test name.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestName(System.String)">
            <summary>
            Sets the name of the test.
            </summary>
            <param name="testName">The name of the test.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestSuiteName(System.Func{System.String})">
            <summary>
            Sets the factory method of the test suite name.
            </summary>
            <param name="testSuiteNameFactory">The factory method of the test suite name.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestSuiteName(System.String)">
            <summary>
            Sets the name of the test suite (fixture/class).
            </summary>
            <param name="testSuiteName">The name of the test suite.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestSuiteType(System.Func{System.Type})">
            <summary>
            Sets the factory method of the test suite (fixture/class) type.
            </summary>
            <param name="testSuiteTypeFactory">The factory method of the test suite type.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTestSuiteType(System.Type)">
            <summary>
            Sets the type of the test suite (fixture/class).
            </summary>
            <param name="testSuiteType">The type of the test suite.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseUtcTimeZone">
            <summary>
            Sets the UTC time zone.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTimeZone(System.String)">
            <summary>
            Sets the time zone by identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.
            </summary>
            <param name="timeZoneId">The time zone identifier.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseTimeZone(System.TimeZoneInfo)">
            <summary>
            Sets the time zone.
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseUrl(System.String)">
            <summary>
            Sets the base URL.
            </summary>
            <param name="baseUrl">The base URL.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseRetryTimeout(System.TimeSpan)">
            <summary>
            Sets the base retry timeout.
            The default value is <c>5</c> seconds.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseBaseRetryInterval(System.TimeSpan)">
            <summary>
            Sets the base retry interval.
            The default value is <c>500</c> milliseconds.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseElementFindTimeout(System.TimeSpan)">
            <summary>
            Sets the element find timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseElementFindRetryInterval(System.TimeSpan)">
            <summary>
            Sets the element find retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseWaitingTimeout(System.TimeSpan)">
            <summary>
            Sets the waiting timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseWaitingRetryInterval(System.TimeSpan)">
            <summary>
            Sets the waiting retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseVerificationTimeout(System.TimeSpan)">
            <summary>
            Sets the verification timeout.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryTimeout" />, which is equal to <c>5</c> seconds by default.
            </summary>
            <param name="timeout">The retry timeout.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseVerificationRetryInterval(System.TimeSpan)">
            <summary>
            Sets the verification retry interval.
            The default value is taken from <see cref="P:Atata.AtataBuildingContext.BaseRetryInterval" />, which is equal to <c>500</c> milliseconds by default.
            </summary>
            <param name="interval">The retry interval.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDefaultControlVisibility(Atata.Visibility)">
            <summary>
            Sets the default control visibility.
            The default value is <see cref="F:Atata.Visibility.Any" />.
            </summary>
            <param name="visibility">The visibility.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the culture.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="culture">The culture.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseCulture(System.String)">
            <summary>
            Sets the culture by the name.
            The default value is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
            <param name="cultureName">The name of the culture.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssertionExceptionType``1">
            <summary>
            Sets the type of the assertion exception.
            The default value is a type of <see cref="T:Atata.AssertionException" />.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssertionExceptionType(System.Type)">
            <summary>
            Sets the type of the assertion exception.
            The default value is a type of <see cref="T:Atata.AssertionException" />.
            </summary>
            <param name="exceptionType">The type of the exception.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAggregateAssertionExceptionType``1">
            <summary>
            Sets the type of aggregate assertion exception.
            The default value is a type of <see cref="T:Atata.AggregateAssertionException" />.
            The exception type should have public constructor with <c>IEnumerable&lt;AssertionResult&gt;</c> argument.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAggregateAssertionExceptionType(System.Type)">
            <summary>
            Sets the type of aggregate assertion exception.
            The default value is a type of <see cref="T:Atata.AggregateAssertionException" />.
            The exception type should have public constructor with <c>IEnumerable&lt;AssertionResult&gt;</c> argument.
            </summary>
            <param name="exceptionType">The type of the exception.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDefaultAssemblyNamePatternToFindTypes(System.String)">
            <summary>
            Sets the default assembly name pattern that is used to filter assemblies to find types in them.
            Modifies the <see cref="P:Atata.AtataBuildingContext.DefaultAssemblyNamePatternToFindTypes" /> property value of <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssemblyNamePatternToFindComponentTypes(System.String)">
            <summary>
            Sets the assembly name pattern that is used to filter assemblies to find component types in them.
            Modifies the <see cref="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindComponentTypes" /> property value of <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssemblyNamePatternToFindAttributeTypes(System.String)">
            <summary>
            Sets the assembly name pattern that is used to filter assemblies to find attribute types in them.
            Modifies the <see cref="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindAttributeTypes" /> property value of <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssemblyNamePatternToFindEventTypes(System.String)">
            <summary>
            Sets the assembly name pattern that is used to filter assemblies to find event types in them.
            Modifies the <see cref="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindEventTypes" /> property value of <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAssemblyNamePatternToFindEventHandlerTypes(System.String)">
            <summary>
            Sets the assembly name pattern that is used to filter assemblies to find event handler types in them.
            Modifies the <see cref="P:Atata.AtataBuildingContext.AssemblyNamePatternToFindEventHandlerTypes" /> property value of <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseArtifactsPath(System.String)">
            <summary>
            Sets the path to the Artifacts directory.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseArtifactsPath(System.Func{Atata.AtataContext,System.String})">
            <summary>
            Sets the builder of the path to the Artifacts directory.
            </summary>
            <param name="directoryPathBuilder">The directory path builder.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseDefaultArtifactsPathIncludingBuildStart(System.Boolean)">
            <summary>
            Sets the default Artifacts path with optionally including <c>"{build-start:yyyyMMddTHHmmss}"</c> folder in the path.
            </summary>
            <param name="include">Whether to include the <c>"{build-start:yyyyMMddTHHmmss}"</c> folder in the path.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitTestName">
            <summary>
            Defines that the name of the test should be taken from the NUnit test.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitTestSuiteName">
            <summary>
            Defines that the name of the test suite should be taken from the NUnit test fixture.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitTestSuiteType">
            <summary>
            Defines that the type of the test suite should be taken from the NUnit test fixture.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitAggregateAssertionStrategy">
            <summary>
            Sets <see cref="T:Atata.NUnitAggregateAssertionStrategy" /> as the aggregate assertion strategy.
            The <see cref="T:Atata.NUnitAggregateAssertionStrategy" /> uses NUnit's <c>Assert.Multiple</c> method for aggregate assertion.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAggregateAssertionStrategy``1">
            <summary>
            Sets the aggregate assertion strategy.
            </summary>
            <typeparam name="TAggregateAssertionStrategy">The type of the aggregate assertion strategy.</typeparam>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAggregateAssertionStrategy(Atata.IAggregateAssertionStrategy)">
            <summary>
            Sets the aggregate assertion strategy.
            </summary>
            <param name="strategy">The aggregate assertion strategy.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitWarningReportStrategy">
            <summary>
            Sets <see cref="T:Atata.NUnitWarningReportStrategy" /> as the strategy for warning assertion reporting.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseWarningReportStrategy(Atata.IWarningReportStrategy)">
            <summary>
            Sets the strategy for warning assertion reporting.
            </summary>
            <param name="strategy">The warning report strategy.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.LogNUnitError">
            <summary>
            Defines that an error occurred during the NUnit test execution should be added to the log during the cleanup.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.TakeScreenshotOnNUnitError(System.String)">
            <summary>
            Defines that an error occurred during the NUnit test execution should be captured by a screenshot during the cleanup.
            </summary>
            <param name="title">The screenshot title.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnCleanUpAddArtifactsToNUnitTestContext">
            <summary>
            Defines that on <see cref="T:Atata.AtataContext" /> clean-up the files stored in Artifacts directory
            should be added to NUnit <c>TestContext</c>.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnCleanUpAddDirectoryFilesToNUnitTestContext(System.String)">
            <summary>
            Defines that on <see cref="T:Atata.AtataContext" /> clean-up the files stored in the directory
            specified by <paramref name="directoryPath" /> should be added to NUnit <c>TestContext</c>.
            Directory path supports template variables.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnCleanUpAddDirectoryFilesToNUnitTestContext(System.Func{System.String})">
            <summary>
            Defines that on <see cref="T:Atata.AtataContext" /> clean-up the files stored in the directory
            specified by <paramref name="directoryPathBuilder" /> should be added to NUnit <c>TestContext</c>.
            Directory path supports template variables.
            </summary>
            <param name="directoryPathBuilder">The directory path builder.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.OnCleanUpAddDirectoryFilesToNUnitTestContext(System.Func{Atata.AtataContext,System.String})">
            <summary>
            Defines that on <see cref="T:Atata.AtataContext" /> clean-up the files stored in the directory
            specified by <paramref name="directoryPathBuilder" /> should be added to NUnit <c>TestContext</c>.
            Directory path supports template variables.
            </summary>
            <param name="directoryPathBuilder">The directory path builder.</param>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseNUnitAssertionExceptionType">
            <summary>
            Sets the type of <c>NUnit.Framework.AssertionException</c> as the assertion exception type.
            The default value is a type of <see cref="T:Atata.AssertionException" />.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.UseAllNUnitFeatures">
            <summary>
            Enables all NUnit features for Atata.
            Executes the following methods:
            <list type="bullet">
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitTestName" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitTestSuiteName" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitTestSuiteType" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitAssertionExceptionType" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitAggregateAssertionStrategy" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.UseNUnitWarningReportStrategy" />,</item>
            <item><see cref="M:Atata.LogConsumersAtataContextBuilder.AddNUnitTestContext" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.LogNUnitError" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.TakeScreenshotOnNUnitError(System.String)" />,</item>
            <item><see cref="M:Atata.AtataContextBuilder.OnCleanUpAddArtifactsToNUnitTestContext" />.</item>
            </list>
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.Clear">
            <summary>
            Clears the <see cref="P:Atata.AtataContextBuilder.BuildingContext" />.
            </summary>
            <returns>The <see cref="T:Atata.AtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.Build">
            <summary>
            Builds the <see cref="T:Atata.AtataContext" /> instance and sets it to <see cref="P:Atata.AtataContext.Current" /> property.
            </summary>
            <returns>The created <see cref="T:Atata.AtataContext" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AutoSetUpDriverToUse">
            <summary>
            <para>
            Sets up driver with auto version detection for the local browser to use.
            Gets the name of the local browser to use from <see cref="P:Atata.AtataBuildingContext.LocalBrowserToUseName" /> property.
            Then invokes <c>Atata.WebDriverSetup.DriverSetup.AutoSetUpSafely(...)</c> static method
            from <c>Atata.WebDriverSetup</c> package.
            </para>
            <para>
            In order to use this method,
            ensure that <c>Atata.WebDriverSetup</c> package is installed.
            </para>
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilder.AutoSetUpDriverToUseAsync">
            <summary>
            <para>
            Sets up driver with auto version detection for the local browser to use.
            Gets the name of the local browser to use from <see cref="P:Atata.AtataBuildingContext.LocalBrowserToUseName" /> property.
            Then invokes <c>Atata.WebDriverSetup.DriverSetup.AutoSetUpSafely(...)</c> static method
            from <c>Atata.WebDriverSetup</c> package.
            </para>
            <para>
            In order to use this method,
            ensure that <c>Atata.WebDriverSetup</c> package is installed.
            </para>
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Atata.AtataContextBuilder.AutoSetUpConfiguredDrivers">
            <summary>
            <para>
            Sets up drivers with auto version detection for the local configured browsers.
            Gets the names of configured local browsers from <see cref="P:Atata.AtataBuildingContext.ConfiguredLocalBrowserNames" /> property.
            Then invokes <c>Atata.WebDriverSetup.DriverSetup.AutoSetUpSafely(...)</c> static method
            from <c>Atata.WebDriverSetup</c> package.
            </para>
            <para>
            In order to use this method,
            ensure that <c>Atata.WebDriverSetup</c> package is installed.
            </para>
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilder.AutoSetUpConfiguredDriversAsync">
            <summary>
            <para>
            Sets up drivers with auto version detection for the local configured browsers.
            Gets the names of configured local browsers from <see cref="P:Atata.AtataBuildingContext.ConfiguredLocalBrowserNames" /> property.
            Then invokes <c>Atata.WebDriverSetup.DriverSetup.AutoSetUpSafely(...)</c> static method
            from <c>Atata.WebDriverSetup</c> package.
            </para>
            <para>
            In order to use this method,
            ensure that <c>Atata.WebDriverSetup</c> package is installed.
            </para>
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Atata.AtataContextBuilderExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.AtataContextBuilder" />.
            </summary>
        </member>
        <member name="M:Atata.AtataContextBuilderExtensions.WithProperties``1(``0,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the context.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <param name="builder">The builder.</param>
            <param name="propertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="P:Atata.AtataContextBuilder`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.AtataContextDriverInitializationStage">
            <summary>
            Specifies the stage of <see cref="T:Atata.AtataContext" /> driver initialization.
            </summary>
        </member>
        <member name="F:Atata.AtataContextDriverInitializationStage.None">
            <summary>
            Should not be initialized.
            </summary>
        </member>
        <member name="F:Atata.AtataContextDriverInitializationStage.Build">
            <summary>
            Initialize upon build.
            </summary>
        </member>
        <member name="F:Atata.AtataContextDriverInitializationStage.OnDemand">
            <summary>
            Initialize on demand.
            </summary>
        </member>
        <member name="T:Atata.AtataContextModeOfCurrent">
            <summary>
            Defines the modes of <see cref="P:Atata.AtataContext.Current" /> property.
            </summary>
        </member>
        <member name="F:Atata.AtataContextModeOfCurrent.ThreadStatic">
            <summary>
            The <see cref="P:Atata.AtataContext.Current" /> value is thread-static (unique for each thread).
            </summary>
        </member>
        <member name="F:Atata.AtataContextModeOfCurrent.Static">
            <summary>
            The <see cref="P:Atata.AtataContext.Current" /> value is static (same for all threads).
            </summary>
        </member>
        <member name="F:Atata.AtataContextModeOfCurrent.AsyncLocal">
            <summary>
            The <see cref="P:Atata.AtataContext.Current" /> value is unique for each given asynchronous control flow.
            </summary>
        </member>
        <member name="T:Atata.AtataNavigator">
            <summary>
            Represents the navigation functionality between pages and windows.
            </summary>
        </member>
        <member name="M:Atata.AtataNavigator.#ctor(Atata.AtataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AtataNavigator" /> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atata.AtataNavigator.To``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="url">The URL.</param>
            <param name="navigate">If set to <see langword="true" /> executes page object navigation functionality.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.AtataNavigator.ToWindow``1(``0,System.String,System.Boolean)">
            <summary>
            Navigates to the window with the specified page object by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.AtataNavigator.ToWindow``1(System.String,System.Boolean)">
            <summary>
            Navigates to the window by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.AtataNavigator.ToNextWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the next window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.AtataNavigator.ToPreviousWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the previous window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.AtataNavigator.ToUrl(System.String)">
            <summary>
            Navigates to the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:Atata.AssemblyAttributesAtataContextBuilder">
            <summary>
            Represents the builder of assembly attributes.
            </summary>
        </member>
        <member name="M:Atata.AssemblyAttributesAtataContextBuilder.#ctor(System.Reflection.Assembly,Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AssemblyAttributesAtataContextBuilder" /> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="T:Atata.AtataAttributesContext">
            <summary>
            Represents the attributes context associated with <see cref="T:Atata.AtataContext" />.
            </summary>
        </member>
        <member name="M:Atata.AtataAttributesContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AtataAttributesContext" /> class.
            </summary>
        </member>
        <member name="P:Atata.AtataAttributesContext.Global">
            <summary>
            Gets the list of global attributes.
            </summary>
        </member>
        <member name="P:Atata.AtataAttributesContext.AssemblyMap">
            <summary>
            Gets the map of assembly attributes.
            </summary>
        </member>
        <member name="P:Atata.AtataAttributesContext.ComponentMap">
            <summary>
            Gets the map of component attributes.
            </summary>
        </member>
        <member name="P:Atata.AtataAttributesContext.PropertyMap">
            <summary>
            Gets the map of component property attributes.
            </summary>
        </member>
        <member name="M:Atata.AtataAttributesContext.System#ICloneable#Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>The copied <see cref="T:Atata.AtataAttributesContext" /> instance.</returns>
        </member>
        <member name="M:Atata.AtataAttributesContext.Clone">
            <summary>
            Creates a copy of the current instance.
            </summary>
            <returns>The copied <see cref="T:Atata.AtataAttributesContext" /> instance.</returns>
        </member>
        <member name="T:Atata.AttributesAtataContextBuilder">
            <summary>
            Represents the root builder of <see cref="T:Atata.AtataAttributesContext" />.
            </summary>
        </member>
        <member name="F:Atata.AttributesAtataContextBuilder.AtataAssembliesNamePattern">
            <summary>
            The regex pattern for Atata assembly names.
            </summary>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.AttributesAtataContextBuilder" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="P:Atata.AttributesAtataContextBuilder.Global">
            <summary>
            Gets the attributes builder of global level.
            </summary>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.Assembly(System.String)">
            <summary>
            Creates and returns the attributes builder for the assembly with the specified name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>An instance of <see cref="T:Atata.AssemblyAttributesAtataContextBuilder" />.</returns>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.Assembly(System.Reflection.Assembly)">
            <summary>
            Creates and returns the attributes builder for the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>An instance of <see cref="T:Atata.AssemblyAttributesAtataContextBuilder" />.</returns>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.Component``1">
            <summary>
            Creates and returns the attributes builder for the component specified by generic <typeparamref name="TComponent" /> parameter type.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <returns>An instance of <see cref="T:Atata.ComponentAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.Component(System.String)">
            <summary>
            Creates and returns the attributes builder for the component with the specified type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>An instance of <see cref="T:Atata.ComponentAttributesAtataContextBuilder" />.</returns>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder.Component(System.Type)">
            <summary>
            Creates and returns the attributes builder for the component of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An instance of <see cref="T:Atata.ComponentAttributesAtataContextBuilder" />.</returns>
        </member>
        <member name="T:Atata.AttributesAtataContextBuilder`1">
            <summary>
            Represents the base class for attributes builders.
            </summary>
            <typeparam name="TNextBuilder">The type of the next builder to return by <c>Add</c> methods.</typeparam>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder`1.Add(System.Attribute[])">
            <summary>
            Adds the specified attributes.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns>An instance of <typeparamref name="TNextBuilder" />.</returns>
        </member>
        <member name="M:Atata.AttributesAtataContextBuilder`1.Add(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Adds the specified attributes.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns>An instance of <typeparamref name="TNextBuilder" />.</returns>
        </member>
        <member name="T:Atata.ComponentAttributesAtataContextBuilder">
            <summary>
            Represents the builder of component attributes.
            </summary>
        </member>
        <member name="M:Atata.ComponentAttributesAtataContextBuilder.#ctor(System.Type,Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ComponentAttributesAtataContextBuilder" /> class.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="P:Atata.ComponentAttributesAtataContextBuilder.Item(System.String)">
            <summary>
            Creates and returns the attributes builder for the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="M:Atata.ComponentAttributesAtataContextBuilder.Property(System.String)">
            <summary>
            Creates and returns the attributes builder for the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="T:Atata.ComponentAttributesAtataContextBuilder`1">
            <summary>
            Represents the builder of <typeparamref name="TComponent" /> component attributes.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
        </member>
        <member name="M:Atata.ComponentAttributesAtataContextBuilder`1.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ComponentAttributesAtataContextBuilder`1" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="P:Atata.ComponentAttributesAtataContextBuilder`1.Item(System.String)">
            <summary>
            Creates and returns the attributes builder for the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="P:Atata.ComponentAttributesAtataContextBuilder`1.Item(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Creates and returns the attributes builder for the property specified by expression.
            </summary>
            <param name="propertyExpression">The expression returning the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="M:Atata.ComponentAttributesAtataContextBuilder`1.Property(System.String)">
            <summary>
            Creates and returns the attributes builder for the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="M:Atata.ComponentAttributesAtataContextBuilder`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Creates and returns the attributes builder for the property specified by expression.
            </summary>
            <param name="propertyExpression">The expression returning the property.</param>
            <returns>An instance of <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" />.</returns>
        </member>
        <member name="T:Atata.GlobalAttributesAtataContextBuilder">
            <summary>
            Represents the builder of global level attributes.
            </summary>
        </member>
        <member name="M:Atata.GlobalAttributesAtataContextBuilder.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.GlobalAttributesAtataContextBuilder" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="T:Atata.PropertyAttributesAtataContextBuilder`1">
            <summary>
            Represents the builder of property attributes.
            </summary>
            <typeparam name="TNextBuilder">The type of the next builder to return by <c>Add</c> methods.</typeparam>
        </member>
        <member name="M:Atata.PropertyAttributesAtataContextBuilder`1.#ctor(System.Type,System.String,`0,Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.PropertyAttributesAtataContextBuilder`1" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="parentBuilder">The parent builder.</param>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="T:Atata.TypePropertyNamePair">
            <summary>
            Represents the pair of type and property name.
            Can be used to identify a property within a class.
            </summary>
        </member>
        <member name="M:Atata.TypePropertyNamePair.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.TypePropertyNamePair" /> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Atata.TypePropertyNamePair.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Atata.TypePropertyNamePair.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:Atata.ChromeAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional Chrome browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.ChromiumAtataContextBuilder`3">
            <summary>
            Represents the base class for Chromium-based <see cref="T:Atata.DriverAtataContextBuilder`3" /> builder.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
            <typeparam name="TService">The type of the driver service.</typeparam>
            <typeparam name="TOptions">The type of the options.</typeparam>
        </member>
        <member name="M:Atata.ChromiumAtataContextBuilder`3.WithArguments(System.String[])">
            <summary>
            Adds arguments to be appended to the browser executable command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ChromiumAtataContextBuilder`3.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds arguments to be appended to the browser executable command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ChromiumAtataContextBuilder`3.WithArtifactsAsDownloadDirectory">
            <summary>
            Adds the <c>download.default_directory</c> user profile preference to options
            with the value of Artifacts directory path.
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ChromiumAtataContextBuilder`3.WithDownloadDirectory(System.String)">
            <summary>
            Adds the <c>download.default_directory</c> user profile preference to options
            with the value specified by <paramref name="directoryPath" />.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ChromiumAtataContextBuilder`3.WithDownloadDirectory(System.Func{System.String})">
            <summary>
            Adds the <c>download.default_directory</c> user profile preference to options
            with the value specified by <paramref name="directoryPathBuilder" />.
            </summary>
            <param name="directoryPathBuilder">The directory path builder.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="P:Atata.DriverAtataContextBuilder`1.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`1.CreateDriver">
            <summary>
            Creates the driver instance.
            </summary>
            <returns>The created <see cref="T:OpenQA.Selenium.IWebDriver" /> instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`1.WithAlias(System.String)">
            <summary>
            Specifies the driver alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.CreateDriver(`1,`2,System.TimeSpan)">
            <summary>
            Creates the driver instance.
            </summary>
            <param name="service">The driver service.</param>
            <param name="options">The driver options.</param>
            <param name="commandTimeout">The command timeout.</param>
            <returns>The driver instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(`2)">
            <summary>
            Specifies the driver options.
            </summary>
            <param name="options">The driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Func{`2})">
            <summary>
            Specifies the driver options factory method.
            </summary>
            <param name="optionsFactory">The factory method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Action{`2})">
            <summary>
            Specifies the driver options initialization method.
            </summary>
            <param name="optionsInitializer">The initialization method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithOptions(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the driver options.
            </summary>
            <param name="optionsPropertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.AddAddionalOption(System.String,System.Object)">
            <summary>
            Adds the additional option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Func{`1})">
            <summary>
            Specifies the driver service factory method.
            </summary>
            <param name="serviceFactory">The factory method of the driver service.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Action{`1})">
            <summary>
            Specifies the driver service initialization method.
            </summary>
            <param name="serviceInitializer">The initialization method of the driver service.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverService(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Specifies the properties map for the driver service.
            </summary>
            <param name="servicePropertiesMap">The properties map.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverPath(System.String)">
            <summary>
            Specifies the directory containing the driver executable file.
            </summary>
            <param name="driverPath">The directory containing the driver executable file.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithLocalDriverPath">
            <summary>
            Specifies that local/current directory should be used as the directory containing the driver executable file.
            Uses <c>AppDomain.CurrentDomain.BaseDirectory</c> as driver directory path.
            This configuration option makes sense for .NET Core 2.0+ project that uses driver as a project package (hosted in the same build directory).
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithDriverExecutableFileName(System.String)">
            <summary>
            Specifies the name of the driver executable file.
            </summary>
            <param name="driverExecutableFileName">The name of the driver executable file.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithHostName(System.String)">
            <summary>
            Specifies the host name of the service.
            The default value is <c>"localhost"</c>.
            This configuration option makes sense for .NET Core 2.0 to be set to <c>"127.0.0.1"</c> for IPv4 and <c>"[::1]"</c> for IPv6.
            There is a bug (https://github.com/dotnet/corefx/issues/24104) in .NET Core 2.0: each WebDriver request takes extra <c>1</c> second.
            </summary>
            <param name="hostName">The host name.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithFixOfCommandExecutionDelay">
            <summary>
            Specifies that the fix of driver's HTTP command execution delay should be applied.
            Invokes <c>WithHostName("127.0.0.1")</c> method.
            This configuration option makes sense for .NET Core 2.0 that works within IPv4.
            There is a bug (https://github.com/dotnet/corefx/issues/24104) in .NET Core 2.0: each WebDriver request takes extra <c>1</c> second.
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithCommandTimeout(System.TimeSpan)">
            <summary>
            Specifies the command timeout (the maximum amount of time to wait for each command).
            </summary>
            <param name="commandTimeout">The maximum amount of time to wait for each command.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithPortsToIgnore(System.Int32[])">
            <summary>
            Specifies the ports to ignore.
            </summary>
            <param name="portsToIgnore">The ports to ignore.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`3.WithPortsToIgnore(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Specifies the ports to ignore.
            </summary>
            <param name="portsToIgnore">The ports to ignore.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.EdgeAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional Edge browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.EventSubscriptionsAtataContextBuilder">
            <summary>
            Represents the builder of event subscriptions.
            </summary>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add``1(System.Action)">
            <summary>
            Adds the specified event handler as a subscription to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add``1(System.Action{``0})">
            <summary>
            Adds the specified event handler as a subscription to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add``1(System.Action{``0,Atata.AtataContext})">
            <summary>
            Adds the specified event handler as a subscription to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add``2">
            <summary>
            Adds the created instance of <typeparamref name="TEventHandler" /> as a subscription to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add``1(Atata.IEventHandler{``0})">
            <summary>
            Adds the specified event handler as a subscription to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add(System.Type)">
            <summary>
            Adds the created instance of <paramref name="eventHandlerType" /> as a subscription to the event type
            that is read from <see cref="T:Atata.IEventHandler`1" /> generic argument that <paramref name="eventHandlerType" /> should implement.
            </summary>
            <param name="eventHandlerType">Type of the event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.EventSubscriptionsAtataContextBuilder.Add(System.Type,System.Type)">
            <summary>
            Adds the created instance of <paramref name="eventHandlerType" /> as a subscription to the <paramref name="eventType" />.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerType">Type of the event handler.</param>
            <returns>The same <see cref="T:Atata.EventSubscriptionsAtataContextBuilder" /> instance.</returns>
        </member>
        <member name="M:Atata.FirefoxAtataContextBuilder.WithArguments(System.String[])">
            <summary>
            Adds arguments to be used in launching the Firefox browser.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.FirefoxAtataContextBuilder.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds arguments to be used in launching the Firefox browser.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.FirefoxAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional Firefox browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.IDriverFactory">
            <summary>
            Represents the driver factory.
            </summary>
        </member>
        <member name="P:Atata.IDriverFactory.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="M:Atata.IDriverFactory.Create">
            <summary>
            Creates the driver instance.
            </summary>
            <returns>The created <see cref="T:OpenQA.Selenium.IWebDriver" /> instance.</returns>
        </member>
        <member name="T:Atata.IHasContext`1">
            <summary>
            Provides the <see cref="P:Atata.IHasContext`1.Context" /> property.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
        </member>
        <member name="P:Atata.IHasContext`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:Atata.InternetExplorerAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional Internet Explorer browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.IUsesLocalBrowser">
            <summary>
            Defines the need to use a local browser.
            </summary>
        </member>
        <member name="P:Atata.IUsesLocalBrowser.BrowserName">
            <summary>
            Gets the name of the browser.
            </summary>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithLoggerName``1(Atata.LogConsumerAtataContextBuilder{``0},System.String)">
            <summary>
            Specifies the name of the logger.
            </summary>
            <typeparam name="TLogConsumer">The type of the log consumer.</typeparam>
            <param name="builder">The builder.</param>
            <param name="loggerName">The name of the logger.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithRepositoryName(Atata.LogConsumerAtataContextBuilder{Atata.Log4NetConsumer},System.String)">
            <summary>
            Specifies the name of the logger repository.
            </summary>
            <param name="builder">The builder.</param>
            <param name="repositoryName">The name of the logger repository.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithRepositoryAssembly(Atata.LogConsumerAtataContextBuilder{Atata.Log4NetConsumer},System.Reflection.Assembly)">
            <summary>
            Specifies the assembly to use to lookup the logger repository.
            </summary>
            <param name="builder">The builder.</param>
            <param name="repositoryAssembly">The name of the assembly to use to lookup the repository.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithFilePath(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.String)">
            <summary>
            Specifies the full file path of the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePath">The file path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithFilePath(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.Func{Atata.AtataContext,System.String})">
            <summary>
            Specifies the full file path builder for the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePathBuilder">The file path builder function.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithArtifactsDirectoryPath(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer})">
            <summary>
            Sets the <see cref="P:Atata.AtataContext.Artifacts" /> directory as the directory path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithDirectoryPath(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.String)">
            <summary>
            Specifies the directory path of the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="directoryPath">The directory path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithDirectoryPath(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.Func{Atata.AtataContext,System.String})">
            <summary>
            Specifies the directory path builder for the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="directoryPathBuilder">The directory path builder function.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithFileName(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.String)">
            <summary>
            Specifies the file name of the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileName">The file path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithFileName(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.Func{Atata.AtataContext,System.String})">
            <summary>
            Specifies the file name builder for the log file.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileNameBuilder">The file path builder function.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilderExtensions.WithLayout(Atata.LogConsumerAtataContextBuilder{Atata.NLogFileConsumer},System.String)">
            <summary>
            Specifies the layout of log event.
            </summary>
            <param name="builder">The builder.</param>
            <param name="layout">The layout of log event.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.#ctor(`0,Atata.LogConsumerConfiguration,Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> class.
            </summary>
            <param name="logConsumer">The log consumer.</param>
            <param name="logConsumerConfiguration">The log consumer configuration.</param>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="P:Atata.LogConsumerAtataContextBuilder`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.WithoutSectionFinish">
            <summary>
            Defines that the logging should not use section-like pair messages (not <c>"Starting: {action}"</c> and <c>"Finished: {action}"</c>, but just <c>"{action}"</c>).
            </summary>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.WithMinLevel(Atata.LogLevel)">
            <summary>
            Specifies the minimum level of the log event to write to the log.
            The default value is <see cref="F:Atata.LogLevel.Trace" />.
            </summary>
            <param name="level">The log level.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.WithMessageNestingLevelIndent(System.String)">
            <summary>
            Specifies the nesting level indent of the log message.
            The default value is <c>"- "</c>.
            </summary>
            <param name="messageNestingLevelIndent">The message nesting level indent.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.WithMessageStartSectionPrefix(System.String)">
            <summary>
            Specifies the start section prefix of the log message.
            The default value is <c>"&gt; "</c>.
            </summary>
            <param name="messageStartSectionPrefix">The message start section prefix.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.LogConsumerAtataContextBuilder`1.WithMessageEndSectionPrefix(System.String)">
            <summary>
            Specifies the end section prefix of the log message.
            The default value is <c>"&lt; "</c>.
            </summary>
            <param name="messageEndSectionPrefix">The message end section prefix.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Atata.LogConsumersAtataContextBuilder">
            <summary>
            Represents the builder of log consumers.
            </summary>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.LogConsumersAtataContextBuilder" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.Add``1">
            <summary>
            Adds the log consumer.
            </summary>
            <typeparam name="TLogConsumer">
            The type of the log consumer.
            Should have default constructor.
            </typeparam>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.Add(System.String)">
            <summary>
            Adds the log consumer by its type name or alias.
            Predefined aliases are defined in <see cref="T:Atata.LogConsumerAliases" /> static class.
            </summary>
            <param name="typeNameOrAlias">The type name or alias of the log consumer.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.Add``1(``0)">
            <summary>
            Adds the log consumer.
            </summary>
            <typeparam name="TLogConsumer">The type of the log consumer.</typeparam>
            <param name="consumer">The log consumer.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddTrace">
            <summary>
            Adds the <see cref="T:Atata.TraceLogConsumer" /> instance that uses <see cref="T:System.Diagnostics.Trace" /> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddDebug">
            <summary>
            Adds the <see cref="T:Atata.DebugLogConsumer" /> instance that uses <see cref="T:System.Diagnostics.Debug" /> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddConsole">
            <summary>
            Adds the <see cref="T:Atata.ConsoleLogConsumer" /> instance that uses <see cref="T:System.Console" /> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddNUnitTestContext">
            <summary>
            Adds the <see cref="T:Atata.NUnitTestContextLogConsumer" /> instance that uses <c>NUnit.Framework.TestContext</c> class for logging.
            </summary>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddNLog(System.String)">
            <summary>
            Adds the <see cref="T:Atata.NLogConsumer" /> instance that uses <c>NLog.Logger</c> class for logging.
            </summary>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddNLogFile">
            <summary>
            Adds the <see cref="T:Atata.NLogFileConsumer" /> instance that uses <c>NLog.Logger</c> class for logging into file.
            </summary>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddLog4Net(System.String)">
            <summary>
            Adds the <see cref="T:Atata.Log4NetConsumer" /> instance that uses <c>log4net.ILog</c> interface for logging.
            </summary>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddLog4Net(System.String,System.String)">
            <summary>
            Adds the <see cref="T:Atata.Log4NetConsumer" /> instance that uses <c>log4net.ILog</c> interface for logging.
            </summary>
            <param name="repositoryName">The name of the logger repository.</param>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.LogConsumersAtataContextBuilder.AddLog4Net(System.Reflection.Assembly,System.String)">
            <summary>
            Adds the <see cref="T:Atata.Log4NetConsumer" /> instance that uses <c>log4net.ILog</c> interface for logging.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="loggerName">The name of the logger.</param>
            <returns>The <see cref="T:Atata.LogConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.OperaAtataContextBuilder.WithArguments(System.String[])">
            <summary>
            Adds arguments to be appended to the Opera.exe command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.OperaAtataContextBuilder.WithArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds arguments to be appended to the Opera.exe command line.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.OperaAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional Opera browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="F:Atata.RemoteDriverAtataContextBuilder.DefaultCommandTimeout">
            <summary>
            The default command timeout is <c>60</c> seconds.
            </summary>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithRemoteAddress(System.Uri)">
            <summary>
            Specifies the remote address URI.
            </summary>
            <param name="remoteAddress">URI containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithRemoteAddress(System.String)">
            <summary>
            Specifies the remote address URI.
            </summary>
            <param name="remoteAddress">URI string containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions``1">
            <summary>
            Specifies the type of the driver options.
            </summary>
            <typeparam name="TOptions">The type of the options.</typeparam>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(OpenQA.Selenium.DriverOptions)">
            <summary>
            Specifies the driver options.
            </summary>
            <param name="options">The driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(System.Func{OpenQA.Selenium.DriverOptions})">
            <summary>
            Specifies the driver options factory method.
            </summary>
            <param name="optionsFactory">The factory method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithOptions(System.Action{OpenQA.Selenium.DriverOptions})">
            <summary>
            Specifies the driver options initialization method.
            </summary>
            <param name="optionsInitializer">The initialization method of the driver options.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCapabilities(OpenQA.Selenium.ICapabilities)">
            <summary>
            Specifies the capabilities.
            </summary>
            <param name="capabilities">The driver capabilities.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCapabilities(System.Func{OpenQA.Selenium.ICapabilities})">
            <summary>
            Specifies the capabilities factory method.
            </summary>
            <param name="capabilitiesFactory">The factory method of the driver capabilities.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.AddAddionalOption(System.String,System.Object)">
            <summary>
            Adds the additional option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.AddAdditionalBrowserOption(System.String,System.Object)">
            <summary>
            Adds the additional browser option to the driver options.
            </summary>
            <param name="optionName">The name of the option to add.</param>
            <param name="optionValue">The value of the option to add.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.RemoteDriverAtataContextBuilder.WithCommandTimeout(System.TimeSpan)">
            <summary>
            Specifies the command timeout (the maximum amount of time to wait for each command).
            </summary>
            <param name="commandTimeout">The maximum amount of time to wait for each command.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.With``1(Atata.ScreenshotConsumerAtataContextBuilder{``0},OpenQA.Selenium.ScreenshotImageFormat)">
            <summary>
            Specifies the image format of the file screenshot consumer.
            </summary>
            <typeparam name="TConsumer">The type of the file screenshot consumer.</typeparam>
            <param name="builder">The builder.</param>
            <param name="imageFormat">The image format.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithArtifactsDirectoryPath(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer})">
            <summary>
            Sets the <see cref="P:Atata.AtataContext.Artifacts" /> directory as the directory path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithDirectoryPath(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{System.String})">
            <summary>
            Specifies the directory path builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="directoryPathBuilder">The directory path builder function.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithDirectoryPath(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the directory path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="directoryPath">The directory path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFileName(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{Atata.ScreenshotInfo,System.String})">
            <summary>
            Specifies the file name builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileNameBuilder">The file name builder function that takes an instance of <see cref="T:Atata.ScreenshotInfo" />.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFileName(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the file name of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="fileName">The file name.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFilePath(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.Func{Atata.ScreenshotInfo,System.String})">
            <summary>
            Specifies the file path builder of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePathBuilder">The file path builder function that takes an instance of <see cref="T:Atata.ScreenshotInfo" />.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilderExtensions.WithFilePath(Atata.ScreenshotConsumerAtataContextBuilder{Atata.FileScreenshotConsumer},System.String)">
            <summary>
            Specifies the file path of the file screenshot consumer.
            </summary>
            <param name="builder">The builder.</param>
            <param name="filePath">The file path.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumerAtataContextBuilder`1.#ctor(`0,Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ScreenshotConsumerAtataContextBuilder`1" /> class.
            </summary>
            <param name="screenshotConsumer">The screenshot consumer.</param>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="P:Atata.ScreenshotConsumerAtataContextBuilder`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.ScreenshotConsumersAtataContextBuilder">
            <summary>
            Represents the builder of screenshot consumers.
            </summary>
        </member>
        <member name="M:Atata.ScreenshotConsumersAtataContextBuilder.#ctor(Atata.AtataBuildingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ScreenshotConsumersAtataContextBuilder" /> class.
            </summary>
            <param name="buildingContext">The building context.</param>
        </member>
        <member name="M:Atata.ScreenshotConsumersAtataContextBuilder.Add``1">
            <summary>
            Adds the screenshot consumer.
            </summary>
            <typeparam name="TScreenshotConsumer">The type of the screenshot consumer.</typeparam>
            <returns>The <see cref="T:Atata.ScreenshotConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumersAtataContextBuilder.Add(System.String)">
            <summary>
            Adds the screenshot consumer.
            </summary>
            <param name="typeNameOrAlias">The type name or alias of the log consumer.</param>
            <returns>The <see cref="T:Atata.ScreenshotConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumersAtataContextBuilder.Add``1(``0)">
            <summary>
            Adds the screenshot consumer.
            </summary>
            <typeparam name="TScreenshotConsumer">The type of the screenshot consumer.</typeparam>
            <param name="consumer">The screenshot consumer.</param>
            <returns>The <see cref="T:Atata.ScreenshotConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="M:Atata.ScreenshotConsumersAtataContextBuilder.AddFile">
            <summary>
            Adds the <see cref="T:Atata.FileScreenshotConsumer" /> instance for the screenshot saving to file.
            By default uses <see cref="P:Atata.AtataContext.Artifacts" /> directory as a directory path format,
            <c>"{screenshot-number:D2} - {screenshot-pageobjectname} {screenshot-pageobjecttypename}{screenshot-title: - *}"</c> as a file name format
            and <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png" /> as an image format.
            Example of a screenshot file path using default settings: <c>"artifacts\20220303T143404\SampleTest\01 - Home page - Screenshot title.png"</c>.
            Available predefined path variables are:
            <c>{build-start}</c>, <c>{build-start-utc}</c>
            <c>{test-name}</c>, <c>{test-name-sanitized}</c>,
            <c>{test-suite-name}</c>, <c>{test-suite-name-sanitized}</c>,
            <c>{test-start}</c>, <c>{test-start-utc}</c>,
            <c>{driver-alias}</c>, <c>{screenshot-number}</c>,
            <c>{screenshot-title}</c>, <c>{screenshot-pageobjectname}</c>,
            <c>{screenshot-pageobjecttypename}</c>, <c>{screenshot-pageobjectfullname}</c>.
            Path variables support formatting.
            </summary>
            <returns>The <see cref="T:Atata.ScreenshotConsumerAtataContextBuilder`1" /> instance.</returns>
        </member>
        <member name="T:Atata.ActionProvider">
            <summary>
            Represents the action provider class that wraps <see cref="T:System.Action" /> and has no host.
            Recommended for static methods.
            </summary>
        </member>
        <member name="M:Atata.ActionProvider.#ctor(Atata.IObjectSource{System.Action},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ActionProvider" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="T:Atata.ActionProvider`1">
            <summary>
            Represents the action provider class that wraps <see cref="T:System.Action" /> and is hosted in <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.ActionProvider`1.#ctor(`0,Atata.IObjectSource{System.Action},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ActionProvider`1" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.ActionProvider`1.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="T:Atata.DataProvider`2">
            <summary>
            Represents the provider of UI component data of <typeparamref name="TData" /> type
            owned by <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.DataProvider`2.#ctor(Atata.UIComponent{`1},System.Func{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DataProvider`2" /> class.
            </summary>
            <param name="component">The associated component.</param>
            <param name="valueGetFunction">The function that gets the value.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="T:Atata.DisposableSubjectObjectExtensions">
            <summary>
            Provides a set of object extension methods that wrap the <see cref="T:System.IDisposable" /> object with the <see cref="T:Atata.DisposableSubject`1" /> class.
            </summary>
        </member>
        <member name="M:Atata.DisposableSubjectObjectExtensions.ToSutDisposableSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.DisposableSubject`1" /> instance that wraps the <paramref name="source" /> with the <c>"sut"</c> provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.DisposableSubject`1" />.</param>
            <returns>A new <see cref="T:Atata.DisposableSubject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.DisposableSubjectObjectExtensions.ToResultDisposableSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.DisposableSubject`1" /> instance that wraps the <paramref name="source" /> with the <c>"result"</c> provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.DisposableSubject`1" />.</param>
            <returns>A new <see cref="T:Atata.DisposableSubject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.DisposableSubjectObjectExtensions.ToDisposableSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.DisposableSubject`1" /> instance that wraps the <paramref name="source" /> with the default provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.DisposableSubject`1" />.</param>
            <returns>A new <see cref="T:Atata.DisposableSubject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.DisposableSubjectObjectExtensions.ToDisposableSubject``1(``0,System.String)">
            <summary>
            Creates a new <see cref="T:Atata.DisposableSubject`1" /> instance that wraps the <paramref name="source" /> with the specified <paramref name="providerName" />.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.DisposableSubject`1" />.</param>
            <param name="providerName">Name of the provider.</param>
            <returns>A new <see cref="T:Atata.DisposableSubject`1" /> instance.</returns>
        </member>
        <member name="T:Atata.DisposableSubject`1">
            <summary>
            Represents the test subject that wraps <typeparamref name="TObject" /> object, which should be <see cref="T:System.IDisposable" />.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Atata.DisposableSubject`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DisposableSubject`1" /> class
            with the default <c>"subject"</c> provider name that is taken from <see cref="P:Atata.Subject.DefaultSubjectName" /> property.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Atata.DisposableSubject`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DisposableSubject`1" /> class.
            </summary>
            <param name="source">The source object.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.DisposableSubject`1.#ctor(Atata.IObjectSource{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DisposableSubject`1" /> class
            with the default <c>"subject"</c> provider name that is taken from <see cref="P:Atata.Subject.DefaultSubjectName" /> property.
            </summary>
            <param name="objectSource">The object source.</param>
        </member>
        <member name="M:Atata.DisposableSubject`1.#ctor(Atata.IObjectSource{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DisposableSubject`1" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.DisposableSubject`1.Dispose">
            <summary>
            Disposes this object together with the associated source object.
            </summary>
        </member>
        <member name="T:Atata.EnumerableValueProvider`2">
            <summary>
            Represents the value provider class that wraps enumerable of <typeparamref name="TItem" /> objects and is hosted in <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TItem">The type of the enumerable item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.EnumerableValueProvider`2.#ctor(`1,Atata.IObjectSource{System.Collections.Generic.IEnumerable{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.EnumerableValueProvider`2" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.EnumerableValueProvider`2.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.EnumerableValueProvider`2.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TItem" /> at the specified index.
            </summary>
            <value>
            The <typeparamref name="TItem" />.
            </value>
            <param name="index">The index.</param>
            <returns>The found <typeparamref name="TItem" /> item.</returns>
        </member>
        <member name="T:Atata.IDataProvider`2">
            <summary>
            Represents the interface of provider of data of <typeparamref name="TData" /> type owned by <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="T:Atata.IEnumerableProvider`2">
            <summary>
            Represents the interface of a value provider of <typeparamref name="TItem" /> enumerable value owned by <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TItem">The type of the enumerable item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="T:Atata.IHasProviderName">
            <summary>
            Defines the <see cref="P:Atata.IHasProviderName.ProviderName" /> property.
            </summary>
        </member>
        <member name="P:Atata.IHasProviderName.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="T:Atata.IHasProviderNameExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.IHasProviderName" />.
            </summary>
        </member>
        <member name="M:Atata.IHasProviderNameExtensions.SetProviderName(Atata.IHasProviderName,System.String)">
            <summary>
            Sets the name of the provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Atata.IHasSourceProviderName">
            <summary>
            Defines the <see cref="P:Atata.IHasSourceProviderName.SourceProviderName" /> property.
            </summary>
        </member>
        <member name="P:Atata.IHasSourceProviderName.SourceProviderName">
            <summary>
            Gets or sets the name of the source provider.
            </summary>
        </member>
        <member name="T:Atata.IHasSourceProviderNameExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.IHasSourceProviderName" />.
            </summary>
        </member>
        <member name="M:Atata.IHasSourceProviderNameExtensions.SetSourceProviderName(Atata.IHasSourceProviderName,System.String)">
            <summary>
            Sets the name of the source provider.
            </summary>
            <param name="provider">The provider.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Atata.IObjectProviderEnumerableExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.IObjectProvider`2" /> where <c>TObject</c> is <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="T:Atata.IObjectProviderExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:Atata.IObjectProvider`2" />.
            </summary>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.ValueOf``3(Atata.IObjectProvider{``0,``2},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a provider of value resolved from <paramref name="valueExpression" /> argument.
            The created provider can be either dynamic or lazy,
            according to <see cref="P:Atata.IObjectProvider`2.IsDynamic" /> property of <paramref name="source" /> object provider.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.ValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,``1},System.String)">
            <summary>
            Creates a provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            The created provider can be either dynamic or lazy,
            according to <see cref="P:Atata.IObjectProvider`2.IsDynamic" /> property of <paramref name="source" /> object provider.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.DynamicValueOf``3(Atata.IObjectProvider{``0,``2},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a dynamic provider of value resolved from <paramref name="valueExpression" /> argument.
            Dynamic provider on each value request can return different value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.DynamicValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,``1},System.String)">
            <summary>
            Creates a dynamic provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            Dynamic provider on each value request can return different value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.LazyValueOf``3(Atata.IObjectProvider{``0,``2},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates a lazy provider of value resolved from <paramref name="valueExpression" /> argument.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.LazyValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,``1},System.String)">
            <summary>
            Creates a lazy provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>A <see cref="T:Atata.ValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.EnumerableValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.String)">
            <summary>
            Creates a enumerable provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            The created provider can be either dynamic or lazy,
            according to <see cref="P:Atata.IObjectProvider`2.IsDynamic" /> property of <paramref name="source" /> object provider.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>An <see cref="T:Atata.EnumerableValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.DynamicEnumerableValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.String)">
            <summary>
            Creates a dynamic enumerable provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            Dynamic provider on each value request can return different value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>An <see cref="T:Atata.EnumerableValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderExtensions.LazyEnumerableValueOf``3(Atata.IObjectProvider{``0,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.String)">
            <summary>
            Creates a lazy enumerable provider of value that is taken from <paramref name="valueGetFunction" /> with <paramref name="valueName" /> as a provider name.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="source">The source.</param>
            <param name="valueGetFunction">The value get function.</param>
            <param name="valueName">Name of the value.</param>
            <returns>An <see cref="T:Atata.EnumerableValueProvider`2" /> instance.</returns>
        </member>
        <member name="M:Atata.IObjectProviderNumberExtensions.Get``2(Atata.IObjectProvider{``0,``1},``0@)">
            <summary>
            Gets the value and records it to <paramref name="value" /> parameter.
            </summary>
            <typeparam name="TValue">The type of the data value.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="provider">The object provider.</param>
            <param name="value">The value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.IObjectProviderNumberExtensions.Get``1(Atata.IObjectProvider{System.Nullable{System.Decimal},``0},System.Nullable{System.Int32}@)">
            <summary>
            Gets the value and records it to <paramref name="value" /> parameter.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="provider">The object provider.</param>
            <param name="value">The value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.IObjectProvider`1">
            <summary>
            Represents the interface of an object provider of <typeparamref name="TObject" /> type.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="P:Atata.IObjectProvider`1.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.IObjectProvider`1.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="T:Atata.IObjectProvider`2">
            <summary>
            Represents the interface of an object provider of <typeparamref name="TObject" /> type owned by <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="P:Atata.IObjectProvider`2.IsDynamic">
            <summary>
            Gets a value indicating whether the provided object is dynamic (can it vary for every value request).
            </summary>
        </member>
        <member name="P:Atata.IObjectProvider`2.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="T:Atata.NoOwner">
            <summary>
            Represents a stub owner for static classes.
            </summary>
        </member>
        <member name="P:Atata.NoOwner.Instance">
            <summary>
            Gets the default instance.
            </summary>
        </member>
        <member name="T:Atata.ObjectProvider`2">
            <summary>
            Represents the base object provider class.
            </summary>
            <typeparam name="TObject">The type of the provided object.</typeparam>
            <typeparam name="TOwner">The type of the owner object.</typeparam>
        </member>
        <member name="M:Atata.ObjectProvider`2.#ctor(Atata.IObjectSource{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ObjectProvider`2" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.ObjectProvider`2.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.SourceProviderName">
            <summary>
            Gets or sets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.Should">
            <summary>
            Gets the assertion verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.ExpectTo">
            <summary>
            Gets the expectation verification provider that has a set of verification extension methods.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.WaitTo">
            <summary>
            Gets the waiting verification provider that has a set of verification extension methods.
            Uses <see cref="P:Atata.AtataContext.WaitingTimeout" /> and <see cref="P:Atata.AtataContext.WaitingRetryInterval" /> of <see cref="P:Atata.AtataContext.Current" /> for timeout and retry interval.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.IsDynamic">
            <summary>
            Gets a value indicating whether the provided object is dynamic (can it vary for every value request).
            </summary>
        </member>
        <member name="M:Atata.ObjectProvider`2.op_Implicit(Atata.ObjectProvider{`0,`1})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Atata.ObjectProvider`2" /> to <typeparamref name="TObject" />.
            </summary>
            <param name="objectProvider">The object provider.</param>
            <returns>The value of the <paramref name="objectProvider" />.</returns>
        </member>
        <member name="M:Atata.ObjectProvider`2.ResolveAtataContext">
            <summary>
            Resolves the current <see cref="T:Atata.AtataContext" /> instance.
            Throws <see cref="T:System.InvalidOperationException" /> if <see cref="P:Atata.AtataContext.Current" /> is <see langword="null" />.
            </summary>
            <returns>An <see cref="T:Atata.AtataContext" /> instance.</returns>
        </member>
        <member name="T:Atata.DynamicObjectSource">
            <summary>
            Provides a set of methods for <see cref="T:Atata.DynamicObjectSource`1" /> creation.
            </summary>
        </member>
        <member name="M:Atata.DynamicObjectSource.Create``1(System.Func{``0})">
            <summary>
            Creates a <see cref="T:Atata.DynamicObjectSource`1" /> for the specified <paramref name="objectGetFunction" />.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="objectGetFunction">The object get function.</param>
            <returns>An instance of <see cref="T:Atata.DynamicObjectSource`1" />.</returns>
        </member>
        <member name="T:Atata.DynamicObjectSource`1">
            <summary>
            Represents the dynamic object source that gets an object using function.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Atata.DynamicObjectSource`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DynamicObjectSource`1" /> class.
            </summary>
            <param name="objectGetFunction">The object get function.</param>
        </member>
        <member name="P:Atata.DynamicObjectSource`1.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.DynamicObjectSource`1.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.DynamicObjectSource`1.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.DynamicObjectSource`2">
            <summary>
            Represents the dynamic object source that gets an object using function.
            Also takes an instance of <see cref="T:Atata.IObjectProvider`1" /> of source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="M:Atata.DynamicObjectSource`2.#ctor(Atata.IObjectProvider{`1},System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DynamicObjectSource`2" /> class.
            </summary>
            <param name="sourceProvider">The source provider.</param>
            <param name="objectGetFunction">The object get function.</param>
        </member>
        <member name="P:Atata.DynamicObjectSource`2.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.DynamicObjectSource`2.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.DynamicObjectSource`2.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.IObjectSource`1">
            <summary>
            Represents the interface of the object source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="P:Atata.IObjectSource`1.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.IObjectSource`1.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.IObjectSource`1.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.LazyObjectSource`1">
            <summary>
            Represents the lazy object source that gets an object using function once.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Atata.LazyObjectSource`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.LazyObjectSource`1" /> class.
            </summary>
            <param name="objectGetFunction">The object get function.</param>
        </member>
        <member name="P:Atata.LazyObjectSource`1.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.LazyObjectSource`1.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.LazyObjectSource`1.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.LazyObjectSource`2">
            <summary>
            Represents the lazy object source that gets an object using function once.
            Also takes an instance of <see cref="T:Atata.IObjectProvider`1" /> of source.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="M:Atata.LazyObjectSource`2.#ctor(Atata.IObjectProvider{`1},System.Func{`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.LazyObjectSource`2" /> class.
            </summary>
            <param name="sourceProvider">The source provider.</param>
            <param name="objectGetFunction">The object get function.</param>
        </member>
        <member name="P:Atata.LazyObjectSource`2.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.LazyObjectSource`2.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.LazyObjectSource`2.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.StaticObjectSource`1">
            <summary>
            Represents the static object source that takes an object in constructor and returns it.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Atata.StaticObjectSource`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.StaticObjectSource`1" /> class.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="P:Atata.StaticObjectSource`1.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.StaticObjectSource`1.SourceProviderName">
            <summary>
            Gets the name of the source provider.
            </summary>
        </member>
        <member name="P:Atata.StaticObjectSource`1.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic (value can vary for every value request).
            </summary>
        </member>
        <member name="T:Atata.Subject">
            <summary>
            Provides a set of static methods for testing static class methods and properties.
            </summary>
        </member>
        <member name="P:Atata.Subject.DefaultSubjectName">
            <summary>
            Gets or sets the default name of the subject.
            The default value is <c>"subject"</c>.
            </summary>
        </member>
        <member name="M:Atata.Subject.ResultOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a new lazy result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.ResultOf``1(System.Func{``0},System.String)">
            <summary>
            Creates a new lazy result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.SubjectOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a new lazy <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.SubjectOf``1(System.Func{``0},System.String)">
            <summary>
            Creates a new lazy <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicResultOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a new dynamic result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicResultOf``1(System.Func{``0},System.String)">
            <summary>
            Creates a new dynamic result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicSubjectOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a new dynamic <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicSubjectOf``1(System.Func{``0},System.String)">
            <summary>
            Creates a new dynamic <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.Invoking(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider" /> from the invocation of the specified <paramref name="actionExpression" />.
            </summary>
            <param name="actionExpression">The action expression.</param>
            <returns>A new <see cref="T:Atata.ActionProvider" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.Invoking(System.Action,System.String)">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider" /> from the invocation of the specified <paramref name="action" />
            with the specified <paramref name="actionName" />.
            </summary>
            <param name="action">The action.</param>
            <param name="actionName">Name of the action.</param>
            <returns>A new <see cref="T:Atata.ActionProvider" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicInvoking(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider" /> from the invocation of the specified <paramref name="actionExpression" />.
            </summary>
            <param name="actionExpression">The action expression.</param>
            <returns>A new <see cref="T:Atata.ActionProvider" /> instance.</returns>
        </member>
        <member name="M:Atata.Subject.DynamicInvoking(System.Action,System.String)">
            <summary>
            Creates a new dynamic <see cref="T:Atata.ActionProvider" /> from the invocation of the specified <paramref name="action" />
            with the specified <paramref name="actionName" />.
            </summary>
            <param name="action">The action.</param>
            <param name="actionName">Name of the action.</param>
            <returns>A new <see cref="T:Atata.ActionProvider" /> instance.</returns>
        </member>
        <member name="T:Atata.SubjectBase`2">
            <summary>
            Represents the base test subject class.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TSubject">The type of the inherited subject class.</typeparam>
        </member>
        <member name="M:Atata.SubjectBase`2.#ctor(Atata.IObjectSource{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.SubjectBase`2" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.SubjectBase`2.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.SubjectBase`2.Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="M:Atata.SubjectBase`2.ResultOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new lazy result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.ResultOf``1(System.Func{`0,``0},System.String)">
            <summary>
            Creates a new lazy result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.SubjectOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new lazy <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.SubjectOf``1(System.Func{`0,``0},System.String)">
            <summary>
            Creates a new lazy <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicResultOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new dynamic result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicResultOf``1(System.Func{`0,``0},System.String)">
            <summary>
            Creates a new dynamic result <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicSubjectOf``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a new dynamic <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="functionExpression" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="functionExpression">The function expression.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicSubjectOf``1(System.Func{`0,``0},System.String)">
            <summary>
            Creates a new dynamic <see cref="T:Atata.Subject`1" /> from the result of the specified <paramref name="function" /> with the specified <paramref name="functionName" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="functionName">Name of the function.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.Act(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Executes the specified <paramref name="actionExpression" />.
            Appends the text representation of the <paramref name="actionExpression" /> to the <c>ProviderName</c> property of this instance.
            </summary>
            <param name="actionExpression">The action expression.</param>
            <returns>The same subject instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.Act(System.Action{`0},System.String)">
            <summary>
            Executes the specified <paramref name="action" />.
            Appends the <paramref name="actionName" /> to the <c>ProviderName</c> property of this instance.
            </summary>
            <param name="action">The action.</param>
            <param name="actionName">Name of the action.</param>
            <returns>The same subject instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.Invoking(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider`1" /> from the invocation of the specified <paramref name="actionExpression" />.
            </summary>
            <param name="actionExpression">The action expression.</param>
            <returns>A new <see cref="T:Atata.ActionProvider`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.Invoking(System.Action{`0},System.String)">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider`1" /> from the invocation of the specified <paramref name="action" />
            with the specified <paramref name="actionName" />.
            </summary>
            <param name="action">The action.</param>
            <param name="actionName">Name of the action.</param>
            <returns>A new <see cref="T:Atata.ActionProvider`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicInvoking(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Creates a new lazy <see cref="T:Atata.ActionProvider`1" /> from the invocation of the specified <paramref name="actionExpression" />.
            </summary>
            <param name="actionExpression">The action expression.</param>
            <returns>A new <see cref="T:Atata.ActionProvider`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.DynamicInvoking(System.Action{`0},System.String)">
            <summary>
            Creates a new dynamic <see cref="T:Atata.ActionProvider`1" /> from the invocation of the specified <paramref name="action" />
            with the specified <paramref name="actionName" />.
            </summary>
            <param name="action">The action.</param>
            <param name="actionName">Name of the action.</param>
            <returns>A new <see cref="T:Atata.ActionProvider`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectBase`2.AggregateAssert(System.Action{`1},System.String)">
            <summary>
            Executes aggregate assertion for the current subject using <see cref="M:Atata.AtataContext.AggregateAssert(System.Action,System.String)" /> method.
            </summary>
            <param name="action">The action to execute in scope of aggregate assertion.</param>
            <param name="assertionScopeName">
            Name of the scope being asserted.
            Is used to identify the assertion section in log.
            If it is <see langword="null" />, <see cref="P:Atata.ObjectProvider`2.ProviderName" /> is used instead.
            </param>
            <returns>The instance of this page object.</returns>
        </member>
        <member name="T:Atata.SubjectObjectExtensions">
            <summary>
            Provides a set of object extension methods that wrap the object with the <see cref="T:Atata.Subject`1" /> class.
            </summary>
        </member>
        <member name="M:Atata.SubjectObjectExtensions.ToSutSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.Subject`1" /> instance that wraps the <paramref name="source" /> with the <c>"sut"</c> provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.Subject`1" />.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectObjectExtensions.ToResultSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.Subject`1" /> instance that wraps the <paramref name="source" /> with the <c>"result"</c> provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.Subject`1" />.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectObjectExtensions.ToSubject``1(``0)">
            <summary>
            Creates a new <see cref="T:Atata.Subject`1" /> instance that wraps the <paramref name="source" /> with the default provider name.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.Subject`1" />.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="M:Atata.SubjectObjectExtensions.ToSubject``1(``0,System.String)">
            <summary>
            Creates a new <see cref="T:Atata.Subject`1" /> instance that wraps the <paramref name="source" /> with the specified <paramref name="providerName" />.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The instance to wrap with <see cref="T:Atata.Subject`1" />.</param>
            <param name="providerName">Name of the provider.</param>
            <returns>A new <see cref="T:Atata.Subject`1" /> instance.</returns>
        </member>
        <member name="T:Atata.Subject`1">
            <summary>
            Represents the test subject that wraps <typeparamref name="TObject" /> object.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Atata.Subject`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Subject`1" /> class
            with the default <c>"subject"</c> provider name that is taken from <see cref="P:Atata.Subject.DefaultSubjectName" /> property.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Atata.Subject`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Subject`1" /> class.
            </summary>
            <param name="source">The source object.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.Subject`1.#ctor(Atata.IObjectSource{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Subject`1" /> class
            with the default <c>"subject"</c> provider name that is taken from <see cref="P:Atata.Subject.DefaultSubjectName" /> property.
            </summary>
            <param name="objectSource">The object source.</param>
        </member>
        <member name="M:Atata.Subject`1.#ctor(Atata.IObjectSource{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Subject`1" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="T:Atata.UriProvider`1">
            <summary>
            Represents the provider of URI.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="P:Atata.UriProvider`1.Query">
            <summary>
            Gets the query parameters provider of the URI.
            </summary>
        </member>
        <member name="P:Atata.UriProvider`1.Fragment">
            <summary>
            Gets the fragment provider of the URI.
            </summary>
        </member>
        <member name="P:Atata.UriProvider`1.AbsolutePath">
            <summary>
            Gets the absolute path provider of the URL.
            </summary>
        </member>
        <member name="T:Atata.UriQueryParametersProvider`1">
            <summary>
            Represents the provider of URL query parameters.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.#ctor(Atata.UIComponent{`0},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.UriQueryParametersProvider`1" /> class.
            </summary>
            <param name="component">The associated component.</param>
            <param name="valueGetFunction">The function that gets the value.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.UriQueryParametersProvider`1.Count">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the count.
            </summary>
        </member>
        <member name="P:Atata.UriQueryParametersProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the parameter value specified by name.
            </summary>
            <param name="parameterName">The name of the query parameter.</param>
            <returns>The provider of the parameter value.</returns>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.Get``1(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the parameter value specified by name.
            </summary>
            <param name="parameterName">The name of the query parameter.</param>
            <returns>The provider of the parameter value.</returns>
            <typeparam name="TValue">The type of the query parameter value.</typeparam>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.GetAll(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the parameter values specified by name.
            </summary>
            <param name="parameterName">Name of the query parameter.</param>
            <returns>The provider of the parameter values.</returns>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.GetAll``1(System.String)">
            <summary>
            Gets the <see cref="T:Atata.ValueProvider`2" /> of the parameter values specified by name.
            </summary>
            <param name="parameterName">Name of the query parameter.</param>
            <returns>The provider of the parameter values.</returns>
            <typeparam name="TValue">The type of the query parameter value.</typeparam>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.GetValue(System.String)">
            <summary>
            Gets the value of the specified query parameter.
            </summary>
            <param name="parameterName">The name of the query parameter.</param>
            <returns>The query parameter's value.
            Returns <see langword="null" /> if the value is not set.</returns>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.GetValue``1(System.String)">
            <summary>
            Gets the value of the specified query parameter.
            </summary>
            <typeparam name="TValue">The type of the query parameter value.</typeparam>
            <param name="parameterName">The name of the query parameter.</param>
            <returns>The parameter value.
            Returns <see langword="null" /> if the value is not set.</returns>
        </member>
        <member name="M:Atata.UriQueryParametersProvider`1.GetAllValues``1(System.String)">
            <summary>
            Gets all values of the specified query parameter.
            </summary>
            <typeparam name="TValue">The type of the query parameter value.</typeparam>
            <param name="parameterName">The name of the query parameter.</param>
            <returns>
            The enumerable of query parameter values.
            Returns <see langword="null" /> if the values are not set.
            </returns>
        </member>
        <member name="T:Atata.UriQueryProvider`1">
            <summary>
            Represents the provider of URI query.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.UriQueryProvider`1.#ctor(Atata.UIComponent{`0},System.Func{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.UriQueryProvider`1" /> class.
            </summary>
            <param name="component">The associated component.</param>
            <param name="valueGetFunction">The function that gets the value.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.UriQueryProvider`1.Parameters">
            <summary>
            Gets the query parameters provider of the URL.
            </summary>
        </member>
        <member name="T:Atata.ValueProvider`2">
            <summary>
            Represents the value provider class that wraps <typeparamref name="TValue" /> and is hosted in <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.ValueProvider`2.#ctor(`1,Atata.IObjectSource{`0},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.ValueProvider`2" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.ValueProvider`2.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.ValueProvider`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Atata.ActionEventHandler`1">
            <summary>
            Represents the event handler that executes an action.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Atata.ActionEventHandler`1.Handle(`0,Atata.AtataContext)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Atata.EventBus">
            <summary>
            Represents the event bus, which provides a functionality of subscribing to and publishing events.
            </summary>
        </member>
        <member name="M:Atata.EventBus.#ctor(Atata.AtataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.EventBus" /> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atata.EventBus.Publish``1(``0)">
            <summary>
            Publishes the specified event to subscribed event handlers.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:Atata.EventBus.Subscribe``1(System.Action)">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.EventBus.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.EventBus.Subscribe``1(System.Action{``0,Atata.AtataContext})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.EventBus.Subscribe``2">
            <summary>
            Subscribes the created instance of <typeparamref name="TEventHandler" /> to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.EventBus.Subscribe``1(Atata.IEventHandler{``0})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.EventBus.Unsubscribe(System.Object)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription object.</param>
        </member>
        <member name="M:Atata.EventBus.UnsubscribeHandler(System.Object)">
            <summary>
            Removes the event handler instance from subscriptions.
            </summary>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Atata.EventBus.UnsubscribeAll``1">
            <summary>
            Removes all subscriptions from the specified <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Atata.EventBus.UnsubscribeAll(System.Type)">
            <summary>
            Removes all subscriptions from the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="T:Atata.EventSubscriptionItem">
            <summary>
            Represents the event subscription.
            </summary>
        </member>
        <member name="M:Atata.EventSubscriptionItem.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.EventSubscriptionItem" /> class.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandler">The event handler, which should implement <see cref="T:Atata.IEventHandler`1" />.</param>
        </member>
        <member name="P:Atata.EventSubscriptionItem.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:Atata.EventSubscriptionItem.EventHandler">
            <summary>
            Gets the event handler, which should implement <see cref="T:Atata.IEventHandler`1" />.
            </summary>
        </member>
        <member name="T:Atata.IConditionalEventHandler`1">
            <summary>
            Handles <typeparamref name="TEvent" /> events that match a condition.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Atata.IConditionalEventHandler`1.CanHandle(`0,Atata.AtataContext)">
            <summary>
            Determines whether this instance can or should handle the specified event.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance can handle the specified event; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Atata.IEventBus">
            <summary>
            Provides a functionality of subscribing to and publishing events.
            </summary>
        </member>
        <member name="M:Atata.IEventBus.Publish``1(``0)">
            <summary>
            Publishes the specified event to subscribed event handlers.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventData">The event data.</param>
        </member>
        <member name="M:Atata.IEventBus.Subscribe``1(System.Action)">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.IEventBus.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.IEventBus.Subscribe``1(System.Action{``0,Atata.AtataContext})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.IEventBus.Subscribe``2">
            <summary>
            Subscribes the created instance of <typeparamref name="TEventHandler" /> to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="TEventHandler">The type of the event handler.</typeparam>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.IEventBus.Subscribe``1(Atata.IEventHandler{``0})">
            <summary>
            Subscribes the specified event handler to the <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <returns>A subscription object.</returns>
        </member>
        <member name="M:Atata.IEventBus.Unsubscribe(System.Object)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription object.</param>
        </member>
        <member name="M:Atata.IEventBus.UnsubscribeHandler(System.Object)">
            <summary>
            Removes the event handler instance from subscriptions.
            </summary>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Atata.IEventBus.UnsubscribeAll``1">
            <summary>
            Removes all subscriptions from the specified <typeparamref name="TEvent" />.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Atata.IEventBus.UnsubscribeAll(System.Type)">
            <summary>
            Removes all subscriptions from the specified event type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="T:Atata.IEventHandler`1">
            <summary>
            Handles <typeparamref name="TEvent" /> events.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Atata.IEventHandler`1.Handle(`0,Atata.AtataContext)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Atata.AtataContextCleanUpEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.AtataContext" /> is cleaning up.
            </summary>
        </member>
        <member name="P:Atata.AtataContextCleanUpEvent.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.AtataContextInitCompletedEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.AtataContext" /> is initialized.
            </summary>
        </member>
        <member name="P:Atata.AtataContextInitCompletedEvent.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.AtataContextInitStartedEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.AtataContext" /> is started to initialize.
            </summary>
        </member>
        <member name="P:Atata.AtataContextInitStartedEvent.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.AtataContextPreInitEvent">
            <summary>
            Represents an event that occurs before <see cref="T:Atata.AtataContext" /> initialization.
            </summary>
        </member>
        <member name="P:Atata.AtataContextPreInitEvent.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Atata.DriverInitEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.AtataContext" /> driver is initializing.
            </summary>
        </member>
        <member name="P:Atata.DriverInitEvent.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="T:Atata.PageObjectDeInitEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.PageObject`1" /> is de-initialized.
            </summary>
        </member>
        <member name="P:Atata.PageObjectDeInitEvent.PageObject">
            <summary>
            Gets the page object.
            </summary>
        </member>
        <member name="T:Atata.PageObjectInitCompletedEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.PageObject`1" /> is initialized.
            </summary>
        </member>
        <member name="P:Atata.PageObjectInitCompletedEvent.PageObject">
            <summary>
            Gets the page object.
            </summary>
        </member>
        <member name="T:Atata.PageObjectInitEvent">
            <summary>
            Represents an event that occurs when <see cref="T:Atata.PageObject`1" /> is started to initialize.
            </summary>
        </member>
        <member name="P:Atata.PageObjectInitEvent.PageObject">
            <summary>
            Gets the page object.
            </summary>
        </member>
        <member name="T:Atata.ScreenshotFileSavedEvent">
            <summary>
            Represents an event that occurs when a screenshot file is saved.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotFileSavedEvent.ScreenshotInfo">
            <summary>
            Gets the screenshot information.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotFileSavedEvent.FilePath">
            <summary>
            Gets the file path.
            </summary>
        </member>
        <member name="M:Atata.ExpressionStringBuilder.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            Output a given expression tree to a string.
            </summary>
            <param name="node">The expression node.</param>
            <returns>The string representing the expression.</returns>
        </member>
        <member name="T:Atata.ImprovedExpressionStringBuilder">
            <summary>
            Represents an improved version of visitor or rewriter for expression trees.
            </summary>
        </member>
        <member name="M:Atata.ImprovedExpressionStringBuilder.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            Outputs a given expression tree to a string.
            </summary>
            <param name="node">The expression node.</param>
            <returns>The string representing the expression.</returns>
        </member>
        <member name="T:Atata.ObjectExpressionStringBuilder">
            <summary>
            Represents a visitor or rewriter for expression trees.
            Specifically oriented to handle the expression of function taking a single object argument.
            </summary>
        </member>
        <member name="M:Atata.ObjectExpressionStringBuilder.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            Outputs a given expression tree to a string.
            </summary>
            <param name="node">The expression node.</param>
            <returns>The string representing the expression.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``1(Atata.EditableField{System.Nullable{System.Decimal},``0},System.Nullable{System.Int32}@)">
            <summary>
            Sets the random value and records it to <paramref name="value" /> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``1(Atata.EditableField{System.Nullable{System.Decimal},``0},System.Int32@)">
            <summary>
            Sets the random value and records it to <paramref name="value" /> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="M:Atata.EditableFieldExtensions.SetRandom``2(Atata.EditableField{System.Nullable{``0},``1},``0@)">
            <summary>
            Sets the random value and records it to <paramref name="value" /> parameter.
            For value generation uses randomization attributes, for example:
            <see cref="T:Atata.RandomizeStringSettingsAttribute" />, <see cref="T:Atata.RandomizeNumberSettingsAttribute" />, <see cref="T:Atata.RandomizeIncludeAttribute" />, etc.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeSet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" /> triggers.
            </summary>
            <typeparam name="TData">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="field">The editable field control.</param>
            <param name="value">The generated value.</param>
            <returns>The instance of the owner page object.</returns>
        </member>
        <member name="T:Atata.ExpressionExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
        </member>
        <member name="M:Atata.ExpressionExtensions.ExtractMemberName(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the name of the member.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The name of the member.</returns>
        </member>
        <member name="M:Atata.ExpressionExtensions.ExtractMember(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the member.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The member information.</returns>
        </member>
        <member name="T:Atata.IJavaScriptExecutorLoggingExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:OpenQA.Selenium.IJavaScriptExecutor" />
            that wrap actual methods with log sections.
            </summary>
        </member>
        <member name="M:Atata.IJavaScriptExecutorLoggingExtensions.ExecuteScriptWithLogging(OpenQA.Selenium.IJavaScriptExecutor,System.String,System.Object[])">
            <summary>
            Executes the specified script within a log section.
            </summary>
            <param name="scriptExecutor">The scrip executor.</param>
            <param name="script">The script.</param>
            <param name="args">The script arguments.</param>
            <returns>The value returned by the script.</returns>
        </member>
        <member name="M:Atata.IJavaScriptExecutorLoggingExtensions.ExecuteAsyncScriptWithLogging(OpenQA.Selenium.IJavaScriptExecutor,System.String,System.Object[])">
            <summary>
            Executes the specified async script within a log section.
            </summary>
            <param name="scriptExecutor">The script executor.</param>
            <param name="script">The script.</param>
            <param name="args">The script arguments.</param>
            <returns>The value returned by the script.</returns>
        </member>
        <member name="M:Atata.INavigableExtensions.ClickAndGo``2(Atata.INavigable{``0,``1})">
            <summary>
            Clicks the control and performs the navigation to the page object of <typeparamref name="TNavigateTo" /> type.
            Also executes <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" /> triggers.
            </summary>
            <typeparam name="TNavigateTo">The type of the page object to navigate to.</typeparam>
            <typeparam name="TOwner">The type of the owner page object.</typeparam>
            <param name="navigableControl">The navigable control.</param>
            <returns>The instance of <typeparamref name="TNavigateTo" />.</returns>
        </member>
        <member name="T:Atata.ISearchContextLoggingExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:OpenQA.Selenium.ISearchContext" />
            that wrap actual methods with log sections.
            </summary>
        </member>
        <member name="M:Atata.ISearchContextLoggingExtensions.GetWithLogging(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)">
            <summary>
            Gets an element within a log section.
            </summary>
            <param name="searchContext">The search context.</param>
            <param name="by">The by.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Atata.ISearchContextLoggingExtensions.GetAllWithLogging(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)">
            <summary>
            Gets all elements within a log section.
            </summary>
            <param name="searchContext">The search context.</param>
            <param name="by">The by.</param>
            <returns>Found elements.</returns>
        </member>
        <member name="T:Atata.IWebElementLoggingExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:OpenQA.Selenium.IWebElement" />
            that wrap actual methods with log sections.
            </summary>
        </member>
        <member name="M:Atata.IWebElementLoggingExtensions.ClearWithLogging(OpenQA.Selenium.IWebElement)">
            <summary>
            Clears the value of an element within a log section.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Atata.IWebElementLoggingExtensions.ClickWithLogging(OpenQA.Selenium.IWebElement)">
            <summary>
            Clicks an element within a log section.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Atata.IWebElementLoggingExtensions.SendKeysWithLogging(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Sends the keys to an element within a log section.
            </summary>
            <param name="element">The element.</param>
            <param name="text">The text.</param>
        </member>
        <member name="T:Atata.Go">
            <summary>
            Provides the navigation functionality between pages and windows.
            </summary>
        </member>
        <member name="M:Atata.Go.To``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            Navigates to the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="url">The URL.</param>
            <param name="navigate">If set to <see langword="true" /> executes page object navigation functionality.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToWindow``1(``0,System.String,System.Boolean)">
            <summary>
            Navigates to the window with the specified page object by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToWindow``1(System.String,System.Boolean)">
            <summary>
            Navigates to the window by name.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="windowName">Name of the browser window.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToNextWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the next window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToPreviousWindow``1(``0,System.Boolean)">
            <summary>
            Navigates to the previous window with the specified page object.
            </summary>
            <typeparam name="T">The type of the page object.</typeparam>
            <param name="pageObject">
            The page object.
            If set to <see langword="null" /> creates an instance using the default constructor.</param>
            <param name="temporarily">If set to <see langword="true" /> navigates temporarily preserving current page object state.</param>
            <returns>The page object.</returns>
        </member>
        <member name="M:Atata.Go.ToUrl(System.String)">
            <summary>
            Navigates to the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:Atata.IHasOptionalProperties">
            <summary>
            Contains optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.IHasOptionalProperties.OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="T:Atata.DirectoryEnumerableProvider`1">
            <summary>
            Represents the value provider class that wraps enumerable of <see cref="T:Atata.DirectorySubject" /> objects and is hosted in <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.DirectoryEnumerableProvider`1.#ctor(`0,Atata.IObjectSource{System.Collections.Generic.IEnumerable{Atata.DirectorySubject}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DirectoryEnumerableProvider`1" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.DirectoryEnumerableProvider`1.Names">
            <summary>
            Gets the directory names.
            </summary>
        </member>
        <member name="P:Atata.DirectoryEnumerableProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.DirectorySubject" /> for the directory with the specified name.
            </summary>
            <value>
            The <see cref="T:Atata.DirectorySubject" />.
            </value>
            <param name="directoryName">Name of the directory.</param>
            <returns>A <see cref="T:Atata.DirectorySubject" /> instance.</returns>
        </member>
        <member name="T:Atata.DirectoryFilesProvider">
            <summary>
            Represents the provider of enumerable <see cref="T:Atata.FileSubject" /> objects that represent the files in a certain directory.
            </summary>
        </member>
        <member name="M:Atata.DirectoryFilesProvider.#ctor(Atata.DirectorySubject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DirectoryFilesProvider" /> class.
            </summary>
            <param name="owner">The owner, which is the parent directory subject.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.DirectoryFilesProvider.Names">
            <summary>
            Gets the file names.
            </summary>
        </member>
        <member name="P:Atata.DirectoryFilesProvider.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.FileSubject" /> for the file with the specified name.
            </summary>
            <value>The <see cref="T:Atata.FileSubject" />.</value>
            <param name="fileName">Name of the file.</param>
            <returns>A <see cref="T:Atata.FileSubject" /> instance.</returns>
        </member>
        <member name="T:Atata.DirectorySubject">
            <summary>
            Represents the directory test subject that wraps <see cref="T:System.IO.DirectoryInfo" /> object.
            </summary>
        </member>
        <member name="M:Atata.DirectorySubject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DirectorySubject" /> class.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.DirectorySubject.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DirectorySubject" /> class.
            </summary>
            <param name="directoryInfo">The <see cref="T:System.IO.DirectoryInfo" /> object.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.DirectorySubject.#ctor(Atata.IObjectSource{System.IO.DirectoryInfo},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.DirectorySubject" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.DirectorySubject.Exists">
            <summary>
            Gets a value provider indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:Atata.DirectorySubject.Name">
            <summary>
            Gets a value provider of the directory name.
            </summary>
        </member>
        <member name="P:Atata.DirectorySubject.FullName">
            <summary>
            Gets a value provider of the directory full name (path).
            </summary>
        </member>
        <member name="P:Atata.DirectorySubject.Directories">
            <summary>
            Gets the subdirectories of the current directory.
            </summary>
        </member>
        <member name="P:Atata.DirectorySubject.Files">
            <summary>
            Gets the files of the current directory.
            </summary>
        </member>
        <member name="T:Atata.DirectoryVerificationProviderExtensions">
            <summary>
            Provides a set of directory verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.Exist(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject})">
            <summary>
            Verifies that directory exists.
            </summary>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainFile(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.String)">
            <summary>
            Verifies that directory contains a file with the specified name.
            </summary>
            <param name="verifier">The verification provider.</param>
            <param name="fileName">The file name.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainFiles(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.String[])">
            <summary>
            Verifies that directory contains files with the specified names.
            </summary>
            <param name="fileNames">The file names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainFiles(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that directory contains files with the specified names.
            </summary>
            <param name="verifier">The verification provider.</param>
            <param name="fileNames">The file names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainDirectory(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.String)">
            <summary>
            Verifies that directory contains a subdirectory with the specified name.
            </summary>
            <param name="verifier">The verification provider.</param>
            <param name="directoryName">The directory name.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainDirectories(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.String[])">
            <summary>
            Verifies that directory contains subdirectories with the specified names.
            </summary>
            <param name="directoryNames">The directory names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.DirectoryVerificationProviderExtensions.ContainDirectories(Atata.IObjectVerificationProvider{System.IO.DirectoryInfo,Atata.DirectorySubject},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that directory contains subdirectories with the specified names.
            </summary>
            <param name="verifier">The verification provider.</param>
            <param name="directoryNames">The directory names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="T:Atata.FileEnumerableProvider`1">
            <summary>
            Represents the value provider class that wraps enumerable of <see cref="T:Atata.FileSubject" /> objects and is hosted in <typeparamref name="TOwner" /> object.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.FileEnumerableProvider`1.#ctor(`0,Atata.IObjectSource{System.Collections.Generic.IEnumerable{Atata.FileSubject}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FileEnumerableProvider`1" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.FileEnumerableProvider`1.Names">
            <summary>
            Gets the file names.
            </summary>
        </member>
        <member name="P:Atata.FileEnumerableProvider`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.FileSubject" /> for the file with the specified name.
            </summary>
            <value>The <see cref="T:Atata.FileSubject" />.</value>
            <param name="fileName">Name of the file.</param>
            <returns>A <see cref="T:Atata.FileSubject" /> instance.</returns>
        </member>
        <member name="T:Atata.FileSubject">
            <summary>
            Represents the file test subject that wraps <see cref="T:System.IO.FileInfo" /> object.
            </summary>
        </member>
        <member name="M:Atata.FileSubject.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FileSubject" /> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.FileSubject.#ctor(System.IO.FileInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FileSubject" /> class.
            </summary>
            <param name="fileInfo">The <see cref="T:System.IO.FileInfo" /> object.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Atata.FileSubject.#ctor(Atata.IObjectSource{System.IO.FileInfo},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FileSubject" /> class.
            </summary>
            <param name="objectSource">The object source.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.FileSubject.Exists">
            <summary>
            Gets a value provider indicating whether the file exists.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.Name">
            <summary>
            Gets a value provider of the file name.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.FullName">
            <summary>
            Gets a value provider of the full file name.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.Extension">
            <summary>
            Gets a value provider of the file extension, like <c>.txt</c>.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.NameWithoutExtension">
            <summary>
            Gets a value provider of the file name without extension.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.IsReadOnly">
            <summary>
            Gets a value provider that determines if the file is read only.
            </summary>
        </member>
        <member name="P:Atata.FileSubject.Length">
            <summary>
            Gets a value provider of the size of the file in bytes.
            </summary>
        </member>
        <member name="M:Atata.FileSubject.ReadAllText">
            <summary>
            Returns a new <see cref="T:Atata.Subject`1" /> for the file text.
            </summary>
            <returns>A new <see cref="T:Atata.Subject`1" />.</returns>
        </member>
        <member name="T:Atata.FileVerificationProviderExtensions">
            <summary>
            Provides a set of file verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.FileVerificationProviderExtensions.Exist(Atata.IObjectVerificationProvider{System.IO.FileInfo,Atata.FileSubject})">
            <summary>
            Verifies that file exists.
            </summary>
            <param name="verifier">The should instance.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="T:Atata.SubdirectoriesProvider">
            <summary>
            Represents the provider of enumerable <see cref="T:Atata.DirectorySubject" /> objects that represent the subdirectories of a certain directory.
            </summary>
        </member>
        <member name="M:Atata.SubdirectoriesProvider.#ctor(Atata.DirectorySubject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.SubdirectoriesProvider" /> class.
            </summary>
            <param name="owner">The owner, which is the parent directory subject.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="P:Atata.SubdirectoriesProvider.Names">
            <summary>
            Gets the directory names.
            </summary>
        </member>
        <member name="P:Atata.SubdirectoriesProvider.Item(System.String)">
            <summary>
            Gets the <see cref="T:Atata.DirectorySubject" /> for the directory with the specified name.
            </summary>
            <value>
            The <see cref="T:Atata.DirectorySubject" />.
            </value>
            <param name="directoryName">Name of the directory.</param>
            <returns>A <see cref="T:Atata.DirectorySubject" /> instance.</returns>
        </member>
        <member name="P:Atata.ISupportsMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:Atata.ISupportsMetadata.ComponentType">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="T:Atata.AtataContextLogEventInfoFactory">
            <summary>
            Represents the factory of <see cref="T:Atata.LogEventInfo" />, which populates the log event with information from <see cref="T:Atata.AtataContext" />.
            </summary>
        </member>
        <member name="M:Atata.AtataContextLogEventInfoFactory.Create(Atata.LogLevel,System.String)">
            <summary>
            Creates the <see cref="T:Atata.LogEventInfo" /> instance with the specified <paramref name="level" /> and <paramref name="message" />.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Atata.LogEventInfo" /> instance.</returns>
        </member>
        <member name="T:Atata.BasicLogEventInfoFactory">
            <summary>
            Represents the basic factory of <see cref="T:Atata.LogEventInfo" />.
            </summary>
        </member>
        <member name="M:Atata.BasicLogEventInfoFactory.Create(Atata.LogLevel,System.String)">
            <summary>
            Creates the <see cref="T:Atata.LogEventInfo" /> instance with the specified <paramref name="level" /> and <paramref name="message" />.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Atata.LogEventInfo" /> instance.</returns>
        </member>
        <member name="T:Atata.ConsoleLogConsumer">
            <summary>
            Represents the log consumer that uses <see cref="M:System.Console.WriteLine(System.String)" /> method for logging.
            </summary>
            <seealso cref="T:Atata.TextOutputLogConsumer" />
        </member>
        <member name="T:Atata.FileScreenshotConsumer">
            <summary>
            Represents the screenshot consumer that saves the screenshot to the file.
            By default uses <see cref="P:Atata.AtataContext.Artifacts" /> directory as a directory path format,
            <c>"{screenshot-number:D2} - {screenshot-pageobjectname} {screenshot-pageobjecttypename}{screenshot-title: - *}"</c> as a file name format
            and <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png" /> as an image format.
            Example of a screenshot file path using default settings: <c>"artifacts\20220303T143404\SampleTest\01 - Home page - Screenshot title.png"</c>.
            Available predefined path variables are:
            <c>{build-start}</c>, <c>{build-start-utc}</c>
            <c>{test-name}</c>, <c>{test-name-sanitized}</c>,
            <c>{test-suite-name}</c>, <c>{test-suite-name-sanitized}</c>,
            <c>{test-start}</c>, <c>{test-start-utc}</c>,
            <c>{driver-alias}</c>, <c>{screenshot-number}</c>,
            <c>{screenshot-title}</c>, <c>{screenshot-pageobjectname}</c>,
            <c>{screenshot-pageobjecttypename}</c>, <c>{screenshot-pageobjectfullname}</c>.
            Path variables support formatting.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.DirectoryPathBuilder">
            <summary>
            Gets or sets the builder of the directory path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FileNameBuilder">
            <summary>
            Gets or sets the builder of the file name.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FilePathBuilder">
            <summary>
            Gets or sets the builder of the file path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.DirectoryPath">
            <summary>
            Gets or sets the directory path.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FileName">
            <summary>
            Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Atata.FileScreenshotConsumer.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="M:Atata.FileScreenshotConsumer.FormatPath(System.String,Atata.ScreenshotInfo)">
            <summary>
            Formats the screenshot file path using path variables.
            </summary>
            <param name="format">The format.</param>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The formatted file path format.</returns>
        </member>
        <member name="M:Atata.FileScreenshotConsumer.BuildFilePath(Atata.ScreenshotInfo)">
            <summary>
            Builds the path of the file without the extension.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The file path without the extension.</returns>
        </member>
        <member name="P:Atata.FileScreenshotConsumerBase.ImageFormat">
            <summary>
            Gets or sets the image format.
            The default format is <see cref="F:OpenQA.Selenium.ScreenshotImageFormat.Png" />.
            </summary>
        </member>
        <member name="M:Atata.FileScreenshotConsumerBase.Take(Atata.ScreenshotInfo)">
            <summary>
            Takes the specified screenshot.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
        </member>
        <member name="M:Atata.FileScreenshotConsumerBase.BuildFilePath(Atata.ScreenshotInfo)">
            <summary>
            Builds the path of the file without the extension.
            </summary>
            <param name="screenshotInfo">The screenshot information.</param>
            <returns>The file path without the extension.</returns>
        </member>
        <member name="T:Atata.ILogConsumer">
            <summary>
            Defines a method to log the event information.
            </summary>
        </member>
        <member name="M:Atata.ILogConsumer.Log(Atata.LogEventInfo)">
            <summary>
            Logs the specified event information.
            </summary>
            <param name="eventInfo">The event information.</param>
        </member>
        <member name="T:Atata.ILogEventInfoFactory">
            <summary>
            A factory of <see cref="T:Atata.LogEventInfo" />.
            </summary>
        </member>
        <member name="M:Atata.ILogEventInfoFactory.Create(Atata.LogLevel,System.String)">
            <summary>
            Creates the <see cref="T:Atata.LogEventInfo" /> instance with the specified <paramref name="level" /> and <paramref name="message" />.
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Atata.LogEventInfo" /> instance.</returns>
        </member>
        <member name="T:Atata.ILogManager">
            <summary>
            An interface of log writer, an entry point for the Atata logging functionality.
            </summary>
        </member>
        <member name="M:Atata.ILogManager.Trace(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Trace" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.ILogManager.Debug(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Debug" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.ILogManager.Info(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Info" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.ILogManager.Warn(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.ILogManager.Warn(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.Warn(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.Error(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.Error(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.Fatal(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Fatal" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.Fatal(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.ILogManager.ExecuteSection(Atata.LogSection,System.Action)">
            <summary>
            Executes the action within the log section.
            Writes start and end log messages.
            Writes exception to the end log message, if it occurs.
            </summary>
            <param name="section">The section.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Atata.ILogManager.ExecuteSection``1(Atata.LogSection,System.Func{``0})">
            <summary>
            Executes the function within the log section.
            Writes start and end log messages.
            Writes exception to the end log message, if it occurs.
            Also writes result of the <paramref name="function" /> to the end log message.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="section">The section.</param>
            <param name="function">The function to execute.</param>
            <returns>The result of <paramref name="function" />.</returns>
        </member>
        <member name="M:Atata.ILogManager.Start(Atata.LogSection)">
            <summary>
            Starts the specified log section.
            </summary>
            <param name="section">The log section.</param>
        </member>
        <member name="M:Atata.ILogManager.EndSection">
            <summary>
            Ends the latest log section.
            </summary>
        </member>
        <member name="M:Atata.ILogManager.Screenshot(System.String)">
            <summary>
            Takes a screenshot of current page with the specified title optionally.
            </summary>
            <param name="title">The title of screenshot.</param>
        </member>
        <member name="T:Atata.INamedLogConsumer">
            <summary>
            Represents the log consumer that provides the logger name.
            </summary>
        </member>
        <member name="P:Atata.INamedLogConsumer.LoggerName">
            <summary>
            Gets or sets the name of the logger.
            </summary>
        </member>
        <member name="T:Atata.IScreenshotConsumer">
            <summary>
            Defines the interface for the screenshot consumer.
            </summary>
        </member>
        <member name="M:Atata.IScreenshotConsumer.Take(Atata.ScreenshotInfo)">
            <summary>
            Takes the specified screenshot.
            </summary>
            <param name="screenshotInfo">The screenshot information object.</param>
        </member>
        <member name="T:Atata.LazyInitializableLogConsumer">
            <summary>
            Represents the base class for log consumer that needs to be initialized in a lazy way.
            </summary>
        </member>
        <member name="P:Atata.LazyInitializableLogConsumer.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:Atata.LazyInitializableLogConsumer.OnLog(Atata.LogEventInfo)">
            <summary>
            Logs the specified event information.
            </summary>
            <param name="eventInfo">The event information.</param>
        </member>
        <member name="M:Atata.LazyInitializableLogConsumer.GetLogger">
            <summary>
            Gets a logger to set to <see cref="P:Atata.LazyInitializableLogConsumer.Logger" /> property and later use for logging.
            </summary>
            <returns>A logger instance.</returns>
        </member>
        <member name="T:Atata.Log4NetConsumer">
            <summary>
            Represents the log consumer for log4net.
            </summary>
        </member>
        <member name="P:Atata.Log4NetConsumer.RepositoryName">
            <summary>
            Gets or sets the name of the logger repository.
            </summary>
        </member>
        <member name="P:Atata.Log4NetConsumer.RepositoryAssembly">
            <summary>
            Gets or sets the assembly to use to lookup the repository.
            </summary>
        </member>
        <member name="P:Atata.Log4NetConsumer.LoggerName">
            <summary>
            Gets or sets the name of the logger.
            </summary>
        </member>
        <member name="T:Atata.LogConsumerConfiguration">
            <summary>
            Represents the configuration of <see cref="T:Atata.ILogConsumer" />.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.Consumer">
            <summary>
            Gets the log consumer.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.MinLevel">
            <summary>
            Gets the minimum log level.
            The default value is <see cref="F:Atata.LogLevel.Trace" />.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.LogSectionFinish">
            <summary>
            Gets a value indicating whether to log section finish.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.MessageNestingLevelIndent">
            <summary>
            Gets or sets the message nesting level indent.
            The default value is <c>"- "</c>.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.MessageStartSectionPrefix">
            <summary>
            Gets or sets the message start section prefix.
            The default value is <c>"&gt; "</c>.
            </summary>
        </member>
        <member name="P:Atata.LogConsumerConfiguration.MessageEndSectionPrefix">
            <summary>
            Gets or sets the message end section prefix.
            The default value is <c>"&lt; "</c>.
            </summary>
        </member>
        <member name="M:Atata.LogConsumerConfiguration.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Atata.LogConsumerConfiguration.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Atata.LogEventInfo">
            <summary>
            Represents the logging event information raised by Atata framework.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Context">
            <summary>
            Gets the context of the logging event.
            Can be <see langword="null" />.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Timestamp">
            <summary>
            Gets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Level">
            <summary>
            Gets the level of the logging event.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Message">
            <summary>
            Gets the log message.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.Exception">
            <summary>
            Gets the exception information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.SectionStart">
            <summary>
            Gets the section start information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.SectionEnd">
            <summary>
            Gets the section end information.
            </summary>
        </member>
        <member name="P:Atata.LogEventInfo.NestingLevel">
            <summary>
            Gets the nesting level.
            </summary>
        </member>
        <member name="T:Atata.LogLevel">
            <summary>
            Specifies the level of log event.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:Atata.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="T:Atata.LogManager">
            <summary>
            Represents the log manager, an entry point for the Atata logging functionality.
            </summary>
            <seealso cref="T:Atata.ILogManager" />
        </member>
        <member name="M:Atata.LogManager.Use(Atata.LogConsumerConfiguration)">
            <summary>
            Use the specified consumer configuration for logging.
            </summary>
            <param name="logConsumerConfiguration">The log consumer configuration.</param>
            <returns>
            The same <see cref="T:Atata.LogManager" /> instance.
            </returns>
        </member>
        <member name="M:Atata.LogManager.Use(Atata.IScreenshotConsumer)">
            <summary>
            Use the specified screenshot consumer.
            </summary>
            <param name="consumer">The screenshot consumer.</param>
            <returns>The same <see cref="T:Atata.LogManager" /> instance.</returns>
        </member>
        <member name="M:Atata.LogManager.AddSecretStringsToMask(System.Collections.Generic.IEnumerable{Atata.SecretStringToMask})">
            <summary>
            Adds the secret strings to mask.
            </summary>
            <param name="secretStringsToMask">The secret strings to mask.</param>
            <returns>The same <see cref="T:Atata.LogManager" /> instance.</returns>
        </member>
        <member name="M:Atata.LogManager.Trace(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Trace" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.LogManager.Debug(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Debug" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.LogManager.Info(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Info" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.LogManager.Warn(System.String,System.Object[])">
            <summary>
            Writes the log message with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Atata.LogManager.Warn(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.Warn(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.Error(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.Error(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.Fatal(System.Exception)">
            <summary>
            Writes the exception with <see cref="F:Atata.LogLevel.Fatal" /> level.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.Fatal(System.String,System.Exception)">
            <summary>
            Writes the log message and exception with <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Atata.LogManager.ExecuteSection(Atata.LogSection,System.Action)">
            <summary>
            Executes the action within the log section.
            Writes start and end log messages.
            Writes exception to the end log message, if it occurs.
            </summary>
            <param name="section">The section.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Atata.LogManager.ExecuteSection``1(Atata.LogSection,System.Func{``0})">
            <summary>
            Executes the function within the log section.
            Writes start and end log messages.
            Writes exception to the end log message, if it occurs.
            Also writes result of the <paramref name="function" /> to the end log message.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="section">The section.</param>
            <param name="function">The function to execute.</param>
            <returns>The result of <paramref name="function" />.</returns>
        </member>
        <member name="M:Atata.LogManager.Start(Atata.LogSection)">
            <summary>
            Starts the specified log section.
            </summary>
            <param name="section">The log section.</param>
        </member>
        <member name="M:Atata.LogManager.EndSection">
            <summary>
            Ends the latest log section.
            </summary>
        </member>
        <member name="M:Atata.LogManager.Screenshot(System.String)">
            <summary>
            Takes a screenshot of current page with the specified title optionally.
            </summary>
            <param name="title">The title of screenshot.</param>
        </member>
        <member name="T:Atata.NLogConsumer">
            <summary>
            Represents the log consumer that writes log to NLog using default NLog configuration.
            </summary>
        </member>
        <member name="P:Atata.NLogConsumer.LoggerName">
            <summary>
            Gets or sets the name of the logger.
            </summary>
        </member>
        <member name="M:Atata.NLogConsumer.GetLogger">
            <summary>
            Gets a logger to set to <see cref="P:Atata.LazyInitializableLogConsumer.Logger" /> property and later use for logging.
            </summary>
            <returns>A logger instance.</returns>
        </member>
        <member name="M:Atata.NLogConsumer.OnLog(Atata.LogEventInfo)">
            <summary>
            Logs the specified event information.
            </summary>
            <param name="eventInfo">The event information.</param>
        </member>
        <member name="T:Atata.NLogFileConsumer">
            <summary>
            Represents the log consumer that writes log to file using NLog.
            </summary>
        </member>
        <member name="F:Atata.NLogFileConsumer.DefaultFileName">
            <summary>
            The default file name, which is <c>"Trace.log"</c>.
            </summary>
        </member>
        <member name="P:Atata.NLogFileConsumer.DirectoryPathBuilder">
            <summary>
            Gets or sets the builder of the directory path.
            </summary>
        </member>
        <member name="P:Atata.NLogFileConsumer.FileNameBuilder">
            <summary>
            Gets or sets the builder of the file name.
            </summary>
        </member>
        <member name="P:Atata.NLogFileConsumer.FilePathBuilder">
            <summary>
            Gets or sets the builder of the file path.
            </summary>
        </member>
        <member name="P:Atata.NLogFileConsumer.Layout">
            <summary>
            Gets or sets the layout of log event.
            </summary>
        </member>
        <member name="M:Atata.NLogFileConsumer.GetLogger">
            <summary>
            Gets a logger to set to <see cref="P:Atata.LazyInitializableLogConsumer.Logger" /> property and later use for logging.
            </summary>
            <returns>A logger instance.</returns>
        </member>
        <member name="M:Atata.NLogFileConsumer.OnLog(Atata.LogEventInfo)">
            <summary>
            Logs the specified event information.
            </summary>
            <param name="eventInfo">The event information.</param>
        </member>
        <member name="M:Atata.NLogFileConsumer.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Atata.Report`1">
            <summary>
            Provides reporting functionality.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
        </member>
        <member name="M:Atata.Report`1.#ctor(`0,Atata.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.Report`1" /> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="M:Atata.Report`1.Trace(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Trace" /> level optionally using the specified <paramref name="args" /> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Debug(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Debug" /> level optionally using the specified <paramref name="args" /> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Info(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Info" /> level optionally using the specified <paramref name="args" /> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Warn(System.String,System.Object[])">
            <summary>
            Writes the log message at the <see cref="F:Atata.LogLevel.Warn" /> level optionally using the specified <paramref name="args" /> as a message format parameters.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Warn(System.Exception)">
            <summary>
            Writes the exception at the <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Warn(System.String,System.Exception)">
            <summary>
            Writes the log message and optionally exception at the <see cref="F:Atata.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.Exception)">
            <summary>
            Writes the exception at the <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.String,System.Exception)">
            <summary>
            Writes the log message and optionally exception at the <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Error(System.String,System.String)">
            <summary>
            Writes the log message and stack trace at the <see cref="F:Atata.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="stackTrace">The stack trace.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Fatal(System.Exception)">
            <summary>
            Writes the exception at the <see cref="F:Atata.LogLevel.Fatal" /> level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Fatal(System.String,System.Exception)">
            <summary>
            Writes the log message and optionally exception at the <see cref="F:Atata.LogLevel.Fatal" /> level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(Atata.LogSection)">
            <summary>
            Starts the specified log section.
            </summary>
            <param name="section">The log section.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(System.String)">
            <summary>
            Starts the specified log section with message.
            </summary>
            <param name="sectionMessage">The section message.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Start(System.String,Atata.LogLevel)">
            <summary>
            Starts the specified log section with message and log level.
            </summary>
            <param name="sectionMessage">The section message.</param>
            <param name="level">The level.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.EndSection">
            <summary>
            Ends the latest log section.
            </summary>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="M:Atata.Report`1.Screenshot(System.String)">
            <summary>
            Takes a screenshot with the optionally specified title.
            </summary>
            <param name="title">The title.</param>
            <returns>The instance of the owner object.</returns>
        </member>
        <member name="T:Atata.ScreenshotInfo">
            <summary>
            Represents the screenshot information.
            Is used by the classes that implement <see cref="T:Atata.IScreenshotConsumer" />.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Screenshot">
            <summary>
            Gets the screenshot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Number">
            <summary>
            Gets the number.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.Title">
            <summary>
            Gets the title. Can be <see langword="null" />.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectName">
            <summary>
            Gets the name of the page object that was shot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectTypeName">
            <summary>
            Gets the type name of the page object that was shot.
            </summary>
        </member>
        <member name="P:Atata.ScreenshotInfo.PageObjectFullName">
            <summary>
            Gets the full name of the page object that was shot.
            </summary>
        </member>
        <member name="T:Atata.SecretStringToMask">
            <summary>
            Represents the pair of a secret string and a mask that should replace the string.
            </summary>
        </member>
        <member name="M:Atata.SecretStringToMask.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.SecretStringToMask" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
        </member>
        <member name="P:Atata.SecretStringToMask.Value">
            <summary>
            Gets the secret value.
            </summary>
        </member>
        <member name="P:Atata.SecretStringToMask.Mask">
            <summary>
            Gets the mask.
            </summary>
        </member>
        <member name="T:Atata.LogSection">
            <summary>
            Represents the log section.
            </summary>
        </member>
        <member name="P:Atata.LogSection.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Atata.LogSection.Level">
            <summary>
            Gets or sets the log level.
            </summary>
        </member>
        <member name="P:Atata.LogSection.StartedAt">
            <summary>
            Gets the date/time of section start.
            </summary>
        </member>
        <member name="P:Atata.LogSection.IsResultSet">
            <summary>
            Gets a value indicating whether the result is set.
            </summary>
        </member>
        <member name="P:Atata.LogSection.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="P:Atata.LogSection.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:Atata.LogSection.ElapsedTime">
            <summary>
            Gets the elapsed time of section execution.
            </summary>
        </member>
        <member name="T:Atata.VerificationLogSection">
            <summary>
            Represents the log section of verification.
            </summary>
        </member>
        <member name="T:Atata.TextOutputLogConsumer">
            <summary>
            Represents text output log consumer.
            Is used for regular text logging.
            Action to write text to some source can be passed via constructor.
            Also it is possible to define custom class inherited from <see cref="T:Atata.TextOutputLogConsumer" /> and override <see cref="M:Atata.TextOutputLogConsumer.Write(System.String)" /> method.
            </summary>
        </member>
        <member name="P:Atata.TextOutputLogConsumer.Separator">
            <summary>
            Gets or sets the text parts separator.
            The default value is <c>" "</c>.
            </summary>
        </member>
        <member name="P:Atata.TextOutputLogConsumer.TimestampFormat">
            <summary>
            Gets or sets the timestamp format.
            The default value is <c>"yyyy-MM-dd HH:mm:ss.ffff"</c>.
            </summary>
        </member>
        <member name="F:Atata.Randomizer.DefaultStringLength">
            <summary>
            The default random string length.
            </summary>
        </member>
        <member name="F:Atata.Randomizer.DefaultStringCharSet">
            <summary>
            The default random string character set.
            </summary>
        </member>
        <member name="M:Atata.Randomizer.GetString(System.String,System.Int32)">
            <summary>
            Gets the random string.
            </summary>
            <param name="format">The format, that can contain <c>{0}</c> for random value insertion.</param>
            <param name="length">The length.</param>
            <returns>The random string.</returns>
            <exception cref="T:System.ArgumentException">
            The length should be positive.
            Or the length of string is not greater than the format length.
            </exception>
        </member>
        <member name="M:Atata.Randomizer.GetInt(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="exclusiveMax">The exclusive upper bound of the random number to be generated. Must be greater than or equal to <c>0</c>.</param>
            <returns>The random <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:Atata.Randomizer.GetInt(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="min">The inclusive lower bound of the random number returned.</param>
            <param name="max">The inclusive upper bound of the random number returned. Must be greater than or equal to <paramref name="min" />.</param>
            <returns>The random <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="T:Atata.ComponentScopeFindOptions">
            <summary>
            Represents the options of UI component scope element finding.
            </summary>
        </member>
        <member name="M:Atata.ComponentScopeFindOptions.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Atata.ComponentScopeFindOptions.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Atata.FindAs">
            <summary>
            Specifies the way <see cref="T:Atata.FindAttribute" /> should be used.
            </summary>
        </member>
        <member name="F:Atata.FindAs.Scope">
            <summary>
            Use the attribute as a scope element locator.
            </summary>
        </member>
        <member name="F:Atata.FindAs.Parent">
            <summary>
            Use the attribute as a parent layer.
            It means that the scope element or next layer element is located as a child of this one in DOM.
            </summary>
        </member>
        <member name="F:Atata.FindAs.Ancestor">
            <summary>
            Use the attribute as an ancestor layer.
            It means that the scope element or next layer element is located as a descendant of this one in DOM.
            </summary>
        </member>
        <member name="F:Atata.FindAs.ShadowHost">
            <summary>
            Use the attribute as a shadow host layer.
            It means that the scope element or next layer element is located inside the shadow root of this one in DOM.
            </summary>
        </member>
        <member name="F:Atata.FindAs.Sibling">
            <summary>
            Use the attribute as a sibling layer.
            It means that the scope element or next layer element is located as a sibling of this one in DOM.
            </summary>
        </member>
        <member name="T:Atata.ComponentScopeFindResult">
            <summary>
            Represents the result of UI component scope element finding.
            </summary>
        </member>
        <member name="P:Atata.ComponentScopeFindResult.Missing">
            <summary>
            Gets the missing result.
            </summary>
        </member>
        <member name="T:Atata.FindByColumnHeaderStrategy">
            <summary>
            Represents a strategy that finds a control in a cell that corresponds the column searched by the column header text.
            First finds the index of the column header and then finds the cell by this index.
            </summary>
        </member>
        <member name="F:Atata.FindByColumnHeaderStrategy.DefaultHeaderXPath">
            <summary>
            The default XPath of the header, which is <c>"ancestor::table[1]//th"</c>.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnHeaderStrategy" /> class
            using <see cref="F:Atata.FindByColumnHeaderStrategy.DefaultHeaderXPath" />.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnHeaderStrategy" /> class
            using the specified <paramref name="headerXPath" /> argument value.
            </summary>
            <param name="headerXPath">The XPath of the header element.</param>
        </member>
        <member name="P:Atata.FindByColumnHeaderStrategy.HeaderXPath">
            <summary>
            Gets or sets the XPath of the header element.
            The default value is <c>"ancestor::table[1]//th"</c>.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.GetColumnIndex(OpenQA.Selenium.ISearchContext,Atata.ComponentScopeFindOptions,Atata.SearchOptions)">
            <summary>
            Gets the index of the column.
            </summary>
            <param name="scope">The scope.</param>
            <param name="options">The component scope locate options.</param>
            <param name="searchOptions">The search options.</param>
            <returns>The index of the column or <see langword="null" /> if not found.</returns>
        </member>
        <member name="M:Atata.FindByColumnHeaderStrategy.CreateColumnIndexStrategy(System.Int32)">
            <summary>
            Creates the strategy to find a component by the column index.
            By default creates an instance of <see cref="T:Atata.FindByColumnIndexStrategy" />.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>An instance of <see cref="T:Atata.FindByColumnIndexStrategy" />.</returns>
        </member>
        <member name="T:Atata.FindByColumnIndexStrategy">
            <summary>
            Represents a strategy that finds a control in a cell searched by the specified column index.
            </summary>
        </member>
        <member name="M:Atata.FindByColumnIndexStrategy.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atata.FindByColumnIndexStrategy" /> class.
            </summary>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="P:Atata.FindByColumnIndexStrategy.ColumnIndex">
            <summary>
            Gets the index of the column.
            </summary>
        </member>
        <member name="P:Atata.FindByColumnIndexStrategy.CellXPath">
            <summary>
            Gets or sets the XPath of the cell.
            The default value is <c>"td"</c>.
            </summary>
        </member>
        <member name="P:Atata.FindByScriptStrategy.Script">
            <summary>
            Gets the script.
            </summary>
        </member>
        <member name="T:Atata.FindItemByRelativeElementContentStrategy">
            <summary>
            Represents an item find strategy that finds the item by relative element content using its XPath.
            </summary>
        </member>
        <member name="T:Atata.IComponentScopeFindStrategy">
            <summary>
            Represents the strategy of UI component scope element finding.
            </summary>
        </member>
        <member name="M:Atata.IComponentScopeFindStrategy.Find(OpenQA.Selenium.ISearchContext,Atata.ComponentScopeFindOptions,Atata.SearchOptions)">
            <summary>
            Finds the component scope.
            </summary>
            <param name="scope">The scope where to search in.</param>
            <param name="options">The component options to use for search.</param>
            <param name="searchOptions">The element search options.</param>
            <returns>
            Returns an instance of one of the following types:
            <list type="bullet">
            <item><see cref="T:Atata.XPathComponentScopeFindResult" /></item>
            <item><see cref="T:Atata.SubsequentComponentScopeFindResult" /></item>
            <item><see cref="T:Atata.MissingComponentScopeFindResult" /></item>
            </list>
            </returns>
        </member>
        <member name="T:Atata.ScopeSource">
            <summary>
            Specifies the source of the scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Parent">
            <summary>
            Uses the parent's scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Grandparent">
            <summary>
            Uses the grandparent's (the parent of the parent) scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.PageObject">
            <summary>
            Uses the owner page object's scope.
            </summary>
        </member>
        <member name="F:Atata.ScopeSource.Page">
            <summary>
            Uses the page's scope (<c>&lt;body&gt;</c> element).
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Case">
            <summary>
            Gets the term case.
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Match">
            <summary>
            Gets the match.
            </summary>
        </member>
        <member name="P:Atata.ITermSettings.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Atata.TermCase">
            <summary>
            Specifies the term case.
            </summary>
        </member>
        <member name="F:Atata.TermCase.None">
            <summary>
            Doesn't apply the case.
            </summary>
        </member>
        <member name="F:Atata.TermCase.Title">
            <summary>
            Uses title case (e.g. <c>"Some of the Terms"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Capitalized">
            <summary>
            Uses title case with all words capitalized (e.g. <c>"Some Of The Terms"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Sentence">
            <summary>
            Uses sentence case (e.g. <c>"Some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.MidSentence">
            <summary>
            Uses mid-sentence case where the first word is not capitalized (e.g. <c>"some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Lower">
            <summary>
            Uses lower case (e.g. <c>"some term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.LowerMerged">
            <summary>
            Uses lower case with words merging (e.g. <c>"someterm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Upper">
            <summary>
            Uses upper case (e.g. <c>"SOME TERM"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.UpperMerged">
            <summary>
            Uses upper case with words merging (e.g. <c>"SOMETERM"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Camel">
            <summary>
            Uses camel case (e.g. <c>"someTerm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Pascal">
            <summary>
            Uses pascal case (e.g. <c>"SomeTerm"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Kebab">
            <summary>
            Uses dash ('-') and lower case (e.g. <c>"some-term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.HyphenKebab">
            <summary>
            Uses hyphen ('‐') and lower case (e.g. <c>"some‐term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.PascalKebab">
            <summary>
            Uses dash ('-') and pascal case (e.g. <c>"Some-Term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.PascalHyphenKebab">
            <summary>
            Uses hyphen ('‐') and pascal case (e.g. <c>"Some‐Term"</c>).
            </summary>
        </member>
        <member name="F:Atata.TermCase.Snake">
            <summary>
            Uses underscore ('_') and lower case (e.g. <c>"some_term"</c>).
            </summary>
        </member>
        <member name="T:Atata.TermMatch">
            <summary>
            Specifies the match approach for the term finding.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.Equals">
            <summary>
            Checks whether the text equals the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.Contains">
            <summary>
            Checks whether the text contains the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.StartsWith">
            <summary>
            Checks whether the text starts with the specified term.
            </summary>
        </member>
        <member name="F:Atata.TermMatch.EndsWith">
            <summary>
            Checks whether the text ends with the specified term.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Match">
            <summary>
            Gets or sets the match.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Case">
            <summary>
            Gets or sets the term case.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:Atata.TermOptions.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="T:Atata.TriggerEvents">
            <summary>
            Specifies the trigger events.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.None">
            <summary>
            None of the events.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.Init">
            <summary>
            Occurs upon the page object initialization.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.DeInit">
            <summary>
            Occurs upon the page object de-initialization.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAccess">
            <summary>
            Occurs before any access to the component.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterAccess">
            <summary>
            Occurs after any access to the component.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeGet">
            <summary>
            Occurs before the value is taken from the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterGet">
            <summary>
            Occurs after the value is taken from the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeSet">
            <summary>
            Occurs before the value is set to the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterSet">
            <summary>
            Occurs after the value is set to the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClick">
            <summary>
            Occurs before the click on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClick">
            <summary>
            Occurs after the click on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeHover">
            <summary>
            Occurs before the hover on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterHover">
            <summary>
            Occurs after the hover on the control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeFocus">
            <summary>
            Occurs before the control gets the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterFocus">
            <summary>
            Occurs after the control gets the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeBlur">
            <summary>
            Occurs before the control loses the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterBlur">
            <summary>
            Occurs after the control loses the focus.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeScroll">
            <summary>
            Occurs before the scrolling to control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterScroll">
            <summary>
            Occurs after the scrolling to control.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeGetOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeGet" /> and <see cref="F:Atata.TriggerEvents.BeforeSet" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrHover">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.BeforeHover" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.BeforeFocus" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeClickOrHoverOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick" />, <see cref="F:Atata.TriggerEvents.BeforeHover" /> and <see cref="F:Atata.TriggerEvents.BeforeFocus" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAnyAction">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick" />, <see cref="F:Atata.TriggerEvents.BeforeGet" />, <see cref="F:Atata.TriggerEvents.BeforeSet" />, <see cref="F:Atata.TriggerEvents.BeforeFocus" />, <see cref="F:Atata.TriggerEvents.BeforeBlur" /> and <see cref="F:Atata.TriggerEvents.BeforeScroll" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterGetOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterGet" /> and <see cref="F:Atata.TriggerEvents.AfterSet" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrHover">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick" /> and <see cref="F:Atata.TriggerEvents.AfterHover" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick" /> and <see cref="F:Atata.TriggerEvents.AfterFocus" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrHoverOrFocus">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick" />, <see cref="F:Atata.TriggerEvents.AfterHover" /> and <see cref="F:Atata.TriggerEvents.AfterFocus" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterAnyAction">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick" />, <see cref="F:Atata.TriggerEvents.AfterGet" />, <see cref="F:Atata.TriggerEvents.AfterSet" />, <see cref="F:Atata.TriggerEvents.AfterFocus" />, <see cref="F:Atata.TriggerEvents.AfterBlur" /> and <see cref="F:Atata.TriggerEvents.AfterScroll" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.AfterClickOrSet">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.AfterClick" /> and <see cref="F:Atata.TriggerEvents.AfterSet" />.
            </summary>
        </member>
        <member name="F:Atata.TriggerEvents.BeforeAndAfterClick">
            <summary>
            The combination of <see cref="F:Atata.TriggerEvents.BeforeClick" /> and <see cref="F:Atata.TriggerEvents.AfterClick" />.
            </summary>
        </member>
        <member name="T:Atata.TriggerPriority">
            <summary>
            Specifies the priority of the trigger execution.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Higher">
            <summary>
            The higher priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.High">
            <summary>
            The high priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Medium">
            <summary>
            The medium priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Low">
            <summary>
            The low priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Lower">
            <summary>
            The lower priority.
            </summary>
        </member>
        <member name="F:Atata.TriggerPriority.Lowest">
            <summary>
            The lowest priority.
            </summary>
        </member>
        <member name="T:Atata.UIComponentMetadata">
            <summary>
            Represents the UI component metadata which consists of component name, type, attributes, etc.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.Name">
            <summary>
            Gets the name of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentType">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ParentComponentType">
            <summary>
            Gets the type of the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentDefinitionAttribute">
            <summary>
            Gets the component definition attribute.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.DeclaredAttributes">
            <summary>
            Gets the attributes hosted at the declared level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ParentComponentAttributes">
            <summary>
            Gets the attributes hosted at the parent component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.AssemblyAttributes">
            <summary>
            Gets the attributes hosted at the assembly level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.GlobalAttributes">
            <summary>
            Gets the attributes hosted at the global level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.ComponentAttributes">
            <summary>
            Gets the attributes hosted at the component level.
            </summary>
        </member>
        <member name="P:Atata.UIComponentMetadata.AllAttributes">
            <summary>
            Gets all attributes in the following order of levels:
            <list type="number">
            <item>Declared</item>
            <item>Parent component</item>
            <item>Assembly</item>
            <item>Global</item>
            <item>Component</item>
            </list>
            </summary>
        </member>
        <member name="M:Atata.UIComponentMetadata.Contains``1">
            <summary>
            Determines whether this instance contains the attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns><see langword="true" /> if contains; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.TryGet``1(``0@)">
            <summary>
            Tries to get the first attribute of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="attribute">The attribute.</param>
            <returns><see langword="true" /> if attribute is found; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Get``1">
            <summary>
            Gets the first attribute of the specified type or <see langword="null" /> if no such attribute is found.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The first attribute found or <see langword="null" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Get``1(System.Func{Atata.AttributeFilter{``0},Atata.AttributeFilter{``0}})">
            <summary>
            Gets the first attribute of the specified type or <see langword="null" /> if no such attribute is found.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="filterConfiguration">The filter configuration function.</param>
            <returns>The first attribute found or <see langword="null" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetAll``1">
            <summary>
            Gets the sequence of attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The sequence of attributes found.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetAll``1(System.Func{Atata.AttributeFilter{``0},Atata.AttributeFilter{``0}})">
            <summary>
            Gets the sequence of attributes of the specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="filterConfiguration">The filter configuration function.</param>
            <returns>The sequence of attributes found.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Push(System.Attribute[])">
            <summary>
            Inserts the specified attributes into <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection at the beginning.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.Push(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Inserts the specified attributes into <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection at the beginning.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.Add(System.Attribute[])">
            <summary>
            Adds the specified attributes to <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection at the end.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.Add(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Adds the specified attributes to <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection at the end.
            </summary>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Atata.UIComponentMetadata.Remove(System.Attribute[])">
            <summary>
            Removes the specified attributes from <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns><see langword="true" /> if at least one item is successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.Remove(System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Removes the specified attributes from <see cref="P:Atata.UIComponentMetadata.DeclaredAttributes" /> collection.
            </summary>
            <param name="attributes">The attributes.</param>
            <returns><see langword="true" /> if at least one item is successfully removed; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.RemoveAll(System.Predicate{System.Attribute})">
            <summary>
            Removes all the attributes that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The match.</param>
            <returns>The number of removed elements.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetCulture">
            <summary>
            Gets the culture by searching the <see cref="T:Atata.CultureAttribute" /> at all attribute levels or current culture if not found.
            </summary>
            <returns>The <see cref="T:System.Globalization.CultureInfo" /> instance.</returns>
        </member>
        <member name="M:Atata.UIComponentMetadata.GetFormat">
            <summary>
            Gets the format by searching the <see cref="T:Atata.FormatAttribute" /> at all attribute levels or <see langword="null" /> if not found.
            </summary>
            <returns>The format or <see langword="null" /> if not found.</returns>
        </member>
        <member name="T:Atata.AssemblyFinder">
            <summary>
            Provides a set of methods for assembly finding.
            </summary>
        </member>
        <member name="M:Atata.AssemblyFinder.Find(System.String)">
            <summary>
            Finds the assembly by name.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>The found assembly.</returns>
            <exception cref="T:Atata.AssemblyNotFoundException">Assembly not found.</exception>
        </member>
        <member name="M:Atata.AssemblyFinder.FindAllByPatterns(System.String[])">
            <summary>
            Finds all assemblies that match the specified regex patterns.
            </summary>
            <param name="assemblyNamePatterns">The assembly name patterns.</param>
            <returns>The found assemblies.</returns>
        </member>
        <member name="M:Atata.AssemblyFinder.FindAllByPatterns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds all assemblies that match the specified regex patterns.
            </summary>
            <param name="assemblyNamePatterns">The assembly name patterns.</param>
            <returns>The found assemblies.</returns>
        </member>
        <member name="M:Atata.AssemblyFinder.FindAllByPattern(System.String)">
            <summary>
            Finds all assemblies that match the specified regex pattern.
            </summary>
            <param name="assemblyNamePattern">The assembly name pattern.</param>
            <returns>The found assemblies.</returns>
        </member>
        <member name="T:Atata.Stringifier">
            <summary>
            Provides a set of static methods for object conversion to readable string.
            The methods are useful for the formatting of objects for log messages.
            </summary>
        </member>
        <member name="T:Atata.ActivatorEx">
            <summary>
            Contains methods to create types of objects.
            To create an instance uses type's parameterless constructor or constructor containing only optional arguments.
            </summary>
        </member>
        <member name="T:Atata.IObjectCreator">
            <summary>
            Provides a functionality for object creation.
            </summary>
        </member>
        <member name="M:Atata.IObjectCreator.Create(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of specified type with a set of named values (constructor or property values).
            </summary>
            <param name="type">The type.</param>
            <param name="valuesMap">The values map.</param>
            <returns>An instance of created object.</returns>
        </member>
        <member name="M:Atata.IObjectCreator.Create(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an instance of specified type with a set of named values (constructor or property values).
            </summary>
            <param name="type">The type.</param>
            <param name="valuesMap">The values map.</param>
            <param name="alternativeParameterNamesMap">The map of alternative parameter names.</param>
            <returns>An instance of created object.</returns>
        </member>
        <member name="M:Atata.ObjectCreator.Create(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of specified type with a set of named values (constructor or property values).
            </summary>
            <param name="type">The type.</param>
            <param name="valuesMap">The values map.</param>
            <returns>An instance of created object.</returns>
        </member>
        <member name="M:Atata.ObjectCreator.Create(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an instance of specified type with a set of named values (constructor or property values).
            </summary>
            <param name="type">The type.</param>
            <param name="valuesMap">The values map.</param>
            <param name="alternativeParameterNamesMap">The map of alternative parameter names.</param>
            <returns>An instance of created object.</returns>
        </member>
        <member name="T:Atata.TemplateStringTransformer">
            <summary>
            Provides a set of methods for a string template transformation.
            </summary>
        </member>
        <member name="M:Atata.TemplateStringTransformer.CanTransform(System.String)">
            <summary>
            Determines whether the template has any variable and can be transformed.
            </summary>
            <param name="template">The template.</param>
            <returns>
            <c>true</c> if the template can be transformed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atata.TemplateStringTransformer.Transform(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Transforms the specified template by filling it with variables.
            The <paramref name="template" /> can contain variables wrapped with curly braces, e.g. <c>"{varName}"</c>.
            Variables support standard .NET formatting (<c>"{numberVar:D5}"</c> or <c>"{dateTimeVar:yyyy-MM-dd}"</c>)
            and extended formatting for strings
            (for example, <c>"{stringVar:/*}"</c> appends <c>"/"</c> to the beginning of the string, if variable is not null).
            </summary>
            <param name="template">The template.</param>
            <param name="variables">The variables.</param>
            <returns>The string result.</returns>
        </member>
        <member name="T:Atata.TypeFinder">
            <summary>
            Provides a set of methods for type finding.
            </summary>
        </member>
        <member name="M:Atata.TypeFinder.FindInCurrentAppDomain(System.String,System.Boolean)">
            <summary>
            Finds the type by name in current application domain.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="useCache">Uses cache if set to <see langword="true" />.</param>
            <returns>The found type.</returns>
            <exception cref="T:Atata.TypeNotFoundException">Type not found.</exception>
        </member>
        <member name="M:Atata.TypeFinder.FindInAssemblies(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds the type by name in the specified assemblies.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="assembliesToFindIn">The assemblies to find in.</param>
            <param name="useCache">Uses cache if set to <see langword="true" />.</param>
            <returns>The found type.</returns>
            <exception cref="T:Atata.TypeNotFoundException">Type not found.</exception>
        </member>
        <member name="T:Atata.UriUtils">
            <summary>
            Provides a set of methods for URI manipulations.
            </summary>
        </member>
        <member name="M:Atata.UriUtils.TryCreateAbsoluteUrl(System.String,System.Uri@)">
            <summary>
            Tries to create an absolute <see cref="T:System.Uri" />.
            </summary>
            <param name="urlString">The URL string.</param>
            <param name="result">The result containing constructed <see cref="T:System.Uri" />.</param>
            <returns>
            A <see cref="T:System.Boolean" /> value that is <see langword="true" /> if the <see cref="T:System.Uri" /> was successfully created;
            otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Atata.UriUtils.Concat(System.String,System.String)">
            <summary>
            Concatenates the specified base URI with the relative URI.
            </summary>
            <param name="baseUri">The base URI.</param>
            <param name="relativeUri">The relative URI.</param>
            <returns>The created <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="T:Atata.AggregateAssertionException">
            <summary>
            Represents one or more errors that occur during an aggregate assertion.
            </summary>
        </member>
        <member name="P:Atata.AggregateAssertionException.WarningResultPrefix">
            <summary>
            Gets or sets the prefix displayed at the beginning of warning result message.
            The default value is <c>"⚠ "</c>.
            </summary>
        </member>
        <member name="P:Atata.AggregateAssertionException.FailedResultPrefix">
            <summary>
            Gets or sets the prefix displayed at the beginning of failed result message.
            The default value is <c>"❎ "</c>.
            </summary>
        </member>
        <member name="P:Atata.AggregateAssertionException.ExceptionResultPrefix">
            <summary>
            Gets or sets the prefix displayed at the beginning of exception result message.
            The default value is <c>"❎ "</c>.
            </summary>
        </member>
        <member name="P:Atata.AggregateAssertionException.AppendResultStackTrace">
            <summary>
            Gets or sets a value indicating whether the stack trace of assertion result item should be appended to the combined message.
            The default value is <see langword="false" />.
            </summary>
        </member>
        <member name="P:Atata.AggregateAssertionException.Results">
            <summary>
            Gets the collection of assertion results.
            </summary>
        </member>
        <member name="T:Atata.AssertionResult">
            <summary>
            Represents the result of assertion.
            </summary>
        </member>
        <member name="P:Atata.AssertionResult.Status">
            <summary>
            Gets the status of assertion.
            </summary>
        </member>
        <member name="P:Atata.AssertionResult.Message">
            <summary>
            Gets the failure message.
            </summary>
        </member>
        <member name="P:Atata.AssertionResult.StackTrace">
            <summary>
            Gets the stack trace of assertion.
            </summary>
        </member>
        <member name="T:Atata.AssertionStatus">
            <summary>
            Specifies the assertion status.
            </summary>
        </member>
        <member name="F:Atata.AssertionStatus.Passed">
            <summary>
            The assertion condition is passed.
            </summary>
        </member>
        <member name="F:Atata.AssertionStatus.Warning">
            <summary>
            Expected assertion condition is not met but the execution was not terminated.
            </summary>
        </member>
        <member name="F:Atata.AssertionStatus.Failed">
            <summary>
            The assertion condition is not met.
            </summary>
        </member>
        <member name="F:Atata.AssertionStatus.Exception">
            <summary>
            The exception occured during assertion.
            </summary>
        </member>
        <member name="T:Atata.IObjectVerificationProviderExtensions">
            <summary>
            Provides a set of verification extension methods.
            </summary>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Satisfy``2(Atata.IObjectVerificationProvider{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Verifies that object satisfies the specified predicate expression.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Satisfy``2(Atata.IObjectVerificationProvider{``0,``1},System.Func{``0,System.Boolean},System.String,``0[])">
            <summary>
            Verifies that object satisfies the specified predicate.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicate">The predicate.</param>
            <param name="message">The message that should sound in a way of "{Something} should {message}".</param>
            <param name="args">The message arguments.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Satisfy``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean}})">
            <summary>
            Verifies that collection satisfies the specified predicate expression.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Satisfy``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.String,``0[])">
            <summary>
            Verifies that collection satisfies the specified predicate.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicate">The predicate.</param>
            <param name="message">The message that should sound in a way of "{Something} should {message}".</param>
            <param name="args">The message arguments.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Equal``2(Atata.IObjectVerificationProvider{``0,``1},``0)">
            <summary>
            Verifies that object is equal to <paramref name="expected" /> value.
            The method does the same as <see cref="M:Atata.IObjectVerificationProviderExtensions.Be``2(Atata.IObjectVerificationProvider{``0,``1},``0)" /> method,
            and the second one is preferable to use.
            This method will be removed in future.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">The expected value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Be``2(Atata.IObjectVerificationProvider{``0,``1},``0)">
            <summary>
            Verifies that object is equal to <paramref name="expected" /> value.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">The expected value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainSingle``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Verifies that collection contains only a single item.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainSingle``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},``0)">
            <summary>
            Verifies that collection contains a single item equal to <paramref name="expected" /> parameter.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected item value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainSingle``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},``0)">
            <summary>
            Verifies that collection contains a single item equal to <paramref name="expected" /> parameter.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected object value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainSingle``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Verifies that collection contains a single item matching <paramref name="predicateExpression" />.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainExactly``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},System.Int32,``0)">
            <summary>
            Verifies that collection contains exact count of items equal to <paramref name="expectedValue" /> parameter.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expectedCount">The expected count of items.</param>
            <param name="expectedValue">An expected item value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainExactly``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},System.Int32,``0)">
            <summary>
            Verifies that collection contains exact count of items equal to <paramref name="expectedValue" /> parameter.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expectedCount">The expected count of items.</param>
            <param name="expectedValue">An expected object value.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.ContainExactly``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Verifies that collection contains exact count of items matching <paramref name="predicateExpression" />.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expectedCount">The expected count of items.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},``0[])">
            <summary>
            Verifies that collection contains expected items.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected item values.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that collection contains expected items.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected item values.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},``0[])">
            <summary>
            Verifies that collection contains items equal to expected values.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected object values.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that collection contains items equal to expected values.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="expected">An expected object values.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Verifies that collection contains at least one item matching <paramref name="predicateExpression" />.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.Contain``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Verifies that collection contains at least one item matching <paramref name="predicateExpression" />.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="predicateExpression">The predicate expression.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInAscendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Verifies that collection is sorted in ascending order.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInAscendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{System.Nullable{``0}},``1})">
            <summary>
            Verifies that collection is sorted in ascending order.
            </summary>
            <typeparam name="TItem">The type of the collection item of nullable value (struct) type.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInAscendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1})">
            <summary>
            Verifies that collection is sorted in ascending order.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInDescendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Verifies that collection is sorted in descending order.
            </summary>
            <typeparam name="TItem">The type of the collection item.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInDescendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{System.Nullable{``0}},``1})">
            <summary>
            Verifies that collection is sorted in descending order.
            </summary>
            <typeparam name="TItem">The type of the collection item of nullable value (struct) type.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IObjectVerificationProviderExtensions.BeInDescendingOrder``2(Atata.IObjectVerificationProvider{System.Collections.Generic.IEnumerable{Atata.IObjectProvider{``0}},``1})">
            <summary>
            Verifies that collection is sorted in descending order.
            </summary>
            <typeparam name="TObject">The type of the collection item object.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="P:Atata.IObjectVerificationProvider`2.ObjectProvider">
            <summary>
            Gets the object provider that is verified.
            </summary>
        </member>
        <member name="T:Atata.IUIComponentVerificationProviderExtensions">
            <summary>
            Provides a set of verification extension methods for <see cref="T:Atata.UIComponent`1" /> and its inheritors.
            </summary>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.Exist``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the component exist.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BePresent``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the component is present.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeVisible``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the component is visible.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeVisibleInViewPort``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the component is visible in view port (visible browser screen area).
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeHidden``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the component is hidden.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeEnabled``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the control is enabled.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeDisabled``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the control is disabled.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeReadOnly``3(Atata.IFieldVerificationProvider{``0,``1,``2})">
            <summary>
            Verifies that the control is read-only.
            </summary>
            <typeparam name="TData">The type of the control's data.</typeparam>
            <typeparam name="TControl">The type of the control.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeChecked``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the control is checked.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.BeUnchecked``2(Atata.IUIComponentVerificationProvider{``0,``1})">
            <summary>
            Verifies that the control is unchecked.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.HaveChecked``2(Atata.IFieldVerificationProvider{``0,Atata.CheckBoxList{``0,``1},``1},``0)">
            <summary>
            Verifies that the checkbox list has the specified value(s) checked.
            </summary>
            <typeparam name="TData">The type of the control's data.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="value">The expected value or combination of enumeration flag values.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.HaveClass``2(Atata.IUIComponentVerificationProvider{``0,``1},System.String[])">
            <summary>
            Verifies that the component has the specified class(es).
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="classNames">The expected class names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="M:Atata.IUIComponentVerificationProviderExtensions.HaveClass``2(Atata.IUIComponentVerificationProvider{``0,``1},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that the component has the specified class(es).
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <param name="verifier">The verification provider.</param>
            <param name="classNames">The expected class names.</param>
            <returns>The owner instance.</returns>
        </member>
        <member name="P:Atata.IUIComponentVerificationProvider`2.Component">
            <summary>
            Gets the component that is verified.
            </summary>
        </member>
        <member name="P:Atata.IVerificationProvider`1.IsNegation">
            <summary>
            Gets a value indicating whether the verification is a negation verification.
            </summary>
        </member>
        <member name="P:Atata.IVerificationProvider`1.Strategy">
            <summary>
            Gets or sets the verification strategy.
            </summary>
        </member>
        <member name="P:Atata.IVerificationProvider`1.Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.IVerificationProvider`1.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
        </member>
        <member name="P:Atata.IVerificationProvider`1.RetryInterval">
            <summary>
            Gets or sets the retry interval.
            </summary>
        </member>
        <member name="M:Atata.IVerificationProvider`1.GetRetryOptions">
            <summary>
            Gets the retry options.
            </summary>
            <returns>The retry options.</returns>
        </member>
        <member name="T:Atata.AtataAggregateAssertionStrategy">
            <summary>
            Represents native/default Atata aggregate assertion strategy.
            </summary>
        </member>
        <member name="T:Atata.AtataWarningReportStrategy">
            <summary>
            Represents the native/default Atata strategy for warning assertion reporting.
            Adds <see cref="T:Atata.AssertionResult" /> object of warning kind to <see cref="P:Atata.AtataContext.PendingFailureAssertionResults" /> collection of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="T:Atata.ExpectationVerificationStrategy">
            <summary>
            Represents a core part of expectation verification functionality.
            Its <see cref="M:Atata.ExpectationVerificationStrategy.ReportFailure(System.String,System.Exception)" /> method builds warning details, appends a warning into log,
            adds assertion result to <see cref="P:Atata.AtataContext.AssertionResults" /> collection of <see cref="P:Atata.AtataContext.Current" />
            and finally reports a warning details to <see cref="P:Atata.AtataContext.WarningReportStrategy" /> of <see cref="P:Atata.AtataContext.Current" />.
            </summary>
        </member>
        <member name="T:Atata.IAggregateAssertionStrategy">
            <summary>
            Represents an interface for aggregate assertion strategy.
            </summary>
        </member>
        <member name="M:Atata.IAggregateAssertionStrategy.Assert(System.Action)">
            <summary>
            Executes the specified action in aggregate assertion mode.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Atata.IAggregateAssertionStrategy.ReportFailure(System.String,System.String)">
            <summary>
            Reports the assertion failure.
            </summary>
            <param name="message">The message.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="P:Atata.IVerificationStrategy.VerificationKind">
            <summary>
            Gets the text describing the kind of the verification.
            </summary>
        </member>
        <member name="P:Atata.IVerificationStrategy.DefaultTimeout">
            <summary>
            Gets the default timeout.
            </summary>
        </member>
        <member name="P:Atata.IVerificationStrategy.DefaultRetryInterval">
            <summary>
            Gets the default retry interval.
            </summary>
        </member>
        <member name="M:Atata.IVerificationStrategy.ReportFailure(System.String,System.Exception)">
            <summary>
            Reports the failure.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Atata.IWarningReportStrategy">
            <summary>
            Represents an interface of strategy for warning assertion reporting.
            </summary>
        </member>
        <member name="M:Atata.IWarningReportStrategy.Report(System.String,System.String)">
            <summary>
            Reports the assertion failure of warning kind.
            </summary>
            <param name="message">The message.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="T:Atata.NUnitAggregateAssertionStrategy">
            <summary>
            Represents aggregate assertion strategy for NUnit.
            Uses NUnit's <c>Assert.Multiple</c> method for aggregate assertion.
            </summary>
        </member>
        <member name="T:Atata.NUnitWarningReportStrategy">
            <summary>
            Represents the NUnit strategy for warning assertion reporting.
            Invokes <c>TestExecutionContext.CurrentContext.CurrentResult.RecordAssertion(AssertionStatus.Warning, message, stackTrace)</c>.
            </summary>
        </member>
        <member name="T:Atata.WaitingVerificationStrategy">
            <summary>
            Represents the verification strategy for waitings.
            Its <see cref="M:Atata.WaitingVerificationStrategy.ReportFailure(System.String,System.Exception)" /> method throws <see cref="T:System.TimeoutException" />.
            </summary>
        </member>
        <member name="T:Atata.Until">
            <summary>
            Specifies the waiting condition of the component/element.
            </summary>
        </member>
        <member name="F:Atata.Until.Missing">
            <summary>
            Waits until the component/element will be missing.
            </summary>
        </member>
        <member name="F:Atata.Until.Hidden">
            <summary>
            Waits until the component/element will be hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingOrHidden">
            <summary>
            Waits until the component/element will be missing or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.Visible">
            <summary>
            Waits until the component/element will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleOrHidden">
            <summary>
            Waits until the component/element will be visible or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenHidden">
            <summary>
            Waits until the component/element will be visible and then until it will be hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenMissing">
            <summary>
            Waits until the component/element will be visible and then until it will be missing.
            </summary>
        </member>
        <member name="F:Atata.Until.VisibleThenMissingOrHidden">
            <summary>
            Waits until the component/element will be visible and then until it will be missing or hidden.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingThenVisible">
            <summary>
            Waits until the component/element will be missing and then until it will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.HiddenThenVisible">
            <summary>
            Waits until the component/element will be hidden and then until it will be visible.
            </summary>
        </member>
        <member name="F:Atata.Until.MissingOrHiddenThenVisible">
            <summary>
            Waits until the component/element will be missing or hidden and then until it will be visible.
            </summary>
        </member>
        <member name="T:Atata.WaitBy">
            <summary>
            Specifies the kind of the element selector for the waiting.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Id">
            <summary>
            Uses the id selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Name">
            <summary>
            Uses the name selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Class">
            <summary>
            Uses the class selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.Css">
            <summary>
            Uses the CSS selector kind.
            </summary>
        </member>
        <member name="F:Atata.WaitBy.XPath">
            <summary>
            Uses the XPath selector kind.
            </summary>
        </member>
        <member name="T:Atata.WaitOptions">
            <summary>
            Represents the component waiting options.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.ThrowOnPresenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the presence (exists or visible) failure.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.ThrowOnAbsenceFailure">
            <summary>
            Gets or sets a value indicating whether to throw the exception on the absence (missing or hidden) failure.
            The default value is <see langword="true" />.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.PresenceTimeout">
            <summary>
            Gets or sets the presence (exists or visible) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.AbsenceTimeout">
            <summary>
            Gets or sets the absence (missing or hidden) timeout in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingTimeout.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.WaitOptions.RetryInterval">
            <summary>
            Gets or sets the retry interval in seconds.
            The default value is taken from <c>AtataContext.Current.WaitingRetryInterval.TotalSeconds</c>.
            </summary>
        </member>
        <member name="P:Atata.TermFindItemAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.FindAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.FindSettingsAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.ControlDefinitionAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.TermSettingsAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.TermVerificationTriggerAttribute.Atata#IHasOptionalProperties#OptionalProperties">
            <summary>
            Gets the optional properties bag.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#IObjectProvider{System#Collections#Generic#IEnumerable{TItem}}#ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#IObjectProvider{System#Collections#Generic#IEnumerable{TItem}@TOwner}#Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#IObjectProvider{System#Collections#Generic#IEnumerable{TItem}}#Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#IObjectProvider{System#Collections#Generic#IEnumerable{TItem}@TOwner}#IsDynamic">
            <summary>
            Gets a value indicating whether the provided object is dynamic (can it vary for every value request).
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#ISupportsMetadata#Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:Atata.ControlList`2.Atata#ISupportsMetadata#ComponentType">
            <summary>
            Gets the type of the component.
            </summary>
        </member>
        <member name="M:Atata.ControlList`2.Atata#IClearsCache#ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Atata.EditableTextField`2.Atata#IClearable#Clear">
            <summary>
            Clears the value.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Atata#IObjectProvider{TValue}#Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Atata#IObjectProvider{TValue}#ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Atata#IObjectProvider{TValue@TOwner}#Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.Field`2.Atata#IObjectProvider{TValue@TOwner}#IsDynamic">
            <summary>
            Gets a value indicating whether the provided object is dynamic (can it vary for every value request).
            </summary>
        </member>
        <member name="M:Atata.Field`2.Atata#IConvertsValueToString{TValue}#ConvertValueToString(`0)">
            <summary>
            Converts the value to string.
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to string.</returns>
        </member>
        <member name="P:Atata.UIComponent`1.Atata#IUIComponent{TOwner}#Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Atata#IUIComponent{TOwner}#ScopeLocator">
            <summary>
            Gets the scope locator.
            </summary>
        </member>
        <member name="P:Atata.UIComponent`1.Atata#IUIComponent{TOwner}#ScopeSource">
            <summary>
            Gets the source of the scope.
            </summary>
        </member>
        <member name="M:Atata.UIComponent`1.Atata#IUIComponent{TOwner}#CreateValueProvider``1(System.String,System.Func{``0})">
            <summary>
            Creates a value provider with the specified <paramref name="providerName" /> and using <paramref name="valueGetFunction" />.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="providerName">The name of the provider.</param>
            <param name="valueGetFunction">The function that gets a value.</param>
            <returns>A new instance of <see cref="T:Atata.ValueProvider`2" /> type.</returns>
        </member>
        <member name="M:Atata.DriverAtataContextBuilder`1.Atata#IDriverFactory#Create">
            <summary>
            Creates the driver instance.
            </summary>
            <returns>The created <see cref="T:OpenQA.Selenium.IWebDriver" /> instance.</returns>
        </member>
        <member name="P:Atata.DriverAtataContextBuilder`3.Atata#IUsesLocalBrowser#BrowserName">
            <summary>
            Gets the name of the browser.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.Atata#IObjectProvider{TObject}#Object">
            <summary>
            Gets the object value/instance.
            </summary>
        </member>
        <member name="P:Atata.ObjectProvider`2.Atata#IObjectProvider{TObject@TOwner}#Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.FieldVerificationProvider`3.Atata#IObjectVerificationProvider{TValue@TOwner}#ObjectProvider">
            <summary>
            Gets the object provider that is verified.
            </summary>
        </member>
        <member name="P:Atata.ObjectVerificationProvider`2.Atata#IObjectVerificationProvider{TObject@TOwner}#ObjectProvider">
            <summary>
            Gets the object provider that is verified.
            </summary>
        </member>
        <member name="P:Atata.UIComponentVerificationProvider`3.Atata#IUIComponentVerificationProvider{TComponent@TOwner}#Component">
            <summary>
            Gets the component that is verified.
            </summary>
        </member>
        <member name="P:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#IsNegation">
            <summary>
            Gets a value indicating whether the verification is a negation verification.
            </summary>
        </member>
        <member name="P:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#Strategy">
            <summary>
            Gets or sets the verification strategy.
            </summary>
        </member>
        <member name="P:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#Owner">
            <summary>
            Gets the owner object.
            </summary>
        </member>
        <member name="P:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
        </member>
        <member name="P:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#RetryInterval">
            <summary>
            Gets or sets the retry interval.
            </summary>
        </member>
        <member name="M:Atata.VerificationProvider`2.Atata#IVerificationProvider{TOwner}#GetRetryOptions">
            <summary>
            Gets the retry options.
            </summary>
            <returns>The retry options.</returns>
        </member>
        <member name="P:Atata.FieldVerificationProvider`3.NegationFieldVerificationProvider.Atata#IObjectVerificationProvider{TValue@TOwner}#ObjectProvider">
            <summary>
            Gets the object provider that is verified.
            </summary>
        </member>
        <member name="P:Atata.ObjectVerificationProvider`2.NegationObjectVerificationProvider.Atata#IObjectVerificationProvider{TObject@TOwner}#ObjectProvider">
            <summary>
            Gets the object provider that is verified.
            </summary>
        </member>
        <member name="P:Atata.UIComponentVerificationProvider`3.NegationUIComponentVerificationProvider`1.Atata#IUIComponentVerificationProvider{TComponent@TOwner}#Component">
            <summary>
            Gets the component that is verified.
            </summary>
        </member>
    </members>
</doc>
